#------------------------------------------------------------
#
# @path AugSys2/ConstraintInitializer/CriticalPoint/setCalcOPObjf.txt
#
# @brief Sets the calculated optimal point
#
# @param list of values of optimal point,
#        list of names of the variables and parameters in calculated optimal point
#
# @return optimal point in the following format [Name of variable = value, ...]
#
# @notes Used during running AugSys2/ConstraintInitializer/calcOptPoint.txt
#
#------------------------------------------------------------
          setCalcOPOptPoint:= proc(ValueOptPoint::{list(EvalsToFloat),list(name= EvalsToFloat)})
            
            local i, NewOptPoint, NamesOfVars, NLPVars;
            
            if (type(ValueOptPoint)=list(name= EvalsToFloat))
            then 
                 calcOPOptPointInModule:=ValueOptPoint;
            else 
                NLPVars:=AugSys2:-ConstraintInitializer:-NLP:-getVariables();
                NamesOfVars:=map(lhs,NLPVars);
                if nops(ValueOptPoint)<>nops(NamesOfVars)
                	then error("Optimal Point has not the same order as \"Variables\" in NLP");
                end if;
                NewOptPoint:=[];
                for i from 1 to nops(ValueOptPoint) do
			NewOptPoint:=[op(NewOptPoint),NamesOfVars[i]=ValueOptPoint[i]]
                end do;
                calcOPOptPointInModule:=eval(NewOptPoint);
            end if;
            return(); 
          end proc; # setCalcOPOptPoint
