###############################################################################
#
# @path AugSys2/ConstraintInitializer/CriticalPoint/setStartingPoint.txt
#
# @brief Sets point with which the optimization will start 
#
# @revision
#  2008-03-13 written by dka
#
###############################################################################
setStartingPoint:= proc(
  NewVars::{list(EvalsToFloat),list(name= EvalsToFloat)}
)

  local VariblesOfNLP, Missing, Obsolete, NamesOfVariblesOfNLP, 
        NamesOfVariblesOfStartingPoint, i, j, OrderedCriticalPoint,
        NamesOfVariblesOfNLPString, i1, NamesOfVariblesOfStartingPointString;
  
  #
  # checking if "Variables" is defined in NLP
  #
  
  VariblesOfNLP:=AugSys2:-ConstraintInitializer:-NLP:-getVariables();
       
  if (not type(VariblesOfNLP, list(name= EvalsToFloat..EvalsToFloat))) or (nops(VariblesOfNLP)=0)
  then error("first define \"Variables\" in NLP");
  end if;

  #
  # cheking if "Variables" in NLP and starting critical point have the same order
  #
  
  if (nops(NewVars)<>nops(VariblesOfNLP))
  then error("Starting critical point must be the same order as number of variables in NLP",nops(VariblesOfNLP));
  end if;

  #
  # if critical point was given as list of numbers setting it
  #

  if type(NewVars, list(EvalsToFloat))
  then 
       startingPointInModule:= NewVars;
  end if;
  
  #
  # if critical point was givem as list of with names of variables and its values
  # then looking for correcponding plases for them in starting point
  #

  if type(NewVars, list(name= EvalsToFloat))
  then 
       NamesOfVariblesOfNLP:=map(lhs,VariblesOfNLP);  
       NamesOfVariblesOfStartingPoint:=map(lhs,NewVars);
      
       NamesOfVariblesOfNLPString:=[];
       NamesOfVariblesOfStartingPointString:=[];
       for i1 from 1 to nops(NamesOfVariblesOfNLP) do
       	NamesOfVariblesOfNLPString:=[op(NamesOfVariblesOfNLPString),convert(NamesOfVariblesOfNLP[i1],string)];
       	NamesOfVariblesOfStartingPointString:=[op(NamesOfVariblesOfStartingPointString),convert(NamesOfVariblesOfStartingPoint[i1],string)]
       end do;
       
       Missing, Obsolete:= Aux:-ListOperations:-getMissingAndObsoleteNames(
        NamesOfVariblesOfStartingPointString,
        NamesOfVariblesOfNLPString
        );
       if not
         Missing= {}
       then
         error("assignments are missing for %1", Missing);
       end if;
 
       OrderedCriticalPoint:=array(1..nops(NamesOfVariblesOfNLP));
                       
       for i from 1 to nops(NamesOfVariblesOfNLPString) do
         for j from 1 to nops(NamesOfVariblesOfStartingPointString) do
           if(NamesOfVariblesOfNLPString[i]=NamesOfVariblesOfStartingPointString[j])
           then OrderedCriticalPoint[i]:= rhs(NewVars[j]);
           end if;
         end do;
       end do;

       startingPointInModule:= convert(OrderedCriticalPoint,list);
    
  end if;

  return();


end proc; 

 
 
