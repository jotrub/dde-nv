###############################################################################
#
# @path AugSys2/ConstraintInitializer/NLP/addNVConstraintsForTighterApprBox.txt
#
# @brief Adds nomal vector constarints to tighter robustness ball 
#        and setts nomal vectors to critical manifold equal to 
#        nomal vectors to new robustness ball  
#
# @param list of names for robustness ball variables,
#        list of names for normal vector varibles to new robustness ball, 
#        list of names for critical manifold variables,
#        list of names for normal vector varibles,
#        list of names for optimal point varibles,
#        minimum distance between critical manifold and robustness ball
#        sign an optional parameter if =-1 then direction of NV change to opposite
#
# @revision
#  2008-07-14 written by dka
#
###############################################################################
addNVConstraintsForTighterApprBox:= proc(namesForNewRobustnessBallVars::list(name),
                                         namesForNVToNewRobustnessBallVars::list(name),
                                         namesForCriticalBaundVars::list(name),
                                         namesForNVVars::list(name),
                                         namesForOptPointVars::list(name),
                                         powerOfNewRobustnessBall::integer,
				         minDistance::EvalsToFloat,
				         signOfDirectionNV::integer)
 
  local numberOfNVVars, i, signNV, newRobBallEqn, squareOfNormNV, squareOfNormNVToNewRobBall;
  
  ###
  # cheking if augmented system already created
  ###
  
  if (isAugSysCreatedInModule <> true)
   then error("first define augmented system with the procedure createAugSys");
  end if;
  
  ###
  # number of normal vector variables
  ###
  
  numberOfNVVars:=nops(listOfNVParamsInModule);
  
  ###
  # cheking if number of normal vector variables the same as number of names for critical manifold variables
  ###

  if (nops(namesForCriticalBaundVars)<>numberOfNVVars)
  then error("list of names for critical manifold variables has to have dimension", numberOfNVVars);
  end if;
  
  ###
  # cheking if number of normal vector variables the same as number of names for robustness ball variables
  ###
  
  if (nops(namesForNewRobustnessBallVars)<>numberOfNVVars)
  then error("list of names for robustness ball variables has not the same dimension as list of variables for critical manifold", numberOfNVVars);
  end if;
  
  ###
  # cheking if number of normal vector variables the same as number of names for optimal point varibles
  ###
  
  if (nops(namesForOptPointVars)<>numberOfNVVars)
  then error("list of names for optimal point varibles has not the same dimension as list of variables for critical manifold", numberOfNVVars);
  end if;
  
  ###
  # cheking if number of normal vector variables the same as number of names for normal vector varibles to new robustness ball
  ###
  
  if (nops(namesForNVToNewRobustnessBallVars)<>numberOfNVVars)
  then error("list of names for normal vector varibles to new robustness ball has not the same dimension as list of variables for critical manifold", numberOfNVVars);
  end if;
  
  ###
  # cheking if number of normal vector variables the same as in definition of augmented system
  ###
  
  if (nops(namesForNVVars)<>numberOfNVVars)
  then error("list of names for normal vector varibles has not the same dimension as list of variables for critical manifold", numberOfNVVars);
  end if;
  
  ###
  # cheking if list of names for critical manifold variables the same as in definition of augmented system
  ###

  if (convert(namesForCriticalBaundVars,set)<>convert(listOfNVParamsInModule,set))
  then error("list of names for critical manifold variables has to consists of",listOfNVParamsInModule);
  end if;
  
  ###
  # if direction of normal vectors to critical manifold is not defined, then set it to 1
  # if the direction eqals to -1, then it means that we change direction of normal vectors to opposite
  ###

  if (signOfDirectionNV=-1)
  then signNV:=-1;
  else signNV:=1;
  end if;

  ##
  # adding constraints to normal vector distance for critical manifolds
  ##
  
  AugSys2:-ConstraintInitializer:-NLP:-addDistanceConstraints(namesForNewRobustnessBallVars, minDistance, signNV);
  
  ##
  # adding constraints to the normal vectors for robustness manifold
  ##
 
  for i from 1 to numberOfNVVars do
   AugSys2:-ConstraintInitializer:-NLP:-addConstraint(0=namesForNVToNewRobustnessBallVars[i]-powerOfNewRobustnessBall*2*(namesForNewRobustnessBallVars[i]-namesForOptPointVars[i])^(powerOfNewRobustnessBall*2-1));
  end do;
  
  ##
  # adding constraints to the form of new robustness ball
  ##

  newRobBallEqn:=2;
  for i from 1 to numberOfNVVars do
   newRobBallEqn:=newRobBallEqn-(namesForNewRobustnessBallVars[i]-namesForOptPointVars[i])^(powerOfNewRobustnessBall*2);
  end do;
  AugSys2:-ConstraintInitializer:-NLP:-addConstraint(0=newRobBallEqn);
  
  ##
  # adding constraints that the normal vectors for robustness manifold equals to the normal vectors for critical manifold
  ##
  
  squareOfNormNV:=0;
  squareOfNormNVToNewRobBall:=0;
  for i from 1 to numberOfNVVars do
   squareOfNormNVToNewRobBall:=squareOfNormNVToNewRobBall+(namesForNVToNewRobustnessBallVars[i])^2;
   squareOfNormNV:=squareOfNormNV+(namesForNVVars[i])^2;
  end do;
  
  for i from 1 to numberOfNVVars do
   AugSys2:-ConstraintInitializer:-NLP:-addConstraint(0=namesForNVToNewRobustnessBallVars[i]/(squareOfNormNVToNewRobBall)^(1/2)+namesForNVVars[i]/(squareOfNormNV)^(1/2));
  end do;

  return();

end proc; #addNVConstraintsForTighterApprBox

 
 
 
 
 
