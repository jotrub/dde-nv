##########################################################################
# 
# @path AugSys2/PeriodicBif/CreateFlipOrFoldNVSys.txt
#
# @brief Creates a general augmented system for Flip or Fold critical boundaries
#        for periodic solutions of ODE systems
# 
# @authors dka
#
# @param  
#   dimension of ODEs,  
#   dimension of uncertain parameters Alpha,
#   real eigenvalue corresponding to bifurcation (+/-1),
#   optional argument: radius of circle where eigenvalues have to lie (if not given by default = 1)
#
# @return 
#   a system for finding normal vectors (symbolical)
#
# @notes 
#   in NV system the equations that define Poincare mapping are ommited
#
# @revision
# 2011-11-07 Written by dka
# 
##########################################################################
    CreateFlipOrFoldNVSys:=proc(
      numOfDynEqns::integer,
      numOfUncParam::integer,
      inputEigVal::numeric
      # optional radius
    )

      local  i, j, f_x, f_xTransp, f_xx,
	f_xalpha, V, U, R, NewVariables, NewEquations, 
        f_alpha, f_alphaTransp, W, fxx_w, v_fxx_w, fxalpha_w, v_fxalpha_w,
        listForFxx, listForFxAlpha, ExtendedSystemEquations, ExtendedSystemVariables,
        s_x, s_T, s_alpha, f_T, f_xT, f_Ttransp, f_xT_w, InternalVariables, VT,
        f_xlist, f_alphalist, f_xTlist, ExtendedSysToBeSubs,
        radius, result;
        

      #
      # extract optional arguments
      #
        if 
          nargs>3
        then 
          radius:= args[4];
          if not ((radius>=0) and (radius<=1))
  	  then error("Radius of circle where eigenvalues have to lie (forth input) have to be between 0 to 1");
   	  end if;
        else
          radius:=1; 
        end if;
        
       #
       # list of internal variables that will be calculated numerically
       # 
         InternalVariables:=[];
       
       #
       # symbolic definitions of derivatives matrices and tensors
       #
  
       # f_x
        
        f_x:= Matrix(numOfDynEqns,numOfDynEqns,symbol='Fx');
        
        f_xlist:=convert(f_x,listlist);
        for i from 1 to numOfDynEqns do
         InternalVariables:=[op(InternalVariables),op(f_xlist[i])]
        end do; 

        f_xTransp:= LinearAlgebra[Transpose](f_x); 
         
       # f_alpha

        f_alpha:= Matrix(numOfDynEqns,numOfUncParam,symbol='Fp');
        
        f_alphalist:=convert(f_alpha,listlist);
        for i from 1 to numOfDynEqns do
         InternalVariables:=[op(InternalVariables),op(f_alphalist[i])]
        end do; 

        f_alphaTransp:= LinearAlgebra[Transpose](f_alpha);
 
       # f_xx       
       
        listForFxx := []; 
        for i to numOfDynEqns do 
	   listForFxx := [op(listForFxx), convert(Matrix(numOfDynEqns, numOfDynEqns, symbol = 'Fxx[i]'), listlist)] 
        end do: 
        f_xx := Array(listForFxx);
        
        for i from 1 to numOfDynEqns do
	   for j from 1 to numOfDynEqns do
	      InternalVariables:=[op(InternalVariables),op(listForFxx[i,j])];
	   end do;
        end do;
      
      # f_xalpha
       
        listForFxAlpha := []; 
        for i to numOfDynEqns do 
	   listForFxAlpha := [op(listForFxAlpha), convert(Matrix(numOfDynEqns, numOfUncParam, symbol = 'Fxp[i]'), listlist)] 
        end do: 
        f_xalpha := Array(listForFxAlpha);

        for i from 1 to numOfDynEqns do
	   for j from 1 to numOfDynEqns do
	      InternalVariables:=[op(InternalVariables),op(listForFxAlpha[i,j])];
	   end do;
        end do;
     
      # f_T, f_xT, where T denotes period
         
        f_T:=Vector(numOfDynEqns,symbol='Ft');
        f_Ttransp:=LinearAlgebra[Transpose](f_T);
        
        f_xT:=Matrix(numOfDynEqns,numOfDynEqns, symbol='Fxt');


        InternalVariables:=[op(InternalVariables),op(convert(f_T,list))];
        
        f_xTlist:=convert(f_xT,listlist);
        for i from 1 to numOfDynEqns do
         InternalVariables:=[op(InternalVariables),op(f_xTlist[i])]
        end do; 
     
     
      #
      # phase equation is chosen as s:=x-delta_1(x0)=0, where delta_1(x0)=x0_1;
      # derivatives of the phase condition s_x=e_1 and s_T=0 and s_alpha=0
      # 
        s_x:=Vector(numOfDynEqns);
        s_x[1]:=1;
        s_T:=0;
        s_alpha:=Vector(numOfUncParam);
 
  
      #------------------------------------------------------------
      #
      # start construction of normal vector system
      #
      #------------------------------------------------------------
        #
        # v, w 
        #
          V:= [seq(
            v[i1], 
            i1=1..numOfDynEqns)
          ]; 
  
          W:= [seq(
            w[i1], 
            i1=1..numOfDynEqns)
          ]; 

        #
        # u and r 
        #
          U:= [seq(
          u[i1], 
            i1=1..numOfDynEqns)
          ]; 
  
          R:= [seq(
          r[i1], 
            i1=1..numOfUncParam)
          ]; 
  

      # augmented system will be in ExtendedSystemEquations, 
      # ExtendedSystemVariables etc., 
      # lists NewEquations, NewVariables are used to build next block 
      #


        # model equations f-x = 0 are ommited
       
        #----------------------------------------
        #
        # fx w +/- w = 0
        #
        #----------------------------------------

         NewEquations := LinearAlgebra[Multiply](f_x, convert(W,Vector))
         -LinearAlgebra[Multiply](convert(W,Vector), inputEigVal*radius);
         
         NewEquations:=[seq(0=NewEquations[i1],i1=1..numOfDynEqns)];

         NewVariables:=[op(W)];
          
         ExtendedSystemEquations:= NewEquations;
         ExtendedSystemVariables:= NewVariables;


        #----------------------------------------
        #
        # wT w -1 = 0
        #
        #----------------------------------------

        

        NewEquations := LinearAlgebra[Multiply](LinearAlgebra[Transpose](convert(W,Vector)), convert(W,Vector))-1; 

        ExtendedSystemEquations:= [
            op(ExtendedSystemEquations),   
            0=NewEquations                    
          ];


        #----------------------------------------
        #
        # fxT v +/- v + g1 w = 0
        #
        #----------------------------------------

         NewEquations := LinearAlgebra[Multiply](f_xTransp, convert(V,Vector))
         -LinearAlgebra[Multiply](convert(V,Vector), inputEigVal*radius)
         +LinearAlgebra[Multiply](convert(W,Vector), g1);
         
         NewEquations:=[seq(0=NewEquations[i1],i1=1..numOfDynEqns)];

         NewVariables:=[op(V),g1];
          
          ExtendedSystemEquations:= [
            op(ExtendedSystemEquations),   
            op(NewEquations)                    
          ];
  
          ExtendedSystemVariables:= [
            op(ExtendedSystemVariables),
            op(NewVariables)
          ];


        #----------------------------------------
        #
        # vT w -1 = 0
        #
        #----------------------------------------
       

        NewEquations := LinearAlgebra[Multiply](LinearAlgebra[Transpose](convert(V,Vector)), convert(W,Vector))-1;

        ExtendedSystemEquations:= [
            op(ExtendedSystemEquations),   
            0=NewEquations                    
          ];


        #----------------------------------------
        #
        # fxT u -u + s_x kappa + vT fxx w = 0
        #
        #----------------------------------------
          f_xx:=convert(f_xx,array);
          fxx_w:= Aux:-TensProd:-Tijk_xj(
            f_xx, W
          );

          v_fxx_w:= Aux:-TensProd:-xi_Aij(
            V,
            fxx_w
          ); 

          NewEquations:= LinearAlgebra[Multiply](f_xTransp,convert(U,Vector))-convert(U,Vector)
                        +LinearAlgebra[Multiply](s_x,kappa)+convert(v_fxx_w,Vector);

          NewEquations:=[seq(0=NewEquations[i1],i1=1..numOfDynEqns)];
             
          NewVariables:= [op(U),kappa];
          
          ExtendedSystemEquations:= [
            op(ExtendedSystemEquations),   
            op(NewEquations)                    
          ];
  
          ExtendedSystemVariables:= [
            op(ExtendedSystemVariables),
            op(NewVariables)
          ];
        
        #----------------------------------------
        #
        # fT^T u + s_T kappa + vT fxT w = 0
        #
        #----------------------------------------
          f_xT_w:=LinearAlgebra[Multiply](f_xT,convert(W,Vector));
          VT:=LinearAlgebra[Transpose](convert(V,Vector));
          
          NewEquations:=LinearAlgebra[Multiply](f_Ttransp,convert(U,Vector))+s_T*kappa
                        +LinearAlgebra[Multiply](VT,f_xT_w);
          
          ExtendedSystemEquations:= [
            op(ExtendedSystemEquations),   
            0=NewEquations                    
          ];

        #----------------------------------------
        #
        # f_alphaT u+s_alpha^T kappa + vT fxalpha w - r = 0
        #
        #----------------------------------------
          f_xalpha:=convert(f_xalpha,array);
          fxalpha_w:= Aux:-TensProd:-Tijk_xj(
            f_xalpha, W
          );

          v_fxalpha_w:= Aux:-TensProd:-xi_Tij(
            V,
            fxalpha_w
          ); 

          NewEquations:= LinearAlgebra[Multiply](f_alphaTransp,convert(U,Vector)) 
                        + convert(v_fxalpha_w,Vector)
                        + kappa*s_alpha
                        - convert(R,Vector);


          NewEquations:=[seq(
            0=NewEquations[i1],
            i1=1..numOfUncParam
          )];

          NewVariables:= R;
   
          ExtendedSystemEquations:= [
            op(ExtendedSystemEquations),   
            op(NewEquations)                    
          ];
         
           ExtendedSystemVariables:= [
            op(ExtendedSystemVariables),
            op(NewVariables)
          ];
  
      #------------------------------------------------------------
      #
      # build table for augmented system from lists
      #
      #------------------------------------------------------------
      
      #
      # apart from vars listed explicitly, the following vars
      # are passed on to template:
      #   numOfDynEqns -> NumDynEqns
      #
        ExtendedSysToBeSubs:= table();
        ExtendedSysToBeSubs["Equations"]:= ExtendedSystemEquations;
        ExtendedSysToBeSubs["Variables"]:= ExtendedSystemVariables;
        ExtendedSysToBeSubs["Internal"]:= InternalVariables;
     
        
$include <PeriodicBif/FlipAndFoldNV/CreateFlipOrFoldNVSys/TemplateModule.txt>


    return result;

       end proc;  #AugSys2:-PeriodicBif:-FlipAndFoldNV:-CreateFlipOrFoldNVSys