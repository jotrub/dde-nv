##################################################################################
# 
# @path AugSys2/DiscreteBif/NeimarkSackerNV/CreateNSWithAlgEqnsNVSys.txt
#
# @brief Creates an augmented NV system for Neimark-Sacker critical boundaries
#        for DTASys with or without algebraic equations
#
# @param  
#   a model (with the presence of algebraic equations) to be augmented for finding Neimark-Sacker normal vectors, 
#   list of names of free parameters Alpha
#   optional argument: radius of circle where eigenvalues have to lie (if not given by default = 1)
#
# @return
#    an Sys, first part is the dynamic equations in which the explicit algebraic equation was substituted 
#    and the algebraic equations, 2nd part is the system for finding normal vertors 
# 
# @revision
# 2008-10-29  Written by dka
#
##################################################################################
    CreateNSWithAlgEqnsNVSys:=proc(
      aSys::DTASys,
      ListOfNVparams::list(name)
      # optional radius
    )

      local ListofNames, item, ComplexRightEigSys, ExtendedSysToBeSubs,
     	ExtendedSystemEquations, ExtendedSystemVariables,
	ExtendedSystemParameters, DESys, NumOfEqnsOfModel, f_x, f_xTransp, f_xx,
	f_xalpha, f_p, f_xpTransp, V1, V2, U, R, NewVariables, NewEquations, 
        f_alpha,f_alphaTransp,W1,W2,fxx_w1,v1_fxx_w1,fxx_w2,v2_fxx_w2,
        fxalpha_w1,v1_fxalpha_w1,fxalpha_w2,v2_fxalpha_w2,
        NumNVparamsToBeSubs, ParsOfModel, VarsOfModel, result, 
        radius, AlgEqnsOfModel, AlgVarsOfModel, DynEqnsOfModel, CMatr, i1;
        
      #
      # extract optional arguments
      #
        if 
          nargs>2
        then 
          radius:= args[3];
          if not ((radius>=0) and (radius<=1))
  	  then error("Radius of circle where eigenvalues have to lie (third input) have to be between 0 to 1");
   	  end if;
        else
          radius:=1; 
        end if; 

       #
       # make sure entries of ListOfNVparams exist in first arg
       #

        ListofNames:=map(lhs,aSys["Parameters"]);

        for item in ListOfNVparams do
          if not member(item,ListofNames)
	  then
	    error(
	      "requested normal vector parameter %1 does not exist in model",
	      item
	    );
	  end if;
	end do; 

      #
      # substitude into DynEqns AlgEqns, prepare some variables
      # 
       
        DESys := Aux:-SystemClasses:-subsExplicitAlgEqnsIntoDTASys(aSys); 
        
        DynEqnsOfModel:= DESys["DynEqns"]; 
        AlgEqnsOfModel := DESys["AlgEqns"]; 
        NumOfEqnsOfModel:= nops(DynEqnsOfModel)+nops(AlgEqnsOfModel);
        VarsOfModel:= DESys["DynVars"];
        ParsOfModel:= DESys["Parameters"]; 
        AlgVarsOfModel:= DESys["AlgVars"];

        #
        # if in the DTASys no algebraic equations are given, then returning procedure CreateNeimarkSackerNVSys
        # which creating the module of augmented NV system for DTASys without AEs
        #

        if (nops(AlgEqnsOfModel)=0)
        then return CreateNeimarkSackerNVSys(aSys,ListOfNVparams,radius);
        end if; 

  
        f_x:= Aux:-Derivs:-f_x(
          [op(DynEqnsOfModel),op(AlgEqnsOfModel)],
          [op(VarsOfModel),op(AlgVarsOfModel)]
        );

        f_xTransp:= LinearAlgebra[Transpose](f_x); 

        f_alpha:= Aux:-Derivs:-f_p(
          [op(DynEqnsOfModel),op(AlgEqnsOfModel)],
          ListOfNVparams
        );

        f_alphaTransp:= LinearAlgebra[Transpose](
          f_alpha
        ); 

        f_xx:= Aux:-Derivs:-f_xx(
          [op(DynEqnsOfModel),op(AlgEqnsOfModel)],
          [op(VarsOfModel),op(AlgVarsOfModel)]
        ); 

        f_xalpha:= Aux:-Derivs:-f_xp(
	  [op(DynEqnsOfModel),op(AlgEqnsOfModel)],
          [op(VarsOfModel),op(AlgVarsOfModel)], 
          ListOfNVparams
 	);         

  
      #------------------------------------------------------------
      #
      # start construction of normal vector system
      #
      #------------------------------------------------------------
        #
        # v1, v2, w1, w2 
        #
          V1:= [seq(
            v1[i1], 
            i1=1..NumOfEqnsOfModel)
          ]; 

          V2:= [seq(
            v2[i1], 
            i1=1..NumOfEqnsOfModel)
          ];
  
          W1:= [seq(
            w1[i1], 
            i1=1..NumOfEqnsOfModel)
          ]; 

          W2:= [seq(
            w2[i1], 
            i1=1..NumOfEqnsOfModel)
          ];
  
        #
        # u and r 
        #
          U:= [seq(
          u[i1], 
            i1=1..NumOfEqnsOfModel)
          ]; 
  
          R:= [seq(
          r[i1], 
            i1=1..nops(ListOfNVparams))
          ]; 
  
          NewVariables:= [ 
            op(U),
            op(R)
          ];

      # augmented system will be in ExtendedSystemEquations, 
      # ExtendedSystemVariables etc., 
      # lists NewEquations, NewVariables are used to build next block 
      #

        #----------------------------------------------
        #
        # model equations f-x = 0
        #
        #----------------------------------------------
          NewEquations:= [seq(
            0= rhs(DESys["DynEqns"][i1])-DESys["DynVars"][i1],
            i1= 1..nops(DESys["DynEqns"])
          )];
  
          NewVariables:= DESys["DynVars"];

          #
          # ExtendedSystem with NewEquations, NewVariables
          #
            ExtendedSystemEquations:= NewEquations;
            ExtendedSystemVariables:= NewVariables; 

        #----------------------------------------------
        #
        # model algebraic equations g = 0
        #
        #----------------------------------------------
          NewEquations:= [seq(
            0= rhs(DESys["AlgEqns"][i1]),
            i1= 1..nops(DESys["AlgEqns"])
          )];
  
          NewVariables:= DESys["AlgVars"];

          #
          # ExtendedSystem with NewEquations, NewVariables
          #

            ExtendedSystemEquations:= [
            op(ExtendedSystemEquations),   
            op(NewEquations)                    
          ];
  
          ExtendedSystemVariables:= [
            op(ExtendedSystemVariables),
            op(NewVariables)
          ];


        #----------------------------------------
        #
        # fx w1 - C R w1 cos(p) + C R w2 sin(p)=0
        #
        #----------------------------------------

        #
        # introducing the matrix C for the general eigenvalues definition
        #

         CMatr:= Matrix(NumOfEqnsOfModel);

         for i1 from 1 to nops(DESys["DynEqns"]) do
         CMatr[i1,i1]:=1;
	 end do; 


         NewEquations := LinearAlgebra[Multiply](f_x, convert(W1,Vector))
         -LinearAlgebra[Multiply](CMatr, LinearAlgebra[Multiply](radius, LinearAlgebra[Multiply](convert(W1,Vector), cos(p))))
         +LinearAlgebra[Multiply](CMatr, LinearAlgebra[Multiply](radius, LinearAlgebra[Multiply](convert(W2,Vector), sin(p))));
         
         NewEquations:=[seq(0=NewEquations[i1],i1=1..NumOfEqnsOfModel)];

         NewVariables:=[p,op(W1),op(W2)];
          
          ExtendedSystemEquations:= [
            op(ExtendedSystemEquations),   
            op(NewEquations)                    
          ];
  
          ExtendedSystemVariables:= [
            op(ExtendedSystemVariables),
            op(NewVariables)
          ];


        #----------------------------------------
        #
        # fx w2 - C R w1 sin(p) + C R w2 cos(p)=0
        #
        #----------------------------------------

         NewEquations := LinearAlgebra[Multiply](f_x, convert(W2,Vector))
         -LinearAlgebra[Multiply](CMatr, LinearAlgebra[Multiply](radius, LinearAlgebra[Multiply](convert(W1,Vector), sin(p))))
         -LinearAlgebra[Multiply](CMatr, LinearAlgebra[Multiply](radius, LinearAlgebra[Multiply](convert(W2,Vector), cos(p))));

        NewEquations:=[seq(0=NewEquations[i1],i1=1..NumOfEqnsOfModel)];

        ExtendedSystemEquations:= [
            op(ExtendedSystemEquations),   
            op(NewEquations)                    
          ];


        #----------------------------------------
        #
        # (w1-Iw2)T(w1+Iw2) -1 =0
        #
        #----------------------------------------

        

       NewEquations := LinearAlgebra[Multiply](LinearAlgebra[Transpose](convert(W1,Vector)),convert(W1,Vector))+ LinearAlgebra[Multiply](LinearAlgebra[Transpose](convert(W2,Vector)),convert(W2,Vector))-1;


       ExtendedSystemEquations:= [
            op(ExtendedSystemEquations),   
            0=NewEquations                    
          ];

        #----------------------------------------
        #
        # w1T w2 =0
        #
        #----------------------------------------
       

        NewEquations := LinearAlgebra[Multiply](LinearAlgebra[Transpose](convert(W1,Vector)), convert(W2,Vector));

        ExtendedSystemEquations:= [
            op(ExtendedSystemEquations),   
            0=NewEquations                    
          ];


        #----------------------------------------
        #
        # fxT v1 -C R v1 cos(p) - C R v2 sin(p) + g1 w1 - g2 w2 =0
        #
        #----------------------------------------

          NewEquations := LinearAlgebra[Multiply](f_xTransp, convert(V1,Vector))
         -LinearAlgebra[Multiply](CMatr, LinearAlgebra[Multiply](radius, LinearAlgebra[Multiply](convert(V1,Vector), cos(p))))
         -LinearAlgebra[Multiply](CMatr, LinearAlgebra[Multiply](radius, LinearAlgebra[Multiply](convert(V2,Vector), sin(p))))
         +LinearAlgebra[Multiply](convert(W1,Vector), g1)
         -LinearAlgebra[Multiply](convert(W2,Vector), g2);
         
         NewEquations:=[seq(0=NewEquations[i1],i1=1..NumOfEqnsOfModel)];

         NewVariables:=[op(V1),op(V2),g1,g2];
          
          ExtendedSystemEquations:= [
            op(ExtendedSystemEquations),   
            op(NewEquations)                    
          ];
  
          ExtendedSystemVariables:= [
            op(ExtendedSystemVariables),
            op(NewVariables)
          ];


        #----------------------------------------
        #
        # fxT v2 -C R v1 sin(p) - C R v2 cos(p) + g1 w2 - g2 w1 =0
        #
        #----------------------------------------

         NewEquations := LinearAlgebra[Multiply](f_xTransp, convert(V2,Vector))
         +LinearAlgebra[Multiply](CMatr, LinearAlgebra[Multiply](radius, LinearAlgebra[Multiply](convert(V1,Vector), sin(p))))
         -LinearAlgebra[Multiply](CMatr, LinearAlgebra[Multiply](radius, LinearAlgebra[Multiply](convert(V2,Vector), cos(p))))
         +LinearAlgebra[Multiply](convert(W2,Vector), g1)
         +LinearAlgebra[Multiply](convert(W1,Vector), g2);

        NewEquations:=[seq(0=NewEquations[i1],i1=1..NumOfEqnsOfModel)];

        ExtendedSystemEquations:= [
            op(ExtendedSystemEquations),   
            op(NewEquations)                    
          ];


        #----------------------------------------
        #
        # w1T C v1 sin(p) -w2T C v1 cos(p) - w1T C v2 cos(p) +  w2T C v2 sin(p) =0
        #
        #----------------------------------------

  

       NewEquations := sin(p)*LinearAlgebra[Multiply](LinearAlgebra[Transpose](convert(W1,Vector)), LinearAlgebra[Multiply](CMatr, convert(V2,Vector)))
         +cos(p)*LinearAlgebra[Multiply](LinearAlgebra[Transpose](convert(W2,Vector)), LinearAlgebra[Multiply](CMatr, convert(V1,Vector)))
         -cos(p)*LinearAlgebra[Multiply](LinearAlgebra[Transpose](convert(W1,Vector)), LinearAlgebra[Multiply](CMatr, convert(V2,Vector)))
         +sin(p)*LinearAlgebra[Multiply](LinearAlgebra[Transpose](convert(W2,Vector)), LinearAlgebra[Multiply](CMatr, convert(V2,Vector))); 

       ExtendedSystemEquations:= [
            op(ExtendedSystemEquations),   
            0=NewEquations                    
          ];

        #----------------------------------------
        #
        # v1T w1 -v2T w2 -1 =0
        #
        #----------------------------------------
       

        NewEquations := LinearAlgebra[Multiply](LinearAlgebra[Transpose](convert(V1,Vector)), convert(W1,Vector))
                         +LinearAlgebra[Multiply](LinearAlgebra[Transpose](convert(V2,Vector)), convert(W2,Vector))-1;

        ExtendedSystemEquations:= [
            op(ExtendedSystemEquations),   
            0=NewEquations                    
          ];


        #----------------------------------------
        #
        # fxT u -C u + v1 fxx w1+ v2 fxx w2 =0
        #
        #----------------------------------------
          fxx_w1:= Aux:-TensProd:-Tijk_xj(
            f_xx, W1
          );

          v1_fxx_w1:= Aux:-TensProd:-xi_Aij(
            V1,
            fxx_w1
          ); 

          fxx_w2:= Aux:-TensProd:-Tijk_xj(
            f_xx, W2
          );

          v2_fxx_w2:= Aux:-TensProd:-xi_Aij(V2,fxx_w2); 

          NewEquations:= LinearAlgebra[Multiply](f_xTransp,convert(U,Vector))
                         -LinearAlgebra[Multiply](CMatr, convert(U,Vector))
                         +convert(v1_fxx_w1,Vector)+convert(v2_fxx_w2,Vector);

          NewEquations:=[seq(0=NewEquations[i1],i1=1..NumOfEqnsOfModel)];
             
          NewVariables:= U;
          
          ExtendedSystemEquations:= [
            op(ExtendedSystemEquations),   
            op(NewEquations)                    
          ];
  
          ExtendedSystemVariables:= [
            op(ExtendedSystemVariables),
            op(NewVariables)
          ];

        #----------------------------------------
        #
        # f_alphaT u+ v1 fxalpha w1+ v2 fxalpha w2- r=0
        #
        #----------------------------------------
          fxalpha_w1:= Aux:-TensProd:-Tijk_xj(
            f_xalpha, W1
          );

          v1_fxalpha_w1:= Aux:-TensProd:-xi_Tij(
            V1,
            fxalpha_w1
          ); 

          fxalpha_w2:= Aux:-TensProd:-Tijk_xj(
            f_xalpha, W2
          );

          v2_fxalpha_w2:= Aux:-TensProd:-xi_Tij(
            V2,
            fxalpha_w2
          ); 

          NewEquations:= LinearAlgebra[Multiply](
              f_alphaTransp,
              convert(U,Vector)
            ) + convert(v1_fxalpha_w1,Vector)+ convert(v2_fxalpha_w2,Vector)-convert(R,Vector);


          NewEquations:=[seq(
            0=NewEquations[i1],
            i1=1..nops(ListOfNVparams)
          )];

          NewVariables:= R;
   
          ExtendedSystemEquations:= [
            op(ExtendedSystemEquations),   
            op(NewEquations)                    
          ];
         
           ExtendedSystemVariables:= [
            op(ExtendedSystemVariables),
            op(NewVariables)
          ];
  
      #------------------------------------------------------------
      #
      # build table for augmented system from lists
      #
      #------------------------------------------------------------
      
      #
      # apart from vars listed explicitly, the following vars
      # are passed on to template:
      #   f_x -> Jac
      #
        ExtendedSysToBeSubs:= table();
        ExtendedSysToBeSubs["Equations"]:= ExtendedSystemEquations;
        ExtendedSysToBeSubs["Variables"]:= ExtendedSystemVariables;
        ExtendedSysToBeSubs["Parameters"]:= DESys["Parameters"];
    
        NumNVparamsToBeSubs:= nops(ListOfNVparams); 

$include <DiscreteBif/NeimarkSackerNV/CreateNSWithAlgEqnsNVSys/TemplateModule.txt>

    return result;

       end proc;  #AugSys2:-NeimarkSackerNV:-CreateNSWithAlgEqnsNVSys