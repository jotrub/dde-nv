#############################################################
#
# BVPSol/source/createSharedObject.txt
#
# @brief Creates shared objects needed for call to define_external
#
# @param directory where auxiliary files will be created,
#        DAESys,
#        list of compilled objects obtaned from TIDES,
#        method name ('period' [Deuflhard,1984] or 'twpbvp' [Capper&Cash,2007]),
#        phase condition (var_i-constant=0),
#        index of variable for which the phase condition is stated
#        list of boundary conditions for discontinuous time case  
#
# @notes list of compilled objects obtaned from TIDES should
#        contain path to "calltides.o" and corresponding 
#        system file, e.g., "scott.o"
#
# @revision
# 2013-06-10 added parameter listOfInitCond for discontinuous time case
# 2011-01-18 created by dka
#
#############################################################
  createSharedObject:= proc(
    bvpsolDir::string,
    anBVPSys::DAESys,
    objNames::list(string),
    methodName::name,
    phaseCondition,
    indPhaseCondVarible::integer,
    listOfInitCond::list
  )

    local oldDir, LinkerCommand, bvpsol, SharedObjectName,InstanceCounter,
          i, objNamesList; 

    InstanceCounter:= 1; 
    
    #
    # creates bvpsolDir
    #
      if not
        Aux:-FileOperations:-dirExists(bvpsolDir)
      then
        mkdir(bvpsolDir);
      end if;

    #
    # save directory in which proc was called and change to requested dir
    #
      oldDir:= currentdir():
      currentdir(bvpsolDir): 
      # currentdir creates error if bvpsolDir does not exist
  
    #
    # create Fortran files fortranrhs.f and fortranjac.f 
    # with procedures FCN and DFDY for both methods
    # and files extrhs.f, extjac.f, boundcond.f, and boundjac.f for
    # method 'twpbvp'
    # 
      CreateExternalFunctions:-createGenericExtFunctions(anBVPSys,
							 methodName,
							 phaseCondition,
							 indPhaseCondVarible,
							 listOfInitCond);
        
    # 
    # compile fortranrhs.f and fortranjac.f 
    #
      system("gfortran -c -shared -O -fPIC fortranrhs.f -o fortranrhs.o"); 
      system("gfortran -c -shared -O -fPIC fortranjac.f -o fortranjac.o"); 
          

    #----------------------------------------
    # 
    # link problem dependent and problem independent files
    #
    #----------------------------------------
      SharedObjectName:= cat(
        "cwrap_bvpsol", InstanceCounter, ".so"
      );

    #
    # external object names obtained from TIDES 
    # (depend on an induvidual problem) 
    #
        objNamesList:="";
        for i from 1 to nops(objNames) do
	  objNamesList:=cat(objNamesList,objNames[i]," ");
        end do;

    #
    # create shared object for the corresponding method
    #

    if (methodName='period')
    then 
        LinkerCommand:= cat(
          `gcc -shared -Xlinker -Bsymbolic fortranrhs.o fortranjac.o `,
          _ModulesDirectory, `/BVPSol/ext_routines/f2c/cwrap/bvpopen.o `,
          _ModulesDirectory, `/BVPSol/ext_routines/f2c/cwrap/bvpclose.o `,
          _ModulesDirectory, `/BVPSol/ext_routines/f2c/cwrap/cwrap_bvpsol.o `,
          objNamesList,
          _ModulesDirectory, `/BVPSol/ext_routines/f2c/shared_obj/period/period.so `,
          ` -lf2c -O2 -lm -lgfortran -lTIDES -o `, 
          SharedObjectName
        );
    end if;
    
    if ((methodName='twpbvp') or (methodName='twpbvpdisc'))
    then 
        # 
	# compile extrhs.f, extjac.f, boundcond.f, and boundjac.f
	#
	system("gfortran -c -shared -O -fPIC extrhs.f -o extrhs.o"); 
	system("gfortran -c -shared -O -fPIC extjac.f -o extjac.o");
	system("gfortran -c -shared -O -fPIC boundcond.f -o boundcond.o");
	system("gfortran -c -shared -O -fPIC boundjac.f -o boundjac.o"); 
    end if;	

    if (methodName='twpbvp')
    then      
        LinkerCommand:= cat(
          `gcc -shared -Xlinker -Bsymbolic fortranrhs.o fortranjac.o extrhs.o extjac.o boundcond.o boundjac.o `,
          _ModulesDirectory, `/BVPSol/ext_routines/f2c/cwrap/bvpopen.o `,
          _ModulesDirectory, `/BVPSol/ext_routines/f2c/cwrap/bvpclose.o `,
          _ModulesDirectory, `/BVPSol/ext_routines/f2c/cwrap/cwrap_bvpsol.o `,
          objNamesList,
          _ModulesDirectory, `/BVPSol/ext_routines/f2c/shared_obj/twpbvp/twpbvp.so `,
          ` -lf2c -O2 -lm -lgfortran -lTIDES -o `, 
          SharedObjectName
        );
    end if;
    
    if (methodName='twpbvpdisc')
    then       
        # 
	# compile fxderiv.f
	#
	system("gfortran -c -shared -O -fPIC fxderiv.f -o fxderiv.o"); 
       
        LinkerCommand:= cat(
          `gcc -shared -Xlinker -Bsymbolic fortranrhs.o fortranjac.o extrhs.o extjac.o boundcond.o boundjac.o fxderiv.o `,
          _ModulesDirectory, `/BVPSol/ext_routines/f2c/cwrap/bvpopen.o `,
          _ModulesDirectory, `/BVPSol/ext_routines/f2c/cwrap/bvpclose.o `,
          _ModulesDirectory, `/BVPSol/ext_routines/f2c/cwrap/cwrap_bvpsol.o `,
          objNamesList,
          _ModulesDirectory, `/BVPSol/ext_routines/f2c/shared_obj/twpbvpdisc/twpbvpdisc.so `,
          ` -lf2c -O2 -lm -lgfortran -lTIDES -o `, 
          SharedObjectName
        );
    end if;
     
    system(LinkerCommand);

    # 
    # create interface to the method
    #
      bvpsol:= runDefineExternal(SharedObjectName);
    
      #
      # change back to directory of calling procedure
      #
        currentdir(oldDir);
  
      RETURN(bvpsol);

  end proc; # createSharedObject
