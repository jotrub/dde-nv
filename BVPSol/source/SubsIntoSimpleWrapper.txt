###############################################################################
#
# @path BVPSOL/source/SubsIntoSimpleWrapper  
#
# @revision
# 2011-01-18 written by dka
#
###############################################################################
SubsIntoSimpleWrapper:= proc(
  anBVPSys::DAESys,
  bvpsolCwrapper::procedure,
  WorkingDir::string,
  nodes::integer
)
      
    local N, M, IPRINT, NPAR, X0, TRPAR, i, P,Y,FM,POUT,
          IFAIL,ERRY,FAL,FXAL,FXX,listForFXAL,listForFXX,
          SimpleWrapperTemplate, FX, HDIF,
          FAlAl, FXXAl, FXAlAl, listForFXXPdim1, listForFXXPdim2,
          listForFXPPdim1, listForFXPPdim2; 

    #
    # extract N, M, NPAR 
    #
      N:= nops(anBVPSys["ODEs"]);      
      M:=nodes;
      NPAR:=nops(anBVPSys["Parameters"]);
      
    #
    # IPRINT by defaults setted to 0
    #
      IPRINT:= 0; 
    
    #
    # extract X0 and TRPAR
    #
     X0:=Vector(N,datatype= float[8],order= C_order);
     TRPAR:=Vector(NPAR,datatype= float[8],order= C_order);
     
    #
    # extract P
    # 
      P:=0;
      
     
    #
    # Y,FM
    # 
      Y:=Matrix(M, N, datatype = float[8], order = C_order);
      FM := Matrix(2, N, datatype = float[8], order = C_order);
    
    #
    # FAL,FXAL,FXX
    #  
      FAL:=Matrix(N, NPAR, datatype = float[8], order = Fortran_order);
     
      listForFXAL:=[];
      for i from 1 to N do
        listForFXAL:=[op(listForFXAL),convert(Matrix(N, NPAR), listlist)];
      end do; 
      FXAL:=Array(listForFXAL,datatype = float[8], order = Fortran_order);
     
      listForFXX:=[];
      for i from 1 to N do
        listForFXX:=[op(listForFXX),convert(Matrix(N, N), listlist)];
      end do; 
      FXX:=Array(listForFXX,datatype = float[8], order = Fortran_order);

      FX:=Matrix(N, N, datatype = float[8], order = Fortran_order);


   #
   # FAlAl, FXXAl, FXAlAl 
   # third order derivatives, need only for internal optimization calculations
   #
     FAlAl:=Matrix(NPAR, NPAR, datatype = float[8], order = Fortran_order);
     
     listForFXXPdim1:=[];
     for i from 1 to N do
       listForFXXPdim1:=[op(listForFXXPdim1),convert(Matrix(N, NPAR), listlist)];
     end do;
     listForFXXPdim2 := []; 
     for i to N do 
       listForFXXPdim2 := [op(listForFXXPdim2), listForFXXPdim1];
     end do; 
     FXXAl:=Array(listForFXXPdim2,datatype = float[8], order = Fortran_order);

     listForFXPPdim1:=[];
     for i from 1 to N do
       listForFXPPdim1:=[op(listForFXPPdim1),convert(Matrix(NPAR, NPAR), listlist)];
     end do;
     listForFXPPdim2 := []; 
     for i to N do 
       listForFXPPdim2 := [op(listForFXPPdim2), listForFXPPdim1];
     end do; 
     FXAlAl:=Array(listForFXPPdim2,datatype = float[8], order = Fortran_order);
      
  #
  # HDIF
  #    
    HDIF:=0.001; 

$include<SubsIntoSimpleWrapper/SimpleWrapperTemplate.txt>


  return(eval(SimpleWrapperTemplate)); 

end proc; 


