    ########################################################################
    #
    # @path BVPSol/Tests/problemOlsen1983.txt
    #
    # @brief Finding periodic solution for the system from the article by 
    #        Olsen L.F. "An enzyme reaction with a strange attractor". 
    #        Physics Letters A. 1983, (94) 454-457.
    #
    # @revision
    #   2011-01-19 written by dka
    #
    ########################################################################
    problemOlsen1983:= proc()
    
      local expectedPeriod, aSys, BVPSOLproc, eigVals, period, nodes, sol,
            succeeded;  

      expectedPeriod:= 14.5391926329389083;
      
      if
        Aux:-FileOperations:-dirExists("tmp")
      then
        error("temporary directory ./tmp needed to run test already exists")
      else  
        mkdir("tmp")
      end if;

      #
      # init system of ODEs
      #
        aSys := table():
        aSys["ODEs"] := [`A'` = k7*(A0-A)-k3*A*B*Y, 
                `B'` = k8-k1*B*X-k3*A*B*Y,
                `X'` = k1*B*X-2*k2*X^2+3*k3*A*B*Y-k4*X+k6,
                `Y'` = 2*k2*X^2-k5*Y-k3*A*B*Y];
        aSys["DynVars"] := [A,B,X,Y];
        aSys["ExplicitAEs"] := [k2=250,k4=20,k5=5.35,k6=10^(-5),k7=0.1,k8=0.825,A0=8];
        aSys["Parameters"]:=[k1=0.1,k3=0.3];
        aSys["AlgVars"] := []; 
        aSys["AEs"] := [];
        
      #
      # create instance for bvpsol
      # number of nodes for multi-shooting method M=30 
      #  
        BVPSOLproc := BVPSol:-CreateInstance(aSys, "./tmp", 30);
        
      #
      # pass initial values for bvpsol
      #  
        BVPSOLproc:-setParams([k1 = .19, k3 = 0.0066651056]);
        BVPSOLproc:-setInitPoint([A = 6.0, B = 195.0, X = 0.03, Y = 0.07]);
        BVPSOLproc:-setInitPeriod(14.0);
      
      #
      # execute bvpsol 
      #
        BVPSOLproc:-runBVPSol();
        
      #
      # extract result
      #
        period:= BVPSOLproc:-getPeriod();
        eigVals:= BVPSOLproc:-getEigVals();
        nodes:=BVPSOLproc:-getXT();
        sol:=BVPSOLproc:-getSol();
        succeeded:=BVPSOLproc:-getIFAIL();
        

      #
      # compare results to expected results
      #
        if (not ((period-expectedPeriod)^2<10^(-7) and succeeded>0))
        then printf("The test problem is not succeeded");
             return(false); 
        end if;
        
        printf("The test problem is succeeded");
        return(true); 

    end proc; 
