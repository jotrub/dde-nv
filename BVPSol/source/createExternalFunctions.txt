###############################################################################
#
# @path BVPSol/source/createExternalFunctions.txt
#
# @brief create procedures which (1) contains RHS and
#         their Jacobian (FCN and DFDY) as needed by PERIOD
#
# @param anBVPSys: of type DAESys
#       
# @return files fortranrhs.f and fortranjac.f with procedures FCN and DFDY
#
# @revision
# 2011-01-17 written by dka
#
###############################################################################
  createExternalFunctions:= proc(anBVPSys::DAESys)
  
    local n,npars,rhsODEs,FCN,listOfSubs,i,rhsOfOdesWithSubs,st1,st2,st3,st4,stFCN,
          fdFCN,fdFCN2,filePathFCN,filePathFCNFortran,stDFDY,j,jac,fdDFDY,
          filePathDFDY,filePathDFDYFortran,jacWithSubs,DFDY; 
    
    # 
    # substiture explicit functions intro anBVPSys
    #
    anBVPSys := Aux:-SystemClasses:-subsExplicitAEsIntoDAESys(anBVPSys);
    
    n := nops(anBVPSys["ODEs"]); 
    npars := nops(anBVPSys["Parameters"]);
    
    rhsODEs := map(rhs, anBVPSys["ODEs"]);
    
    #
    # list of substitutions with parameters names for fortran code
    #
    listOfSubs := [];
    for i to n do 
      listOfSubs := [op(listOfSubs), anBVPSys["DynVars"][i] = Z(i)];
    end do;
    
    for i to npars do 
      listOfSubs := [op(listOfSubs), lhs(anBVPSys["Parameters"][i]) = TRPAR(i)]; 
    end do;
    
    rhsOfOdesWithSubs := subs(listOfSubs, rhsODEs);

    #
    # C code for file which contains RHS of ODEs definitios (FCN procedure)
    #
    st1 := "proc(T,Z,DZ,TRPAR) \n";
    st2 := StringTools[Join]([" Z:=Vector(", convert(n, string), ");\n DZ:=Vector(", convert(n, string), ");\n TRPAR:=Vector(", convert(npars, string), ");\n"], "");
    st3 := ""; 
    for i to n do 
    st3 := StringTools[Join]([st3, " DZ(", convert(i, string), "):=", convert(rhsOfOdesWithSubs[i], string), ";\n"], ""); 
    end do;
    st4 := " return;\nend proc;";
    
    stFCN := StringTools[Join]([st1, st2, st3, st4], "");
    
    #
    # create temprorary file with C code for FCN procedure
    #
    fdFCN := fopen(CFileForFCN, WRITE);
    fprintf(fdFCN, stFCN);
    fclose(fdFCN);
    
    #
    # path to the temprory file with C code for FCN procedure
    #
    filePathFCN := cat(currentdir(), "/CFileForFCN");
    
    #
    # generate file "fortranrhs.f" with Fortran code for FCN procedure
    #   
    if not Aux:-FileOperations:-fileExists(filePathFCN)
      then error("file with C code for FCN procedure was not created");
    else
      filePathFCNFortran:=  cat(currentdir(), "/fortranrhs.f");
      
      if Aux:-FileOperations:-fileExists(filePathFCNFortran)
       then system(cat(`rm -f  `, "fortranrhs.f"));
      end if;
      #
      # reading previously created C procedure from a file
      # and assigning FCN as the name for Fortran procedure,
      # then saving Fortran procedure in the file fortranrhs.f
      #
      read(filePathFCN);
      FCN:=`%`;
      CodeGeneration[Fortran](FCN, output = "fortranrhs.f");
      system(cat(`rm -f  `, "CFileForFCN"));
    end if;
    
    #
    # Jacobian of the system
    #
    jac:=VectorCalculus[Jacobian](rhsODEs, anBVPSys["DynVars"]);
    jacWithSubs:=subs(listOfSubs, jac);
    
    #
    # C code for file which consains Jacobin of ODEs definition (DFDY procedure)
    #
    st1 := "proc(T,Z,DF,TRPAR) \n";
    st2 := StringTools[Join]([" Z:=Vector(", convert(n, string), ");\n DF:=Matrix(", convert(n, string),",",convert(n, string), ");\n TRPAR:=Vector(", convert(npars, string), ");\n"], "");
    st3 := ""; 
    for i to n do
      for j to n do 
        st3 := StringTools[Join]([st3, " DF(", convert(i, string),",", convert(j, string),"):=", convert(jacWithSubs[i,j], string), ";\n"], ""); 
      end do;
    end do;
    
    stDFDY := StringTools[Join]([st1, st2, st3, st4], "");
    
    #
    # create temprorary file with C code for DFDY procedure
    #
    fdDFDY := fopen(CFileForDFDY, WRITE);
    fprintf(fdDFDY, stDFDY);
    fclose(fdDFDY);
    
    #
    # path to the temprory file with C code for FCN procedure
    #
    filePathDFDY := cat(currentdir(), "/CFileForDFDY");
    
    #
    # generate file "fortranjac.f" with Fortran code for DFDY procedure
    #   
    if not Aux:-FileOperations:-fileExists(filePathDFDY)
      then error("file with C code for DFDY procedure was not created");
    else
      filePathDFDYFortran:=  cat(currentdir(), "/fortranjac.f");
      
      if Aux:-FileOperations:-fileExists(filePathDFDYFortran)
       then system(cat(`rm -f  `, "fortranjac.f"));
      end if;
      
      read(filePathDFDY);
      DFDY:=`%`;
      CodeGeneration[Fortran](DFDY, output = "fortranjac.f");
      system(cat(`rm -f  `, "CFileForDFDY"));
    end if;
    
    RETURN();
  
  end proc; # createExternalFunctions
