#############################################################
#
# BVPOpt/source/createSharedObject.txt
#
# @brief Creates shared objects needed for call to define_external
#
# @param directory where auxiliary files will be created,
#        DAESys,
#        anNLP, NLP which contains constraints, cost function 
#                and internal variables of optimization,
#        X0, the initial guess for first point X0 of the trajectory solution
#        initP, the initial guess for period of the trajectory solution 
#        nodes, number of nodes in multi-shooting procedure,     
#        list of compilled objects obtaned from TIDES,
#        phase condition,
#        method name 'twpbvp' or 'twpbvpdisc'
#
# @notes list of compilled objects obtaned from TIDES should
#        contain path to "calltides.o" and corresponding 
#        system file, e.g., "scott.o"
#
# @revision
# 2011-12-11 created by dka
#
#############################################################
  createSharedObject:= proc(
    bvpoptDir::string,
    anBVPSys::DAESys,
    anNLP::NLP,
    X0::list(EvalsToFloat),
    initP::EvalsToFloat,
    nodes::integer,
    objNames::list(string),
    phaseCondition,
    methodName,
    initSwitchCond::list
  )

    local oldDir, LinkerCommand, bvpopt, SharedObjectName,InstanceCounter,
          i, objNamesList, indPhaseCondVarible, externalLinks, objListTwpbvpdisc; 

    InstanceCounter:= 1; 
    
    #
    # creates bvpoptDir
    #
      if not
        Aux:-FileOperations:-dirExists(bvpoptDir)
      then
        mkdir(bvpoptDir);
      end if;

    #
    # save directory in which proc was called and change to requested dir
    #
      oldDir:= currentdir():
      currentdir(bvpoptDir): 
      # currentdir creates error if bvpoptDir does not exist
      
    #----------------------------------------
    # create nessesary files for the method 'twpbvp'
    #---------------------------------------- 
    
    if (methodName='twpbvp')
    then
    #
    # get index of varible_i in the phase condition
    #
    indPhaseCondVarible:=BVPSol:-getPhaseConditionIndex(anBVPSys,phaseCondition);

    #
    # create external Fortran files fortranrhs.f, fortranjac.f
    # (rhs and jacobian of the original problem) 
    #  extrhs.f, extjac.f, boundcond.f, and boundjac.f
    # (rhs, boudary condition and jacobians of the problem extended by
    #  additional variables with rhs=0, i.e. extended with period and 
    #  left boundary conditions treated as unknown variables)
    # 
      BVPSol:-CreateExternalFunctions:-createGenericExtFunctions(anBVPSys,
								 'twpbvp',
								 phaseCondition,
								 indPhaseCondVarible,
								 initSwitchCond);
      objListTwpbvpdisc:=``;
      
    end if;
    
    
    
    #----------------------------------------
    # create nessesary files for the method 'twpbvpdisc'
    #---------------------------------------- 
   
    if (methodName='twpbvpdisc')
    then
    
    #
    # create external Fortran files 
    #  fortranrhs.f, fortranjac.f extrhs.f, extjac.f, boundcond.f, and boundjac.f
    #  and in addition create
    #  fxderiv.f
    # 
      indPhaseCondVarible:=-10;
      BVPSol:-CreateExternalFunctions:-createGenericExtFunctions(anBVPSys,
								 'twpbvpdisc',
								 phaseCondition,
								 indPhaseCondVarible,
								 initSwitchCond);
    # 
    # compile fxderiv.f
    #   
      system("gfortran -c -shared -O -fPIC fxderiv.f -o fxderiv.o");
      objListTwpbvpdisc:=`fxderiv.o `;
    
    end if; 
    
    
    #----------------------------------------
    # common for the both methods
    #----------------------------------------
    
    # 
    # compile created Fortran files
    #
      system("gfortran -c -shared -O -fPIC fortranrhs.f -o fortranrhs.o"); 
      system("gfortran -c -shared -O -fPIC fortranjac.f -o fortranjac.o");
      system("gfortran -c -shared -O -fPIC extrhs.f -o extrhs.o"); 
      system("gfortran -c -shared -O -fPIC extjac.f -o extjac.o");
      system("gfortran -c -shared -O -fPIC boundcond.f -o boundcond.o");
      system("gfortran -c -shared -O -fPIC boundjac.f -o boundjac.o");
    
    #
    # create npsolobjfun.f and npsolconfun.f which use results of TIDES integration
    #
     createExternalFunctions(anBVPSys,
                             anNLP,
                             X0,
                             initP, 
                             nodes,
                             indPhaseCondVarible); 
     
    # 
    # compile npsolobjfun.f and npsolconfun.f 
    #
      system("gfortran -c -shared -O -fPIC npsolobjfun.f -o npsolobjfun.o");
      system("gfortran -c -shared -O -fPIC npsolconfun.f -o npsolconfun.o");  
      
    #
    # creates funcF0P.f and funcJ0P.f that are used in npsolobjfun.f
    #

     createExternalDerivativesFuncs(anBVPSys);
    
    # 
    # compile funcF0P.f and funcJ0P.f 
    #   
      system("gfortran -c -shared -O -fPIC funcF0P.f -o funcF0P.o");
      system("gfortran -c -shared -O -fPIC funcJ0P.f -o funcJ0P.o");

      
      
    #----------------------------------------
    # 
    # link problem dependent and problem independent files
    #
    #----------------------------------------
      SharedObjectName:= cat(
        "cwrap_npsol", InstanceCounter, ".so"
      );

    #
    # external object names obtained from TIDES 
    # (depend on an induvidual problem) 
    #
        objNamesList:="";
        for i from 1 to nops(objNames) do
	  objNamesList:=cat(objNamesList,objNames[i]," ");
        end do;
     
    externalLinks:=getExtFilesLinks(methodName);
    
    #
    # in additional to TIDES files connect NPSOL files
    #
        LinkerCommand:= cat(
          `gcc -shared -Xlinker -Bsymbolic `,
          externalLinks,
          `funcJ0P.o funcF0P.o `,
          `extrhs.o extjac.o boundcond.o boundjac.o `,
          `npsolconfun.o npsolobjfun.o `, 
          `fortranjac.o fortranrhs.o `,
           objListTwpbvpdisc, 
          _ModulesDirectory, `/Npsol/ext_routines/f2c/cwrap/cwrap_npsol.o `,
          objNamesList,
          ` -lf2c -O2 -lm -lgfortran -lTIDES -o `, 
          SharedObjectName
        );
    
      system(LinkerCommand);

    # 
    # create interface to NPSOL
    #
      bvpopt:= NPSOL:-runDefineExternal(SharedObjectName);
    
      #
      # change back to directory of calling procedure
      #
        currentdir(oldDir);
  
      RETURN(bvpopt);

  end proc; # createSharedObject
