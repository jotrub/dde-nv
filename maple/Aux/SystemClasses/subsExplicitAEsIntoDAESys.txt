#############################################################
#
# @path Aux/SystemClasses/subsExplicitAEsIntoDAESys.txt
#
# @brief substitute ExplicitAEs into ODEs and AEs
#
# @param aModel
#
# @return aModel, equations from list ExplictAEs in aModel
#   have been substituted into list ODEs and AEs in
#   aModel
#
# @ notes state dependet delay ["Delays"] are treated as ExplicitAEs, but still occur in NewDAESys, because they are needed for the NVSystem construction.
# @authors mmo, dka, jot
#
# @revision
#   2015-07-28 differing between „inserting state dependent delay in ODEs/AEs“ and inserting explicitAEs in delays by jot
#   2015-01-30 added the option for state dependent delays by jot
#   2008-05-15  instead of aSys[...] using aSys["..."] 
#   2008-05-15 copied from ModelPack by dka
#   020306 (1) removed check for ODEs and AEs since this
#     check is done by type check at entry of proc;
#     (2) speed up proc by not copying aDAESys, copy entries
#     only which are not changed;
#   021101 written by mkl and mmo
#
#############################################################
subsExplicitAEsIntoDAESys:= proc(
  aDAESys::DAESys
)

  local i1, item, ListOfUnaffectedEntries, 
    FormerODEs, FormerExplicitAEs, FormerAEs,
    PositionODEs, PositionExplicitAEs,
    NewODEs, NewExplicitAEs, NewDAESys, LHSNewDAESys;

  #
  # substitute ExplicitAEs into ODEs and AEs
  #
    NewDAESys:= table();

    #
    # copy entries of aDAESys which are not changed by 
    # substitution
    #
      ListOfUnaffectedEntries:= map(op, [indices(aDAESys)]);
      ListOfUnaffectedEntries:= Aux:-ListOperations:-removeItemFromList(
        ["ExplicitAEs", "ODEs", "AEs", "Delays"],
         ListOfUnaffectedEntries
      ); 
      for item in ListOfUnaffectedEntries do
        NewDAESys[item]:= aDAESys[item];
      end do;

    #
    # treat entries which are affected by substitution
    #          
      NewDAESys["ExplicitAEs"]:=[];
      
    # at first, the normal ExplicitAEs...
      NewDAESys["ODEs"]:= Aux:-ListOperations:-subsEqnListIntoEqn(
        aDAESys["ExplicitAEs"],
        aDAESys["ODEs"]
      );

      NewDAESys["AEs"]:= Aux:-ListOperations:-subsEqnListIntoEqn(
        aDAESys["ExplicitAEs"],
        aDAESys["AEs"]
      );  
      
     if assigned(aDAESys["Delays"]) then
     
      NewDAESys["Delays"]:= Aux:-ListOperations:-subsEqnListIntoEqn(
        aDAESys["ExplicitAEs"],
        aDAESys["Delays"]
      );
      
# ... and now the Delays!   
      NewDAESys["ODEs"]:= Aux:-ListOperations:-subsEqnListIntoEqn(
      NewDAESys["Delays"],
      NewDAESys["ODEs"]
      );

      NewDAESys["AEs"]:= Aux:-ListOperations:-subsEqnListIntoEqn(
      NewDAESys["Delays"],
      NewDAESys["AEs"]
      );  
      
    end if;
  
  RETURN(eval(NewDAESys));

end proc; # SubsExplicitAEsInDAESys
