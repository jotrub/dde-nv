###############################################################################
#
# @path NPSOL/source/CreateNumSysWrappers
#
# @brief creates wrappers for files generated by NumSys:-AE:-CreateInstance
# creates wrappers both for constraint functions ("confun") and
#   objective function ("objfun")
#
# @revision
# 030321 if npsolconfun.f, npsolobjfun.f exist in directory, they
#   are overwritten 
# 030317 written by mmo
#
###############################################################################
createNumSysWrappers:= proc(
  NumParsInNLP::{0, posint}, 
  NumVarsInNLP::posint,
  NumConsInNLP::posint,
  DerivsConstraintsAEsName::name,
  DerivsObjectiveAEsName::name
)

  local npsolconfun, npsolobjfun;

  #
  # create confun wrapper
  #
    npsolconfun:= subs(
      NumParsToBeSubs= NumParsInNLP,
      NumVarsToBeSubs= NumVarsInNLP,
      NumConsToBeSubs= NumConsInNLP,
      DerivsConstraintsAEsNameToBeSubs= DerivsConstraintsAEsName, 
      eval(Templates:-numSysConfunTemplate)
    );

  #
  # create fortran code in current directory
  #
    system("rm -f npsolconfun.f");
    codegen[fortran](
      npsolconfun,
      filename= "npsolconfun.f",
      mode= double
    );

  #
  # create objfun wrapper
  #
    npsolobjfun:= subs(
      NumParsToBeSubs= NumParsInNLP,
      NumVarsToBeSubs= NumVarsInNLP,
      NumConsToBeSubs= NumConsInNLP,
      DerivsObjectiveAEsNameToBeSubs= DerivsObjectiveAEsName, 
      eval(Templates:-numSysObjfunTemplate)
    );

  #
  # create fortran code in current directory
  #
    system("rm -f npsolobjfun.f");
    codegen[fortran](
      npsolobjfun,
      filename= "npsolobjfun.f",
      mode= double
    );

  return();

end proc;




