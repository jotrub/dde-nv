###############################################################################
#
# @path NPSOL/source/createNumNLP
#
# @brief creates fortran implementation of NLP using NumSys, returns shared
#   object (result of CreateSharedObjectFromFileList)
#
# @notes (i) may also return instances of NumSys:-AE which provide
#   information such as their home directories and the files which
#   they comprise
#
# @revision
# 2008-03-06  instead of anNLP[...] using anNLP["..."] by dka
# 030324 added optional EAEsForObjf
# 030320 removed some explicit currentdir("NewNpsol") and
#   currentdir(SheetDir) commands which were left over from use
#   in sheet; 
# 030320 removed access to global variable NLP1, use Sys instead
# 030318 written by mmo
#
###############################################################################
createNumNLP:= proc(
  Sys::NLP,
  WorkingDir::string,
  RestoreKeyword::name,
  ReqEAEsForObjf::list(name= term) # optional
)

  local OldDir, ConstraintsAEsInstance, ObjectiveAEsInstance, 
    ConstraintsAEsName, ObjectiveAEsName, ConstraintsFileList, 
    Path, ObjectiveFileList, FileList, SharedObj, EAEsForObjf; 

  #------------------------------------------------------------
  #
  # check for common errors
  #
  #------------------------------------------------------------
    if not
      member(RestoreKeyword, {'new', 'restore'})
    then
      error("3rd input argument, RestoreKeyword, must be new or restore");
    end if;

    if not
      type(NumSys, `module`)
    then
      printf("reading module NumSys\n");
      read(cat(_EnvModulesDir, "/NumSys/source/NumSys.mpl")):
    end if;

    if not
      type(ADIFOR, `module`)
    then
      printf("reading module ADIFOR\n");
      read(cat(_EnvModulesDir, "/ADIFOR/source/ADIFOR.mpl")):
    end if;

    if not
      Aux:-FileOperations:-dirExists(WorkingDir)
    then
      system(cat("mkdir ", WorkingDir));
    end if; 

  OldDir:= currentdir();

  #
  # treat optional EAEs for objective
  #
    if 
      nargs>3 
    then
      EAEsForObjf:= ReqEAEsForObjf;
    else
      EAEsForObjf:= 'EAEsForObjf';
    end if; 

  #------------------------------------------------------------
  #
  # create NumSys EAEs and AEs for constraints
  #
  #------------------------------------------------------------
    try
      ConstraintsAEsInstance:= NPSOL:-createNumSysForConstraints(
        Sys,
        WorkingDir,
        RestoreKeyword
      ):
    catch:
      printf("creation of EAEs and AEs for constraints failed with error:\n");
      error;
    finally
      currentdir(OldDir);
    end try;

  #------------------------------------------------------------
  #
  # create NumSys EAEs and AEs for objective
  #
  # note files are put into separate directory to avoid collision between
  #   files for constraints and objective
  #
  #------------------------------------------------------------
    try
      currentdir(WorkingDir);
      system("mkdir CreateNumSysForCostFunction");
  
      ObjectiveAEsInstance:= NPSOL:-createNumSysForCostFunction(
        Sys,
        "CreateNumSysForCostFunction",
        RestoreKeyword,
        EAEsForObjf
      ):
    catch:
      printf("creation of EAEs and AEs for objective function failed with error:\n"):
      error;
    finally
      currentdir(OldDir);
    end try;

  #------------------------------------------------------------
  #
  # create wrappers
  #
  #------------------------------------------------------------
    ConstraintsAEsName:= convert(
      cat("g_", ConstraintsAEsInstance:-GetFileList()[1]),
      name
    );
    ObjectiveAEsName:= convert(
      cat("g_", ObjectiveAEsInstance:-GetFileList()[1]),
      name
    );

    try
      currentdir(WorkingDir);
      NPSOL:-createNumSysWrappers(
        nops(Sys["Parameters"]),
        nops(Sys["Variables"]),
        nops(Sys["Constraints"]),
        ConstraintsAEsName,
        ObjectiveAEsName
      ):
    catch:
      printf("error generating wrappers:\n");
      error; 
    finally
      currentdir(OldDir);
    end try;

  #------------------------------------------------------------
  #
  # create shared object
  #
  #------------------------------------------------------------
    ConstraintsFileList:= ConstraintsAEsInstance:-GetFileList();
    Path:= ConstraintsAEsInstance:-GetHomeDir();
    ConstraintsFileList:= [seq(
      cat(Path, "/g_", ConstraintsFileList[i1]),
      i1= 1..nops(ConstraintsFileList) 
    )];

    ObjectiveFileList:= ObjectiveAEsInstance:-GetFileList();
    Path:= ObjectiveAEsInstance:-GetHomeDir();
    ObjectiveFileList:= [seq(
      cat(Path, "/g_", ObjectiveFileList[i1]),
      i1= 1..nops(ObjectiveFileList) 
    )];

    FileList:= [
      "npsolconfun",
      "npsolobjfun", 
      op(ConstraintsFileList),
      op(ObjectiveFileList) 
    ];

    SharedObj:= NPSOL:-createSharedObjectFromFilelist(
      FileList, 
      WorkingDir
    ):

  return(SharedObj);

end proc:
