###########################################################################
#
# @path agrawal82.txt
# 
# @brief run optimization for Agrawal fermenter
#
# @revision
# 2008-03-06  instead of anNLP[...] using anNLP["..."] by dka
# 011210 written by mmo
#
###########################################################################
    agrawal82:= proc(
     # optional arguments are passed to CreateInstance
    )

      local anNLP, NPSOLproc, Sol1, CalculatedOptimum, ExpectedOptimum,
        ExpectedObjVal, AcceptedRelErr, i1, RelErr, Objf; 

      #
      # throw error if temporary directory already exists
      #
        if
          Aux:-FileOperations:-dirExists("tmpAgrawal82")
        then
          error("temporary directory ./tmpAgrawal82 needed to run test already exists")
        else  
            mkdir("tmpAgrawal82")
        end if;

      #
      # define NLP
      #
        anNLP:= table([
          "ExplicitAEs" = [k = 1, K = .12, a = 5.4, b = 180, c1 = 5, 
            V = 51.3*Pi, mu = k*S*exp(-S/K), sigma = mu/(a+b*S), 
            c2 = -70.3+270.3*SF
          ], 
          "Parameters" = [F = 3.0, SF = .3], 
          "LinearConstraints" = [], 
          "Constraints" = [0 = -F/V*X+mu*X, 0 = F/V*(SF-S)-sigma*X], 
          "Variables" = [X = -infinity .. infinity, S = -infinity .. infinity], 
          "CostFunction" = [c1*X*F-c2*F]
        ]);
       
      #
      # free F and SF
      #
        anNLP:= Aux:-NLP:-parToVarInNLP(
          [F=0..10, SF=0.3..1], 
          anNLP
        ):
 
      #
      # pass all optional arguments to self
      #
        printf("\n"); 
        if 
          nargs>0
        then
          printf("running Agrawal82 with optional argument %s to CreateInstance\n", args[1]); 
          NPSOLproc:=CreateInstance(anNLP, "./tmpAgrawal82", args[1..-1]);
        else
          printf("running Agrawal82 without option adifor\n"); 
          NPSOLproc:=CreateInstance(anNLP, "./tmpAgrawal82");
        end if; 

      #------------------------------------------------------------
      #
      # execute NPSOL 
      #
      #------------------------------------------------------------
        Sol1:= [
          F= 3,
          SF= 0.3,
          X= 2.6201,
          S= 0.022443
        ];

        NPSOLproc:-setVariables(
          Sol1
        ); 

        NPSOLproc:-runOpt();

      #
      # get result
      #
        Objf:= NPSOLproc:-getObjf(); 
        CalculatedOptimum:= NPSOLproc:-getVariables();

      #
      # remove temporary working directory
      #
        dlclose("cwrap_npsol1.so");
      # dlclose("mwrap_cwrapper_npsol.so");      
      #  Aux:-FileOperations:-removeAllFilesInDir("tmpAgrawal82");
      #  rmdir("tmpAgrawal82");
        system("rm -r tmpAgrawal82");

      #
      # compare to expected result
      #
        ExpectedOptimum:= [
          X = 16.44085444, 
          S = .6800249428e-1, 
          F = 6.218460030, 
          SF = .9999999997
        ]:
        ExpectedObjVal := -732.508024836933600; 
        AcceptedRelErr:= 0.001:

      #
      # compare results to expected results: value of optimal point
      #
        for i1 from 1 to nops(ExpectedOptimum) do
          if not
            Aux:-getRelErr(
              rhs(CalculatedOptimum[i1]),
              rhs(ExpectedOptimum[i1])
            )<AcceptedRelErr
          then
            return(false);
          end if; 
        end do;
  
      #
      # compare results to expected results: value of objective
      #
        RelErr:= Aux:-getRelErr(
          ExpectedObjVal,
          Objf
        );
        if not
          RelErr< AcceptedRelErr
        then
          return(false); 
        end if;
        
        return(true); 

    end proc; # Agrawal82
