#############################################################
#
# BVPOpt/source/createSharedObject.txt
#
# @brief Creates shared objects needed for call to define_external
#
# @param directory where auxiliary files will be created,
#        DAESys,
#        anNLP, NLP which contains constraints, cost function 
#                and internal variables of optimization,
#        X0, the initial guess for first point X0 of the trajectory solution
#        initP, the initial guess for period of the trajectory solution 
#        nodes, number of nodes in multi-shooting procedure,     
#        list of compilled objects obtaned from TIDES
#
# @notes list of compilled objects obtaned from TIDES should
#        contain path to "calltides.o" and corresponding 
#        system file, e.g., "scott.o"
#
# @revision
# 2011-12-11 created by dka
#
#############################################################
  createSharedObject:= proc(
    bvpoptDir::string,
    anBVPSys::DAESys,
    anNLP::NLP,
    X0::list(EvalsToFloat),
    initP::EvalsToFloat,
    nodes::integer,
    objNames::list(string)
  )

    local oldDir, LinkerCommand, bvpopt, SharedObjectName,InstanceCounter,
          i, objNamesList; 

    InstanceCounter:= 1; 
    
    #
    # creates bvpoptDir
    #
      if not
        Aux:-FileOperations:-dirExists(bvpoptDir)
      then
        mkdir(bvpoptDir);
      end if;

    #
    # save directory in which proc was called and change to requested dir
    #
      oldDir:= currentdir():
      currentdir(bvpoptDir): 
      # currentdir creates error if bvpoptDir does not exist
  
    #
    # create external Fortran function fortranrhs.f and fortranjac.f 
    # with procedures FCN and DFDY
    # 
      BVPSol:-createExternalFunctions(anBVPSys);
        
    # 
    # compile fortranrhs.f and fortranjac.f 
    #
      system("gfortran -c -shared -O -fPIC fortranrhs.f -o fortranrhs.o"); 
      system("gfortran -c -shared -O -fPIC fortranjac.f -o fortranjac.o"); 


    #
    # create npsolobjfun.f and npsolconfun.f which use results of TIDES integration
    #
     createExternalFunctions(anBVPSys,
                             anNLP,
                             X0,
                             initP, 
                             nodes); 
     
    # 
    # compile npsolobjfun.f and npsolconfun.f 
    #
      system("gfortran -c -shared -O -fPIC npsolobjfun.f -o npsolobjfun.o");
      system("gfortran -c -shared -O -fPIC npsolconfun.f -o npsolconfun.o");


    #
    # creates funcF0P.f and funcJ0P.f that are used in npsolobjfun.f
    #

    # createExternalDerivativesFuncs(anBVPSys);
    
    # 
    # compile funcF0P.f and funcJ0P.f 
    #   
    #  system("gfortran -c -shared -O -fPIC funcF0P.f -o funcF0P.o");
    #  system("gfortran -c -shared -O -fPIC funcJ0P.f -o funcJ0P.o");
      

          

    #----------------------------------------
    # 
    # link problem dependent and problem independent files
    #
    #----------------------------------------
      SharedObjectName:= cat(
        "cwrap_npsol", InstanceCounter, ".so"
      );

    #
    # external object names obtained from TIDES 
    # (depend on an induvidual problem) 
    #
        objNamesList:="";
        for i from 1 to nops(objNames) do
	  objNamesList:=cat(objNamesList,objNames[i]," ");
        end do;
     
    #
    # in additional to TIDES files connect NPSOL files
    #
        LinkerCommand:= cat(
          `gcc -shared -Xlinker -Bsymbolic fortranrhs.o fortranjac.o npsolconfun.o npsolobjfun.o `,
           _ModulesDirectory, `/Npsol/ext_routines/f2c/cwrap/npsol_open.o `,
          _ModulesDirectory, `/Npsol/ext_routines/f2c/cwrap/npsol_close.o `,
          _ModulesDirectory, `/Npsol/ext_routines/f2c/cwrap/set_params.o `,
          _ModulesDirectory, `/Npsol/ext_routines/f2c/cwrap/cwrap_npsol.o `,
          objNamesList,
          _ModulesDirectory, `/Npsol/ext_routines/f2c/shared_obj/npsol.so `,
          _ModulesDirectory, `/BVPSol/ext_routines/f2c/shared_obj/period.so `,
          ` -lf2c -O2 -lm -lgfortran -lTIDES -o `, 
          SharedObjectName
        );
    
      system(LinkerCommand);

    # 
    # create interface to NPSOL
    #
      bvpopt:= NPSOL:-runDefineExternal(SharedObjectName);
    
      #
      # change back to directory of calling procedure
      #
        currentdir(oldDir);
  
      RETURN(bvpopt);

  end proc; # createSharedObject
