###############################################################################
#
# @path BVPOpt/InternalNVVars/getVarsForFortranTemplate.txt
# 
# @brief Generate list of derivatives function values for a periodic 
#        solution, that can be substituted into the fortran templates
# 
# @param aSys, ODE system
#
# @authors dka
#
# @revision
# 2011-11-19 written by dka
#
###############################################################################
getVarsForFortranTemplate:=proc(aSys::DAESys)

local internalVarsToSubsList, i, j, k, f_x, listForFxx, f_xx,
      numOfDynEqns, numOfUncParam, f_alpha, f_xalpha, f_T, x0p, f_TVals,
      X0pValsList, paramValsList, paramNames, dynVarsNames, rhsDynEqns,
      listForFxAlpha, f_xT, jacOfSys;

  
# number of dynamical and uncertain parameters in the ODE system

numOfDynEqns:=nops(aSys["ODEs"]);
numOfUncParam:=nops(aSys["Parameters"]);

internalVarsToSubsList:=[];


# add values for Fx

f_x:= Matrix(numOfDynEqns,numOfDynEqns,symbol='Fx');

for i from 1 to numOfDynEqns do
  for j from 1 to numOfDynEqns do
    internalVarsToSubsList:=[op(internalVarsToSubsList),f_x[i,j]=FX[i,j]];
  end do;
end do;


# add values for f_alpha 

f_alpha:= Matrix(numOfDynEqns,numOfUncParam,symbol='Fp');

for i from 1 to numOfDynEqns do
  for j from 1 to numOfUncParam do
    internalVarsToSubsList:=[op(internalVarsToSubsList),f_alpha[i,j]=FP[i,j]];
  end do;
end do;


# add values for f_xx

listForFxx := []; 
for i to numOfDynEqns do 
  listForFxx := [op(listForFxx), convert(Matrix(numOfDynEqns, numOfDynEqns, symbol = 'Fxx[i]'), listlist)] 
end do: 
f_xx := Array(listForFxx);


for i from 1 to numOfDynEqns do
  for j from 1 to numOfDynEqns do
    for k from 1 to numOfDynEqns do
      internalVarsToSubsList:=[op(internalVarsToSubsList),f_xx[i,j,k]=FXX[i,j,k]];
    end do;
  end do;
end do;


# add values for f_xalpha
 
listForFxAlpha := []; 
for i to numOfDynEqns do 
  listForFxAlpha := [op(listForFxAlpha), convert(Matrix(numOfDynEqns, numOfUncParam, symbol = 'Fxp[i]'), listlist)] 
end do: 
f_xalpha := Array(listForFxAlpha);


for i from 1 to numOfDynEqns do
  for j from 1 to numOfDynEqns do
    for k from 1 to numOfUncParam do
      internalVarsToSubsList:=[op(internalVarsToSubsList),f_xalpha[i,j,k]=FXP[i,j,k]];
    end do;
  end do;
end do;


#
# add values for f_xT and f_xxT

f_T:=Vector(numOfDynEqns,symbol='Ft');

for i from 1 to numOfDynEqns do
  internalVarsToSubsList:=[op(internalVarsToSubsList),f_T[i]=F0[i]];
end do; 


f_xT:=Matrix(numOfDynEqns,numOfDynEqns,symbol='Fxt');


for i from 1 to numOfDynEqns do
  for j from 1 to numOfDynEqns do
    internalVarsToSubsList:=[op(internalVarsToSubsList),f_xT[i,j]=J0[i,j]];
  end do;
end do;
  
return internalVarsToSubsList;

end proc; 

