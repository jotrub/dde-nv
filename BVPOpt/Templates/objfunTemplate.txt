###########################################################################
#
# @path template function objfunTemplate, local to NPSOL
#
# @brief below actual information from anNLP is substituted into
# this template
#
# @revision
#   021217 introduced common block for parameters; deleted code
#     which assigned values to par; 
#   021127 introduced dummy explicit AE;
#   021124 introduced EAEs; 
#   010424 introduced dummy parameter which allows to use template
#     for nlps without any parameters - mmo 
#   0011xx written by mmo
###########################################################################
    objfunTemplate:= proc(
      mode::integer,
      n::integer,
      x, 
      objf::float,
      objgrad, 
      nstate::integer
    )

      global par;   
      local n_in_objfun, z; 
  
      declare(
        par= array(
          1..(NumParsToBeSubs+ 1), # see note concerning dummy
          numeric                  # parameter in ConfunTemplate above
        ),
  
        x= array(
          1..NumVarsToBeSubs,
          numeric
        ),

        objgrad= array(
          1..NumVarsToBeSubs,
          numeric
        ),

        n_in_objfun= integer,

        z= array(
          1..NumEAEsToBeSubs+ 1,
          numeric
        )
        
      ); 
  
      #
      # check for errors
      #
        n_in_objfun:= NumVarsToBeSubs;
        if
          not(n_in_objfun= n)
        then
          ERROR(`Error in confun: n differs from number of variables`);
          # note: do not change to Maple6 syntax of error command,
          #   codegen/fortran cannot deal with new syntax
          #   this is probably a bug in Maple6 - mmo
        end if; 
      
      #
      # calculate explicit algebraic equations
      #
        z:= [EAEsToBeSubs, 0]; 

      #
      # calculate objective function
      #
        objf:= ObjToBeSubs;
     
      # print objective function value
      printObjFun(objf);
  
      #
      # calculate gradient of objective function
      #
        objgrad:= GradToBeSubs;
              
      RETURN();
  
    end proc: #objfunTemplate
