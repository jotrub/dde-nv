######################################################################
#
# @path BVPOpt/CreateInstance.txt 
#
# @param  DAESys,
#         anNLP, NLP which contains constraints, cost function 
#                and internal variables of optimization
#         WorkingDir, directory into which files will be written
#                     when compiling and at runtime
#         nodes, number of nodes to initialize BVP solution,
#         initX0, the initial guess for first point X0 of the trajectory solution
#         initP, the initial guess for period of the trajectory solution 
#         list of compilled objects obtaned from TIDES,  
#         phase condition              
#
# @return  procedure which starts bvpopt
#
# @notes (i) list of compilled objects obtaned from TIDES should
#            contain path to "calltides.o" and corresponding 
#            system file, e.g., "scott.o"
#        (ii) for convenience only simple phase conditions are accepted,
#             i.e only conditions of type 'varible_i-constant' 
#
# @revision
#   2011-11-12 written by dka
#
######################################################################
  CreateInstance:=proc(anBVPSys::DAESys,
                       anNLP::NLP,
                       WorkingDir::string,
                       nodes::integer,
                       initX0::list(name= EvalsToFloat),
                       initP::EvalsToFloat,                       
                       objNames::list(string),
                       phaseCondition)

    local bvpopt, BVPOptInstance, NewValues, NewParsNames, Missing, 
          Obsolete, i1, ParNames, X0, logicPhaseVarPresent; 
    
     #
     # prepare working dir
     # refuse to work if file cwrap_bvpopt1.so already exists
     #
        if Aux:-FileOperations:-fileExists(cat(WorkingDir, "/cwrap_npsol1.so"))
        then
          error(
            "in working dir, %1, a maple wrapper file named "
            "cwrap_npsol1.so already exists", WorkingDir
          );
        end if; 

    
  
     ParNames:=anBVPSys["DynVars"];

    #
    # make sure values for all variables values are given in initial point
    #
      NewParsNames:= map(lhs, initX0); 
      Missing, Obsolete:= Aux:-ListOperations:-getMissingAndObsoleteNames(
        NewParsNames,
        ParNames
      );
      if not
        Missing= {}
      then
        error("assignments in initial point (5th argument) are missing for %1", Missing);
      end if;

    #
    # assign values
    #   
      NewValues:= subs(
        initX0,
        ParNames
      );

      X0:=[];
      for i1 from 1 to nops(ParNames) do
         X0:=[op(X0),NewValues[i1]];
      end do;


    #
    # check if the phase condition is given in the form 'varible_i-constant' 
    #
      logicPhaseVarPresent:=BVPSol:-validatePhaseCondition(anBVPSys,phaseCondition);
      if(logicPhaseVarPresent=false)
        then error("Phase condition should be given in form 'var_i-constant'",phaseCondition);
      end if;

    
    # 
    # substiture explicit functions intro anBVPSys
    #
      anBVPSys := Aux:-SystemClasses:-subsExplicitAEsIntoDAESys(anBVPSys);
     
    #
    # prepare interface for optimization
    #

      try:
        bvpopt:= createSharedObject(
          WorkingDir,
          anBVPSys,
          anNLP,
          X0,
          initP,
          nodes,
          objNames,
          phaseCondition
        );
      catch:
	printf("CreateSharedObject failed, \n");
        printf("  error thrown was %q\n", lastexception);
        printf("  attempting to continue CreateInstance\n");
      end try; 


    #
    # create instance of simple wrapper
    #

      printf("creating instance of interface\n"); 
      
      try:
        BVPOptInstance:= NPSOL:-SubsIntoSimpleWrapper(
          anNLP, 
          bvpopt,
          WorkingDir,
          Scaling,
          'ScalingPars'
	);
      catch:
	printf("SubsIntoSimpleWrapper failed, \n");
        printf("  error thrown was %q\n", lastexception);
        printf("  attempting to continue CreateInstance\n");      
      end try;

      createOptionsFile(WorkingDir);
      

    RETURN(eval(BVPOptInstance));

  end proc; #CreateInstance






