##############################################################################
#
# @path DDASPKSen/DDASPKSen.txt
#
# @notes exported:
#         CreateInstance
#         Tests
#
# @revision
#   2010-08-26 copied from old code by dka
#   080305 removed OperatingSystem -tqu
#   050915 renamed Module to DDASPKSen -jge
#   04xx   Added AppendSenParsToDAESys  -jge
#   020319 CreateExternalFunctions does no longer substitute ExplicitAEs
#     into AEs and ODEs, but passes them on to Templates/ResTemplate 
#     (speeds up use of adifor on res.f). Note that if linalg[jacobian]
#     is used instead of adifor, ExplicitAEs will not be substituted for
#     evaluation of equations, but only before Jacobian is created, i.e.
#     same res.f with explicit ExplicitAEs (in variables 'z') is used
#     if derivatives are generated by linalg[jacobian]. Also see
#     Templates/ResTemplate.txt
#   020318 (1) added JacAdiforTemplate to directory Templates; adifor
#     is now called to create a routine which is in turn called by
#     instance of JacAdiforTemplate; note that this does not allow
#     to exploit DDASPK's ability to call adifor-generated routines
#     directly; code may be made faster by using the build-in 
#     interface to adifor; 
#   020303 (1) added SubsIntoSimpleWrapper.txt with its own dir which
#     contains former CreateInstance/SimpleWrapper.txt; (2) removed dir
#     CreateInstance thus SimpleWrapper.txt in it; (3) CreateInstance now
#     no longer instanciates SimpleWrapper but calls SubsIntoSimpleWrapper
#     to do so; this is done to allow for reuse of SubsIntoSimpleWrapper
#     in new proc RestoreInstance; (4) added proc RestoreInstance
#   020301 (1) added PrepareDirForDDASPK, proc is called at beginning of
#     CreateInstance to avoid deleting existing working dirs, (2) added
#     local variable DDASPK:-UseAdifor which is used to toggle between
#     Jacobian calculation by adifor or maple (3) added local procedures
#     CreateAdiforFiles and RunAdifor; note that module ADIFOR is not used,
#     since DDASPK is prepared for use of adifor, therefore we do not 
#     simply replace the maple-generated Jacobian by an adifor Jacobian,
#     but we make use of the adifor option of DDASPK 
#   011126 added present wrapper; added local vars InstanceCounter and
#     OperatingSystem at this level and removed them in
#     CreateInstance; removed "DDASPK" from proc names
#     CreateDDASPKinstance etc.; added proc init which sets
#     InstanceCounter to zero and which sets OperatingSystem;    
#   0111xx interface written by mkl and mmo
#
###############################################################################
DDASPKSen:= module()
  
  export 
    appendSenParsToDAESys,
    #OperatingSystem, 
    init, 
    CreateInstance, 
    RestoreInstance,
    Tests; 

  local 
    CreateAdiforFiles, 
    createSharedObject, # debugging only
    createExternalFunctions,
    EvalSen,
    prepareDirForDDASPK,
    RunAdifor,
    SubsIntoSimpleWrapper,
    Templates, 
    InstanceCounter,
    UseAdifor;

  load=init(); 

$include <init.txt>
$include <appendSenParsToDAESys.txt>
$include <CreateInstance.txt>
$include <createSharedObject.txt> 
$include <createExternalFunctions.txt>
$include <prepareDirForDDASPK.txt>
$include <RestoreInstance.txt>
$include <SubsIntoSimpleWrapper.txt>
$include <Templates.txt>
$include <Tests.txt>

  #
  # explicit call to init if module is loaded from a text file
  #
    init();

end module; # DDASPK

#
# save result
#
save(DDASPKSen, "DDASPKSen.mpl");  

