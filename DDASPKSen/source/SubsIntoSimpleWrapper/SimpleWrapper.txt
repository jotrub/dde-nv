###------------------------------------------------------------------------
#
# @path DDASPKSen/SubsIntoSimpleWrapper/SimpleWrapper.txt
#
# @brief template procedure SimpleWrapper
#
# @revision
#   080905 added procedure Integrate, IntegrateAtSpecificTimePoints,
#	   and CheckInputForIntegrateAtSpecificTimePoints 
#	   as replacement for RunInt and CalculateIntResults, and
#	   CheckInputForCalculateIntResults respectively. tqu	   
#   080521 added variables to handel variable input, tqu#     
#	   added SetSpecificParameters, SetActInputPosition,
#	   CheckInputForCalculateIntResults, tqu
#   080514 added SetInput, GetInputCurve,GetNameInputParameter,
#	   GetActInputPosition; tqu  
#   080429 added CalculateIntResults; tqu
#   041011 added RunIntWithDynConstraint
#   040910 added some initialization values to enable consistent
#     initialization of DAE systems -jge
#   020725 changes which will eventually allow to introduce higher
#     level integration procedure which returns variables as a
#     function of t over an interval [tstart, tend]:
#     (i) rename RunInt to DoIntStep for better readability;
#     (ii) added SetInitialTime, SetEndTime;
#     (iii) added default values for t_vec, tout_vec, and MaxNumSteps;
#     (iv) added new procedure RunInt which returns data of a
#     run between t_vec and tout_vec of at most MaxNumSteps points;
#     (v) added SetMaxNumSteps;
#   020417 added SetParameters, SetVars, SetVariables;
#   020414 added GetMaxResidueODEs, GetMaxResidueExplicitAEs,
#     GetExplicitAEs, EvalExplicitAEsInDAESys;
#   020322 split up SimpleWrapper
#   020319 added local procedure CalculateYPRIME which evaluates YPRIME
#     such that residues of DAEsys are zero; used by Init; remember
#     calculation of YPRIME is possible since in type DAEsys, ODEs are
#     of the form YPRIME= f(Y, par); remember that DDASPK can integrate
#     systems where DAEsys cannot be solved for YPRIME explicitly;
#   020318 SimpleWrapper:-Init no longer assigns INFO[5], since this
#     controls the use of adifor/linalg[maple] and therefore should be
#     set at instanciation;
#   020313 added convert(..., list) to Get methods which previously
#     returned objects of type Vector;
#   020311 changes to allow for parameter passing between maple and
#     DDASPK: added NumParsInDAEsys, ParsInDAEsys;
#   020308 (1) replaced t_vec[1] by t_vec in GetT; (2) Init now returnes
#     idid; (2) removed obsolete variable INFO;
#   020228 (1) in CreateSharedObject, interface created by define_external
#     was changed, here types of arguments are changed accordingly
#     vectors of length one are now integers/floats: idid, rtol, atol,
#     rpar_vec, ipar_vec, t_vec,
#     (2) removed option order= Fortran_order from Vector() everywhere
#     (3) removed quotes from variables in define_external acc. to rule
#     that only REF-variables are quoted:  t_vec, y, yprime_vec,
#     RWORK_vec, IWORK_vec
#   010510 written by mkl and mmo
#
# to do: (1) remove CalculateIntResults and CheckInputForCalculateIntResults. They
#	     are replaced by IntegrateAtSpecificTimePoints, and
#	     CheckInputForCalculateIntResults.	   
#
###------------------------------------------------------------------------
    SimpleWrapper:= module()

###      local NEQ, LIW, LRW, DDASPK, N,
###            rtol, atol, rpar, ipar, senpar,
###            idid, t_vec, y_vec, yprime_vec, tout_vec,
###     INFO_vec, RWORK_vec, IWORK_vec, rtol,
###            atol, rpar_vec, ipar_vec, CalculateYPRIME,
###     senpar_vec, INFO5, NumParsInDAEsys, ParsInDAEsys;
      local setActInputPosition;
      	
      export init, 
             doIntStep, 
             Sys, 
             getY, 
             getYPRIME, 
             getT, 
             getSys,
             getParameters, 
             getVariables, 
             getMaxResidueODEs,
             getSenParameters,
             getSenPars,
             getSensitivities,
             getS,
             getSPRIME,
             getMaxResidueExplicitAEs, 
             getExplicitAEs,
             evalExplicitAEsInDAESys, 
             setParameters, 
             setVars,
             setVariables, 
             setSenPars, 
             setSenParameters,
             setInitialTime, 
             setEndTime, 
             runInt,
             runIntWithDynConstraint,
             setMaxNumSteps,
             checkInputForCalculateIntResults, 
             checkInputForIntegrateAtSpecificTimePoints,
	       createCFunction,
             calculateIntResults, 
             setInput, 
             getInputCurve,
	       getNameInputParameter,
             getActInputPosition, 
             integrate, 
             integrateAtSpecificTimePoints,
	       setSpecificParameters, 
# these actually are local:
            NEQ, 
            LIW, 
            LRW, 
            DDASPK, 
            N, 
            setPars, 
            getPars,
            rpar, ipar, senpar,
            idid, t_vec, y_vec, yprime_vec, tout_vec,
            INFO_vec, RWORK_vec, IWORK_vec, rtol_vec,
            atol_vec, rpar_vec, ipar_vec, 
            calculateYPRIME,
            senpar_vec, INFO5, INFO11, INFO19, INFO20, INFO22, INFO23, INFO24, INFO25,
            NumParsInDAEsys, ParsInDAEsys,
            NumSenParsInDAESys,SenParsInDAESys,
            MaxNumSteps, VarNames, NumVars, data, item,
            i1, DdaspkStatus, CurrentPoint, i2, 
	      ActInputPosition, SysInput, NameInputParameter;

      #------------------------------------------------------------
      #
      # receive some variables from constructor SubsIntoSimpleWrapper
      #
      #------------------------------------------------------------
       #
       #attributes for variable input
       #	
	ActInputPosition:= ActInputPositionToBeSubs; 
	SysInput:= SysInputToBeSubs;
	NameInputParameter:= NameInputParameterToBeSubs;

        INFO5:= INFO5toBeSubs; # toggles between adifor and maple
                               # generated derivatives
        INFO19:= INFO19toBeSubs; # For evaluation of Sensitivities
        INFO20:= INFO20toBeSubs; # determines method of sens evaltuation
        INFO22:= INFO22toBeSubs; # Number of Parameters in senpar
        INFO23:= INFO23toBeSubs; # Error control option for sensitivity variables
        INFO24:= INFO24toBeSubs; # Sensitivity of a derived quantity
        INFO25:= INFO25toBeSubs; #  method option for sensitivity analysis


        NEQ:= NEQtoBeSubs;
        LRW:= LRWtoBeSubs;
        LIW:= LIWtoBeSubs;
        DDASPK:= DDASPKtoBeSubs;
        Sys:= aDAESys;
        ParsInDAEsys:= ParsInDAEsysToBeSubs;
        SenParsInDAESys:= SenParsInDAESysToBeSubs;

      #------------------------------------------------------------
      #
      # set local variables
      #
      #------------------------------------------------------------
        NumParsInDAEsys:= nops(ParsInDAEsys);
        NumSenParsInDAESys:= nops(SenParsInDAESys);

        idid:= 0;

        N := 30;

    INFO_vec := Vector(
      1..N, fill=0, datatype= integer[4]
    );
      #
      # set some values of INFO_vec (see DDASPK documentation for futher Details)
      #
        INFO_vec[3]:= 1; # integrate until tout is reached, no output of
                         # intermediate results

        INFO_vec[5]:= INFO5; # 1, maple-generated Jacobian
                             # 2, adifor and SparsLinC

        INFO_vec[19]:= INFO19; # For evaluation of Sensitivities
        INFO_vec[20]:= INFO20; # determines method of sens evaltuation
        INFO_vec[22]:= INFO22; # Number of Parameters in senpar
        INFO_vec[23]:= INFO23; # Error control option for sensitivity variables
        INFO_vec[24]:= INFO24; # Sensitivity of a derived quantity
        INFO_vec[25]:= INFO25; #  method option for sensitivity analysis

    RWORK_vec := Vector(
      1..LRW, fill=0, datatype= float[8]
    );

    IWORK_vec := Vector(
      1..LIW, fill=0, datatype= integer[4]
    );

        rtol_vec:= 1.0e-6;

        atol_vec:= 1.0e-6;

        rpar_vec:= Vector(
          1..NumParsInDAEsys, map(evalf, ParsInDAEsys), datatype= float[8]
        );

        ipar_vec:= 0;   # passing information via ipar not implemented,
                        # this is a dummy value

        senpar_vec:= Vector(
          1..NumSenParsInDAESys, map(evalf, SenParsInDAESys), datatype= float[8]
        );

      #
      # some default values for variables which can be accessed via
      # Set methods
      #
        MaxNumSteps:= 100;
        t_vec:= 0;
        tout_vec:= 1;
    #
    # set some more values in case [AEs] is not []
    #
     if not
       aDAESys["AEs"]=[]
     then
       INFO11:=INFO11toBeSubs;
       INFO_vec[11]:= INFO11;
       #
       # set IWORK[40+ 1..40+ n_x]=1 (DynVars)
       #
       for i1 from 1 to nops(Sys["DynVars"]) do
         IWORK_vec[40+i1]:=1:
       end do:
       #
       # set IWORK[40+ n_x+ 1..40+ n_x+ n_y]=-1 (AlgVars)
       #
       for i1 from 1 to nops(Sys["AlgVars"]) do
         IWORK_vec[40+ nops(Sys["DynVars"])+ i1]:=-1:
       end do:
     end if;

$include <SubsIntoSimpleWrapper/SimpleWrapper/calculateYPRIME.txt>
$include <SubsIntoSimpleWrapper/SimpleWrapper/checkInputForCalculateIntResults.txt>
$include <SubsIntoSimpleWrapper/SimpleWrapper/checkInputForIntegrateAtSpecificTimePoints.txt>
$include <SubsIntoSimpleWrapper/SimpleWrapper/doIntStep.txt>
$include <SubsIntoSimpleWrapper/SimpleWrapper/evalExplicitAEsInDAESys.txt>
$include <SubsIntoSimpleWrapper/SimpleWrapper/getExplicitAEs.txt>
$include <SubsIntoSimpleWrapper/SimpleWrapper/getParameters.txt>
$include <SubsIntoSimpleWrapper/SimpleWrapper/getPars.txt>
$include <SubsIntoSimpleWrapper/SimpleWrapper/getSenParameters.txt>
$include <SubsIntoSimpleWrapper/SimpleWrapper/getSenPars.txt>
$include <SubsIntoSimpleWrapper/SimpleWrapper/getMaxResidueODEs.txt>
$include <SubsIntoSimpleWrapper/SimpleWrapper/getS.txt>
$include <SubsIntoSimpleWrapper/SimpleWrapper/getSensitivities.txt>
$include <SubsIntoSimpleWrapper/SimpleWrapper/getSPRIME.txt>
$include <SubsIntoSimpleWrapper/SimpleWrapper/getMaxResidueExplicitAEs.txt>
$include <SubsIntoSimpleWrapper/SimpleWrapper/getSys.txt>
$include <SubsIntoSimpleWrapper/SimpleWrapper/getT.txt>
$include <SubsIntoSimpleWrapper/SimpleWrapper/getVariables.txt>
$include <SubsIntoSimpleWrapper/SimpleWrapper/getY.txt>
$include <SubsIntoSimpleWrapper/SimpleWrapper/getYPRIME.txt>
$include <SubsIntoSimpleWrapper/SimpleWrapper/init.txt>
$include <SubsIntoSimpleWrapper/SimpleWrapper/integrate.txt>
$include <SubsIntoSimpleWrapper/SimpleWrapper/integrateAtSpecificTimePoints.txt>
$include <SubsIntoSimpleWrapper/SimpleWrapper/runInt.txt>
$include <SubsIntoSimpleWrapper/SimpleWrapper/runIntWithDynConstraint.txt>
$include <SubsIntoSimpleWrapper/SimpleWrapper/setEndTime.txt>
$include <SubsIntoSimpleWrapper/SimpleWrapper/setInitialTime.txt>
$include <SubsIntoSimpleWrapper/SimpleWrapper/setMaxNumSteps.txt>
$include <SubsIntoSimpleWrapper/SimpleWrapper/setParameters.txt>
$include <SubsIntoSimpleWrapper/SimpleWrapper/setPars.txt>
$include <SubsIntoSimpleWrapper/SimpleWrapper/setSenParameters.txt>
$include <SubsIntoSimpleWrapper/SimpleWrapper/setSenPars.txt>
$include <SubsIntoSimpleWrapper/SimpleWrapper/setVariables.txt>
$include <SubsIntoSimpleWrapper/SimpleWrapper/setVars.txt>
$include <SubsIntoSimpleWrapper/SimpleWrapper/createCFunction.txt>
$include <SubsIntoSimpleWrapper/SimpleWrapper/calculateIntResults.txt>
$include <SubsIntoSimpleWrapper/SimpleWrapper/setInput.txt>
$include <SubsIntoSimpleWrapper/SimpleWrapper/getInputCurve.txt>
$include <SubsIntoSimpleWrapper/SimpleWrapper/getNameInputParameter.txt>
$include <SubsIntoSimpleWrapper/SimpleWrapper/getActInputPosition.txt>
$include <SubsIntoSimpleWrapper/SimpleWrapper/setSpecificParameters.txt>
$include <SubsIntoSimpleWrapper/SimpleWrapper/setActInputPosition.txt>

    end module; # SimpleWrapperTemplate
