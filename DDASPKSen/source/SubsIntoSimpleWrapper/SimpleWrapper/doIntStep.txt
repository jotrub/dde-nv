######################################################################
#
# @path DDASPKSen/SubsIntoSimpleWrapper/SimpleWrapper/doIntStep.txt
#
# @brief exported procedure doIntStep
#
# @revision
# 020725 see comments in SimpleWrapper.txt for more details:
#   (i) renamed procedure, formerly called DoIntStep which
#   is now used for different purpose;
# 02xxxx written by mmo
#
######################################################################

#
# debugging possibility
#
#system(cat("echo NEQ: ", convert(NEQ,string), "\n"));
#system(cat("echo t_vec: ", convert(t_vec,string), "\n")); 
#system(cat("echo y_vec: ", convert(y_vec,string), "\n")); 
#system(cat("echo yprime_vec: ", convert(yprime_vec,string), "\n")); 
#system(cat("echo tout_vec: ", convert(tout_vec,string), "\n"));
#system(cat("echo INFO_vec: ", convert(convert(INFO_vec, list),string), "\n"));
#system(cat("echo rtol_vec: ", convert(rtol_vec,string), "\n")); 
#system(cat("echo atol_vec: ", convert(atol_vec,string), "\n")); 
#system(cat("echo idid: ", convert(idid,string), "\n")); 
#system(cat("echo RWORK_vec: ", convert(convert(RWORK_vec, list),string), "\n"));
#system(cat("echo LRW: ", convert(LRW,string), "\n"));
#system(cat("echo IWORK_vec: ", convert(convert(IWORK_vec, list),string), "\n")); 
#system(cat("echo LIW: ", convert(LIW,string), "\n")); 
#system(cat("echo rpar_vec: ", convert(convert(rpar_vec, list),string), "\n"));
#system(cat("echo ipar_vec: ", convert(ipar_vec,string), "\n")); 
#system(cat("echo senpar_vec: ", convert(convert(senpar_vec, list),string), "\n"));


doIntStep:= proc()


#printf("\n\nIN:\nNEQ: %a \n",NEQ);
#printf("t_vec: %a \n",t_vec); 
#printf("y_vec: %a \n",y_vec);
#printf("yprime_vec: %a \n",yprime_vec);
#printf("tout_vec: %a \n",tout_vec);
#printf("INFO_vec: %a \n",INFO_vec);
#printf("rtol_vec: %a \n",rtol_vec); 
#printf("atol_vec: %a \n",atol_vec);
#printf("idid: %a \n",idid);
#printf("RWORK_vec: %a \n",RWORK_vec);
#printf("LRW: %a \n",LRW);
#printf("IWORK_vec: %a \n",IWORK_vec);
#printf("LIW: %a \n",LIW);
#printf("rpar_vec: %a \n",rpar_vec);
#printf("ipar_vec: %a \n",ipar_vec); 
#printf("senpar_vec: %a \n",senpar_vec);
  	    DDASPK(
              NEQ, 
              't_vec', 
              y_vec, 
              yprime_vec, 
              tout_vec, 
              INFO_vec, 
              'rtol_vec', 
              'atol_vec', 
	      'idid', 
              RWORK_vec, 
              LRW,
              IWORK_vec, 
              LIW, 
              rpar_vec, 
              ipar_vec, 
              senpar_vec
            );


#printf("\n\nOUT:\nNEQ: %a \n",NEQ);
#printf("t_vec: %a \n",t_vec); 
#printf("y_vec: %a \n",y_vec);
#printf("yprime_vec: %a \n",yprime_vec);
#printf("tout_vec: %a \n",tout_vec);
#printf("INFO_vec: %a \n",INFO_vec);
#printf("rtol_vec: %a \n",rtol_vec); 
#printf("atol_vec: %a \n",atol_vec);
#printf("idid: %a \n",idid);
#printf("RWORK_vec: %a \n",RWORK_vec);
#printf("LRW: %a \n",LRW);
#printf("IWORK_vec: %a \n",IWORK_vec);
#printf("LIW: %a \n",LIW);
#printf("rpar_vec: %a \n",rpar_vec);
#printf("ipar_vec: %a \n",ipar_vec); 
#printf("senpar_vec: %a \n",senpar_vec);



	  RETURN(idid);
end proc; 

