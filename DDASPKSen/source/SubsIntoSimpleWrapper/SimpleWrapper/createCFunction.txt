######################################################################
#
# @path DDASPKSen/SubsIntoSimpleWrapper/SimpleWrapper/createCFunction.txt
#
# @revision
#
######################################################################
createCFunction:= proc()

  local i, fh, listT_vec,listY_vec,listYprime_vec,listTout_vec,listINFO_vec,
  	listRtol_vec,listAtol_vec,listRWORK_vec,listIWORK_vec,listRpar_vec,listIpar_vec,listSenpar_vec,	
        compileCommand, mpiCompileCommand, PATH, status, NumVarsInDAESys, Pars, ValuesExplicitVars, OtherData,
        SenNames,Curve, z;

  currentdir("simModel");
	
  listT_vec:=convert(eval(t_vec),list);
  listY_vec:=convert(eval(y_vec),list); 	
  listYprime_vec:=convert(eval(yprime_vec), list);
  listTout_vec:=convert(eval(tout_vec), list);
  listINFO_vec:=convert(eval(INFO_vec),list);
  listRtol_vec:=convert(eval(rtol_vec),list);
  listAtol_vec:=convert(eval(atol_vec),list);
  listRWORK_vec:=convert(eval(RWORK_vec),list);
  listIWORK_vec:=convert(eval(IWORK_vec),list);
  listRpar_vec:=convert(eval(rpar_vec),list);
  listIpar_vec:=convert(eval(ipar_vec),list);
  listSenpar_vec:=convert(eval(senpar_vec),list);	 
  
  status:=ssystem("rm -fr ./cwrapperDDASPK.c");
  if status[1] <> 0 
  then
	error(" in \".../DDASPKSen/source/SubsIntoSimpleWrapper/SimpleWrapper/createCFunction.txt\" command:\"rm -fr ./ParamEstWrapper.c\"");  end if;
  
  fh:=fopen("cwrapperDDASPK.c", WRITE);

  fprintf(fh, "#include <stdio.h>\n\n");
  
  ####
  #fprintf(fh, "#include <iostream>\n\n");
  ####
  
  fprintf(fh, "extern \"C\" void cwrapper_ddaspk(\n");
  fprintf(fh, "  int, \n");
  fprintf(fh, "  double *, \n");
  fprintf(fh, "  double *, \n");
  fprintf(fh, "  double *, \n");
  fprintf(fh, "  double , \n");
  fprintf(fh, "  int *, \n");
  fprintf(fh, "  double *, \n");
  fprintf(fh, "  double *, \n");
  fprintf(fh, "  int *, \n");
  fprintf(fh, "  double *, \n");
  fprintf(fh, "  int, \n");
  fprintf(fh, "  int *, \n");
  fprintf(fh, "  int, \n");
  fprintf(fh, "  double *, \n");
  fprintf(fh, "  int, \n");
  fprintf(fh, "  double *\n");
  fprintf(fh, ");\n\n");

  fprintf(fh, "void cwrapperDDASPK(double* rpar_vec,double* data_vec, double* y_vec){\n\n");
  fprintf(fh, "int    NEQ = %d;\n", NEQ);
  fprintf(fh, "double t_vec[1]={0};\n");
  
  #fprintf(fh, cat("double y_vec[%d];\n"), nops(listY_vec));
  #fprintf(fh, cat("double y_vec[%d]={", seq("%1.20e, ", i=1..nops(listY_vec)-1), "%1.20e};\n"), nops(listY_vec), op(listY_vec));
  
  fprintf(fh, cat("double tout_vec[%d]={", seq("%1.20e, ", i=1..nops(listTout_vec)-1), "%1.20e};\n"), nops(listTout_vec), op(listTout_vec)); 
  fprintf(fh, cat("int INFO_vec[%d]={", seq("%1.20e, ", i=1..nops(listINFO_vec)-1), "%1.20e};\n"), nops(listINFO_vec), op(listINFO_vec)); 
  fprintf(fh,	  "double rtol_vec[%d]={%de%d};\n", nops(listRtol_vec)-1, op(listRtol_vec)); 
  fprintf(fh,	  "double atol_vec[%d]={%de%d};\n", nops(listAtol_vec)-1, op(listAtol_vec)); 
  fprintf(fh,     "int    idid=0;\n");
  fprintf(fh, cat("double RWORK_vec[%d]={", seq("%1.20e, ", i=1..nops(listRWORK_vec)-1), "%1.20e};\n"), nops(listRWORK_vec), op(listRWORK_vec)); 
  fprintf(fh,     "int    LRW = %d;\n", LRW);
  fprintf(fh, cat("int IWORK_vec[%d]={", seq("%1.20e, ", i=1..nops(listIWORK_vec)-1), "%1.20e};\n"), nops(listIWORK_vec), op(listIWORK_vec));   
  fprintf(fh,     "int    LIW = %d;\n", LIW);
  
  #INFO# Parameter wie zb. k1 k2 k3, werden übergeben! #INFO#
  #
  #fprintf(fh, cat("double rpar_vec[%d]={", seq("%1.20e, ", i=1..nops(listRpar_vec)-1), "%1.20e};\n"), nops(listRpar_vec), op(listRpar_vec)); 
  #
  ######
  
  fprintf(fh, cat("int ipar_vec[%d]={", seq("%1.20e, ", i=1..nops(listIpar_vec)-1), "%1.20e};\n"), nops(listIpar_vec), op(listIpar_vec));   
  fprintf(fh, cat("double yprime_vec[",NEQ,"];"));
     
  if (nops(listSenpar_vec)>0) then
  	fprintf(fh, cat("\ndouble senpar_vec[%d]={", seq("%1.20e, ", i=1..nops(listSenpar_vec)-1), "%1.20e};\n"), nops(listSenpar_vec), op(listSenpar_vec)); 
  else
  	fprintf(fh,"\n\ndouble *senpar_vec;");
  end if;
  fprintf(fh, "\ndouble tmpData_vec[%d*%d];",MaxNumSteps,nops(listY_vec)+1);
  
  fprintf(fh, "\n\n tmpData_vec[0]=t_vec[0];");
  fprintf(fh, "\n\nfor(int i=0; i<%d; i++){\n", nops(listY_vec));
  fprintf(fh, "tmpData_vec[1+i]=y_vec[i];\n");
  fprintf(fh, "}\n");
  
  fprintf(fh, "\nint steps;\n");
  
  fprintf(fh, cat("\nfor(steps=1; steps<=",MaxNumSteps,";steps++){\n")); 
    
  fprintf(fh,"
 
cwrapper_ddaspk(NEQ,t_vec,y_vec,yprime_vec,tout_vec[0],INFO_vec,rtol_vec,atol_vec,&idid,RWORK_vec,LRW,IWORK_vec,LIW,rpar_vec,ipar_vec[0],senpar_vec);");
  
  fprintf(fh, "\n\ntmpData_vec[steps*%d]=t_vec[0];",nops(listY_vec)+1);
  fprintf(fh, "\n\n for(int j=0; j<%d; j++){",nops(listY_vec));
  fprintf(fh, "\n  tmpData_vec[steps*%d+j+1]=y_vec[j];",nops(listY_vec)+1);
  fprintf(fh, "\n }\n");
  
  z:=0;
  
  for z to nops(VarNames)-nops(listY_vec) do
  
   	fprintf(fh,StringTools[Remove](isApostrophe(z),convert(cat("\ndata[j][i]=",convert(rhs(subs(VarSeq,ParSeq,Sys["ExplicitAEs"][z])),string),";"),string)));
  
  	fprintf(fh,"\nprintf(\"data[%%i][%%i]=%%f   \",j,i,data[j][i]); ");
  
  	fprintf(fh,"\nj++;");
  
  end do;
  
  fprintf(fh,"\n\n");
  
  
  fprintf(fh,"\n if(idid==-33){\nINFO_vec[0]=0;\nINFO_vec[2]=1;\n");
  fprintf(fh,"\n  printf(\"\\n\\n ERROR idid(-33) ERROR\");");
  fprintf(fh,"\n 
 
cwrapper_ddaspk(NEQ,t_vec,y_vec,yprime_vec,tout_vec[0],INFO_vec,rtol_vec,atol_vec,&idid,RWORK_vec,LRW,IWORK_vec,LIW,rpar_vec,ipar_vec[0],senpar_vec);");
  fprintf(fh,"\n  printf(\"\\n\\nnew idid= %%d\",idid);\n }"); 
  
  fprintf(fh,"\n\n if(idid!=1) break;"); 
  fprintf(fh,"\n}");
  fprintf(fh,"\nsteps++;");
  
  fprintf(fh,"\nfor(int i=0;i<%d;i++){",nops(listY_vec)+1);
 
  fprintf(fh,"\n\n for(int j=0;j<steps;j++){");
  fprintf(fh,"\n  data_vec[i*steps+j+1] = tmpData_vec[j*%d+i];",nops(listY_vec)+1);
  fprintf(fh,"\n }");
  fprintf(fh,"\n}\n");
	
  fprintf(fh,"data_vec[0]=steps;\n");
  
  #fprintf(fh, "\nreturn 0;\n\n");
  fprintf(fh, "}\n");

  
  fclose(fh);
  
  #status:=ssystem("rm -fr ./settings.txt");
  #if status[1] <> 0 
  #    then
  #	error(" in \".../DDASPKSen/source/SubsIntoSimpleWrapper/SimpleWrapper/createCFunction.txt\" command:\"rm -fr ./settings.txt\"");
  #end if;
  
  fh:=fopen("settings.txt", WRITE);
  
  fprintf(fh,"%f\n",nops(listY_vec)+nops(listRpar_vec));
  fprintf(fh,"%f\n",nops(listY_vec));
  fprintf(fh,"%f\n",MaxNumSteps);
  
  fclose(fh);
  
  
  status:=ssystem(cat("rm -fr ",_EnvLibDir,"cwrap_ddaspk?.so"));
  #if status[1] <> 0 
  #    then
  #	error(" in \".../DDASPKSen/source/SubsIntoSimpleWrapper/SimpleWrapper/createCFunction.txt\" command:\"rm -fr \",_EnvLibDir,\"cwrap_ddaspk?.so\"");
  #end if;
  
  printf("%a",currentdir());
  printf("%a",cat("cp \*.so ",_EnvLibDir,"/"));
  
  #ssystem("rm -r ../../lib");
  #ssystem("mkdir ../../lib");
  
  status:=ssystem(cat("cp cwrap_ddaspk",convert(InstanceCounter, string),".so ",_EnvLibDir,"/"));
  if status[1] <> 0 
  then
	error(" in \".../DDASPKSen/source/SubsIntoSimpleWrapper/SimpleWrapper/createCFunction.txt\"command:\"cp cwrap_ddaspk\",convert(InstanceCounter, string),\".so \"");
  end if;

   currentdir("..");

   RETURN();
  
end proc;

isApostrophe := proc(s)
        evalb(s="`");
end proc;
