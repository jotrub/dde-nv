######################################################################
#
# @path DDASPKSen/SubsIntoSimpleWrapper/SimpleWrapper/setSpecificParameters.txt
#
# @brief extracts parameters from named list and
#   set them for future calculations; difference to
#   SetParameters(): not all parameters have to be assigned
#
# @param list of substitutions, type name= EvalsToFloat
#   names must be parameter names
#
# @return none, side effects only
#
# @notes set parameters in instance to requested values
#
# @revision
# 091019 added missing local variable names; tqu
# 080521 written by tqu
#
######################################################################
      setSpecificParameters:= proc(
        NewPars::list(name= EvalsToFloat)
      )

        local AssignedPars, ParNamesOfInstance, ParAssignmentsInstance,
          ListOfParValues, actAsssignment, actIndex, actParName; 

        #
        # all parameters must be assinged by first argument
        #
          AssignedPars:= map(lhs, NewPars);
	  ParAssignmentsInstance:= Sys["Parameters"];
          ParNamesOfInstance:= map(lhs, ParAssignmentsInstance); 

          if not
            convert( AssignedPars,set) subset convert( ParNamesOfInstance ,set)
          then
            error(cat(
              "parameter names in first argument must be parameter names from the DAESys: %1.",
              ParNamesOfInstance
            ));
          end if;

        #
        # replace new assignments, create a list of parameter values in the correct order and
        # call SetPars to do the actual assignment
        #         
	for actParName in AssignedPars do:
	  actIndex:= ListTools[Search](actParName, ParNamesOfInstance);
	  ParAssignmentsInstance[actIndex]:= NewPars[actIndex];	  
	end do:

          ListOfParValues:= map(rhs, ParAssignmentsInstance); 
          SetPars(ListOfParValues);
        
        return();

      end proc; # SetSpecificParameters

