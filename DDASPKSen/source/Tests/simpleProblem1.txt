##############################################################################
#
# @path DDASPKSen/Tests/simpleProblem1.txt
#
# @brief Simple Test Problem 1
#
# @revision
#   2010-08-27 exchanged ussage of ModelPack to Aux - dka
#   083005 doesn't work, because DDASPKSen only works with adifor.
#	   To work without adifor new code has to be written.
#   2006-03-21 Replaced DDASPK:- by DDASPKSen:- - mmo
#   030916 added dlclose before invoking RestoreInstance
#   020725 (i) RunInt was renamed to DoIntStep; (ii) SetInitialTime,
#     SetEndTime were introduced after changes to SimpleWrapper, and
#     Init() call was changed accordingly; 
#   020417 added calls to SetVars and removed former 2nd argument=
#     initial value of Y from Init after changes of SimpleWrapper,
#     see revision history of SimpleWrapper:-Init; 
#   020322 (1) call to Init no longer needs argument YPRIME after
#     procedure SimpleWrapper:-Init has been changed to calculate
#     YPRIME automatically; (2) DDASPK:-RestoreInstance no longer
#     needs DAEsystem as first argument since
#     DDASPK:-CreateInstance saves DAEsystem to directory from
#     which RestoreInstance can recover it; 
#   020304 (1) tests are now run twice, once for interface created by 
#     CreateInstance, once for interface restored by
#     RestoreInstance; (2) removed boolean variables which monitor 
#     which tests were successful, introduced error commands instead
#   011126 added missing do in for loop 
#   011011 written by mkl and mmo
#
# @todo
#   (1) values of parameters are set at time of instanciation, add 
#   obsolete call to SetPars for better readability;
#   (2) change to higher level set methods SetParameters and
#   SetVariables instead of SetPars and SetVars; 
#
# @revision
# xxxxxx written by mmo
#
##############################################################################
    simpleProblem1:= proc()
    
      local
        g, xRange, yRange, anNLP, StandardNLP, NPSOLproc, Objf, OptPoint,
        ExpectedObjf, ExpectedOptPoint, Inform, aDAESys,
        StandardModel, DDASPKproc, OptValue, T, Y, TOUT, data,
        i, retVal, imax, result1, result2;  

      #
      # define expected result
      #
        ExpectedObjf := 1.00000;
        ExpectedOptPoint := [1.0, 1.0];

      #
      # directory tmp must not exist
      #
        if
          Aux:-FileOperations:-dirExists("tmp")
        then
          error("temporary directory ./tmp needed to run test already exists")
        else  
            mkdir("tmp")
        end if;

      #
      # define DAE system to be used for tests
      #
        aDAESys := Aux:-SystemClasses:-newDAESys();
        aDAESys["ODEs"] := [
            `vm'` =(1-phis)* rhomf/rhom-vm* qoutoverqin-theta* vm*
              (lp+ltrm)* Q-2* theta* MWm/rhom* f* kd* zi* If,  
            `vs'` = phis* rhosf/rhos-vs* qoutoverqin, 
            `zi'` =1-theta*
               kd* zi-zi* qoutoverqin, 
            `y'` =rhof* Cpf/rho/Cp* (yf-yref)-rhof/rho*
               (y-yref)+negdeltaH/rho/Cp/Tc* theta* vm* lp* rhom/MWm* Q-theta* alpha*
               B/rho/Cp* (y-1)
        ];  
  
        aDAESys["Parameters"] := [theta=200.4617, If=0.0316531, phis=0.6];
        
        aDAESys["DynVars"] := [vm, vs, zi, y];
  
        aDAESys["ExplicitAEs"] := [yf = 2/3, 
          yref = 5/9, 
          Tc = 45, 
          T = 45*y, 
          negdeltaH = 21000, 
          B = 1.4, 
          alpha = 50/3, 
          a3 = -.3495, 
          a2 = -6.7530, 
          a1 = -.4407, 
          f = .8, 
          R = 1.987, 
          MWs = 74.10, 
          MWm = 86.05, 
          phim = 1-phis, 
          rhosf = 777.2814025, 
          rhomf = 918.5720 , 
          rhomg = 892.0200, 
          rhof = rhomf* phim+rhosf* phis, 
          rhos = 74120/(91.878+.116* T), 
          rhop = 1211-.8496* T, 
          rhom = 958.4-1.3276* T, 
          rhofT = rhom* phim+rhos* phis, 
          vp = 1-vm-vs, 
          rho = rhom* vm+rhos* vs+rhop* vp, 
          kd = exp(ln(60)+34.99620124-30800/R/(T+273)), 
          xt = (rhomf* phim-vm* rhomg)/(rhomf* phim+MWm/MWs* phis*
            rhosf), 
          lt = exp(a1* xt+a2* xt^2+a3* xt^3), 
          ltrm = 417.3948000* exp(-7569./R/(T+273.)), 
          lp = 979.8* exp(-4869/R/(T+273))* 15^(1/2), 
          Cpf = (.470* rhomf* phim+.716* rhosf* phis)/(rhomf*
            phim+rhosf* phis), 
          Cp = (.470* rhom* vm+.716* rhos* vs+rhop* vp*
            (.321425+.955e-3* T))/(rhom* vm+rhos* vs+rhop* vp), 
          Q = 2^(1/2)* (f* kd* zi* If/lt)^(1/2), 
          Rm = (lp+ltrm)* Q* rhom/MWm* vm+2* f* kd* zi* If, 
          qoutoverqin = rhof/rhofT+theta* MWm* Rm* (1/rhop-1/rhom) 
        ];

        # obsolete expressions in ExplicitAEs:
        #       lz = ltrm* vm* rhomg/MWm+.104e-4* lp* vs* rhos/MWs, 
        #       alfa = lp* vm* rhomg/MWm/((lp+ltrm)* vm* rhomg/MWm+.104e-4*
        #         lp* vs* rhos/MWs+lt* Q)

  
        aDAESys["AEs"] := [];
   
        aDAESys["AlgVars"] := [];

      #
      # subs standard notation, 
      # get rid of AEs, 
      # create instance of interface
      #
        StandardModel := Aux:-SystemClasses:-subsExplicitAEsIntoDAESys(aDAESys);
        DDASPKproc := DDASPKSen:-CreateInstance(StandardModel, "./tmp",theta, 'NoInterface');

      #----------------------------------------------------------------------
      #
      # run two tests on interface created by CreateInstance
      #
      #----------------------------------------------------------------------

      #
      # execute DDASPK, first test
      #
	OptValue := 1.25058770645712380;

	T := 0.0;
	Y := [0.1167175, 0.6434086, 0.9702816, 1.250588];
	TOUT := 10.0;

	data := array(1..1000, 1..5);
        DDASPKproc:-setVars(Y);
        DDASPKproc:-setInitialTime(T);
        DDASPKproc:-setEndTime(TOUT);  
        DDASPKproc:-init();

	for i from 1 by 1 to 999 do
	  retVal := DDASPKproc:-doIntStep();
          Y := DDASPKproc:-getY();
          T := DDASPKproc:-getT();

          data[i,1] := T;
          data[i,2] := Y[1];
	  data[i,3] := Y[2];
	  data[i,4] := Y[3];
	  data[i,5] := Y[4];
	  if (retVal = 1) then 
	    next;
	  else
	    break;
	  end if;
	end do:
	imax:= i- 1;		

      #
      # compare results to expected results (test 1)
      #
        for i from 1 to imax do
          if (abs(evalf(data[i,5]) - OptValue) > 0.001) then
            error(
              "test 1 using interface created by CreateInstance failed"
            ); 
            return(false);
	  end if;
	end do;

      #
      # execute DDASPK, second test
      #
	T := 0.0;
	Y := [0.05, 0.6434086, 0.9702816, 1.250588];
	TOUT := 10.0;

	data := array(1..1000, 1..5);
        DDASPKproc:-setVars(Y); 
        DDASPKproc:-setInitialTime(T);
        DDASPKproc:-setEndTime(TOUT);  
        DDASPKproc:-init();

	for i from 1 by 1 to 999 do
	  retVal := DDASPKproc:-doIntStep();
          Y := DDASPKproc:-getY();
          T := DDASPKproc:-getT();
          data[i,1] := T;
          data[i,2] := Y[1];
	  data[i,3] := Y[2];
	  data[i,4] := Y[3];
	  data[i,5] := Y[4];
	  if (retVal = 1) then 
	    next;
	  else
	    break;
	  end if;
	end do:
	imax:= i- 1;		

      #
      # compare results to expected results (test 2)
      #
        if (abs(evalf(data[imax,5]) - OptValue) > 0.001) then
	  error(
            "test 2 using interface created by CreateInstance failed"
          ); 
          return(false); 
        end if;

      #----------------------------------------------------------------------
      #
      # test RestoreInstance
      #
      #----------------------------------------------------------------------
      #
      # included dlclose before callin RestoreInstance 
      #
        try
          dlclose("cwrap_ddaspk1.so");
          dlclose("mwrap_cwrapper_ddaspk.dll");
        catch:
        end try;
        DDASPKproc:= 'DDASPKproc'; 

        DDASPKproc := DDASPKSen:-RestoreInstance("./tmp");

      #
      # execute DDASPK, first test
      #
	OptValue := 1.25058770645712380;

	T := 0.0;
	Y := [0.1167175, 0.6434086, 0.9702816, 1.250588];
	TOUT := 10.0;

	data := array(1..1000, 1..5);
        DDASPKproc:-setVars(Y);
        DDASPKproc:-setInitialTime(T);
        DDASPKproc:-setEndTime(TOUT);  
        DDASPKproc:-init();

	for i from 1 by 1 to 999 do
	  retVal := DDASPKproc:-doIntStep();
          Y := DDASPKproc:-getY();
          T := DDASPKproc:-getT();
          data[i,1] := T;
          data[i,2] := Y[1];
	  data[i,3] := Y[2];
	  data[i,4] := Y[3];
	  data[i,5] := Y[4];
	  if (retVal = 1) then 
	    next;
	  else
	    break;
	  end if;
	end do:
	imax:= i-1 ;		

      #
      # compare results to expected results (test 1)
      #
        for i from 1 to imax do
          if (abs(evalf(data[i,5]) - OptValue) > 0.001) then
            error(
              "test 1 using interface restored by RestoreInstance failed"
            ); 
            return(false);
	  end if;
	end do;

      #
      # execute DDASPK, second test
      #
	T := 0.0;
	Y := [0.05, 0.6434086, 0.9702816, 1.250588];
	TOUT := 10.0;

	data := array(1..1000, 1..5);
        DDASPKproc:-setVars(Y); 
        DDASPKproc:-setInitialTime(T);
        DDASPKproc:-setEndTime(TOUT);  
        DDASPKproc:-init();

	for i from 1 by 1 to 999 do
	  retVal := DDASPKproc:-doIntStep();
          Y := DDASPKproc:-getY();
          T := DDASPKproc:-getT();
          data[i,1] := T;
          data[i,2] := Y[1];
	  data[i,3] := Y[2];
	  data[i,4] := Y[3];
	  data[i,5] := Y[4];
	  if (retVal = 1) then 
	    next;
	  else
	    break;
	  end if;
	end do:
	imax:= i- 1;		

      #
      # compare results to expected results (test 2)
      #
        if (abs(evalf(data[imax,5]) - OptValue) > 0.001) then
	  error(
            "test 2 using interface restored by RestoreInstance failed"
          ); 
          return(false); 
        end if;

      #----------------------------------------------------------------------
      #
      # end test RestoreInstance
      #
      #----------------------------------------------------------------------

      #
      # remove temporary working directory
      #
        Aux:-FileOperations:-removeAllFilesInDir("tmp");
        rmdir("tmp");

      #
      # if we get here, all tests worked fine
      #
	return(true);

    end proc; #SimpleProblem1

