##############################################################################
#
# @path DDASPKSen/Tests/simpleProblem1WithAdifor.txt
#
# @brief Simple Test Problem 1, with adifor
#
# @revision
#    2010-08-27 exchanged ussage of ModelPack to Aux - dka
#    090109 changed directory names, so that they are unmistakable.
#      This has to be done to enable the removal of the folder
#      in the sheet in which it is called. Removal of the folder
#      at the end of this file does not work, since maple somehow
#      still has access to files in the folder. Error: 
#      .nfs000000000000365900000076': Device or resource busy. 
#      Only after restart one can remove the folder; tqu
#   021213 removed call to SubsStandardNotation as this is done
#     by CreateInstance
#   020725 (i) RunInt was renamed to DoIntStep; (ii) SetInitialTime,
#     SetEndTime were introduced after changes to SimpleWrapper, and
#     Init() call was changed accordingly; 
#   020417 added calls to SetVars and removed former 2nd argument=
#     initial value of Y from Init after changes of SimpleWrapper,
#     see revision history of SimpleWrapper:-Init; 
#   020322 see notes on in header of SimpleProblem1.txt
#   020319 (1) removed obsolete expressions lz, alfa from model; 
#     (2) removed SubsExplicitAEsIntoDAEsys, since DDASPK can now
#     translate the ExplicitAEs to fortran; 
#   020308 changed retVal[1] to retVal; changes of types in call to 
#     define_external imply that return value of instance of ddaspk
#     interface is number, not vector;
#   011126 added missing do in for loop 
#   011011 written by mkl and mmo 
#
##############################################################################

    simpleProblem1WithAdifor:= proc()
    
      local
        g, xRange, yRange, anNLP, StandardNLP, NPSOLproc, Objf, OptPoint,
        ExpectedObjf, ExpectedOptPoint, Inform, aDAESys,
        StandardModel, DDASPKproc, OptValue, T, Y, TOUT, data,
        i, retVal, imax, result1, result2;  

      ExpectedObjf := 1.00000;
      ExpectedOptPoint := [1.0, 1.0];

      if
        Aux:-FileOperations:-dirExists("SimpleProblem1WithAdiforTmp")
      then
        error("temporary directory ./SimpleProblem1WithAdiforTmp needed to run test already exists")
      else  
          mkdir("SimpleProblem1WithAdiforTmp")
      end if;

      aDAESys := Aux:-SystemClasses:-newDAESys();
      aDAESys["ODEs"] := [
        `vm'` = (1-phis)*rhomf/rhom-vm*qoutoverqin-theta*vm*(lp+ltrm)*Q-2*theta*MWm/rhom*f*kd*zi*If, 
        `vs'` = phis*rhosf/rhos-vs*qoutoverqin, 
        `zi'` = 1-theta*kd*zi-zi*qoutoverqin, 
        `y'` = rhof*Cpf/rho/Cp*(yf-yref)-rhof/rho*(y-yref)+negdeltaH/rho/Cp/Tc*theta*vm*lp*rhom/MWm*Q-theta*alpha*B/rho/Cp*(y-1)
      ];

      aDAESys["Parameters"] := [theta=200.4617, If=0.0316531, phis=0.6];
      
      aDAESys["DynVars"] := [vm, vs, zi, y];

      aDAESys["ExplicitAEs"] := [
        yf = 2/3, 
        yref = 5/9, 
        Tc = 45, 
        T = 45*y, 
        negdeltaH = 21000, 
        B = 1.4, 
        alpha = 50/3, 
        a3 = -.3495, 
        a2 = -6.7530, 
        a1 = -.4407, 
        f = .8, 
        R = 1.987, 
        MWs = 74.10, 
        MWm = 86.05, 
        phim = 1-phis, 
        rhosf = 777.2814025, 
        rhomf = 918.5720 , 
        rhomg = 892.0200, 
        rhof = rhomf*phim+rhosf*phis, 
        rhos = 74120/(91.878+.116*T), 
        rhop = 1211-.8496*T, 
        rhom = 958.4-1.3276*T, 
        rhofT = rhom*phim+rhos*phis, 
        vp = 1-vm-vs, 
        rho = rhom*vm+rhos*vs+rhop*vp, 
        kd = exp(ln(60)+34.99620124-30800/R/(T+273)), 
        xt = (rhomf*phim-vm*rhomg)/(rhomf*phim+MWm/MWs*phis*rhosf), 
        lt = exp(a1*xt+a2*xt^2+a3*xt^3), 
        ltrm = 417.3948000*exp(-7569./R/(T+273.)), 
        lp = 979.8*exp(-4869/R/(T+273))*15^(1/2), 
        Cpf = (.470*rhomf*phim+.716*rhosf*phis)/(rhomf*phim+rhosf*phis), 
        Cp = (.470*rhom*vm+.716*rhos*vs+rhop*vp*(.321425+.955e-3*T))/(rhom*vm+rhos*vs+rhop*vp), 
        Q = 2^(1/2)*(f*kd*zi*If/lt)^(1/2), 
        Rm = (lp+ltrm)*Q*rhom/MWm*vm+2*f*kd*zi*If, 
        qoutoverqin = rhof/rhofT+theta*MWm*Rm*(1/rhop-1/rhom) 
      ]; 

### obsolete equations in model: 
### obsolete        lz = ltrm*vm*rhomg/MWm+.104e-4*lp*vs*rhos/MWs, 
### obsolete        alfa = lp*vm*rhomg/MWm/((lp+ltrm)*vm*rhomg/MWm+.104e-4*lp*vs*rhos/MWs+lt*Q)


      aDAESys["AEs"] := [];
 
      aDAESys["AlgVars"] := [];
      
      Aux:-SystemClasses:-listOfErrorsInDAESys(aDAESys,'strict');
      
      DDASPKproc := DDASPKSen:-CreateInstance(aDAESys, "./SimpleProblem1WithAdiforTmp",[theta], 'adifor');
     #DDASPKproc := DDASPKSen:-CreateInstance(aDAESys, "./SimpleProblem1WithAdiforTmp",[], 'adifor');
      #
      # execute DDASPK, first test
      #
	OptValue := 1.25058770645712380;

	T := 0.0;
	Y := [0.1167175, 0.6434086, 0.9702816, 1.250588];
	TOUT := 10.0;

	data := array(1..1000, 1..5);
        DDASPKproc:-setVars(Y); 
        DDASPKproc:-setInitialTime(T);
        DDASPKproc:-setEndTime(TOUT);  
        DDASPKproc:-init();

	for i from 1 by 1 to 999 do
	  retVal := DDASPKproc:-doIntStep();
          Y := DDASPKproc:-getY();
          T := DDASPKproc:-getT();
          data[i,1] := T;
          data[i,2] := Y[1];
	  data[i,3] := Y[2];
	  data[i,4] := Y[3];
	  data[i,5] := Y[4];
	  if (retVal = 1) then 
	    next;
	  else
	    break;
	  end if;
	end do:
	imax:= i- 1;		

      #
      # compare results to expected results (test 1)
      #
	result1 := true;
        for i from 1 to imax do
          if (abs(evalf(data[i,5]) - OptValue) > 0.001) then
	    result1 := false;
	    print("Warning(Test1): y[%d]=%f  OptValue=%f",data[i,5],OptValue);
	  end if;
	end do;

      #
      # execute DDASPK, second test
      #
	T := 0.0;
	Y := [0.05, 0.6434086, 0.9702816, 1.250588];
	TOUT := 10.0;

	data := array(1..1000, 1..5);
        DDASPKproc:-setVars(Y); 
        DDASPKproc:-setInitialTime(T);
        DDASPKproc:-setEndTime(TOUT);  
        DDASPKproc:-init();

	for i from 1 by 1 to 999 do
	  retVal := DDASPKproc:-doIntStep();
          Y := DDASPKproc:-getY();
          T := DDASPKproc:-getT();
          data[i,1] := T;
          data[i,2] := Y[1];
	  data[i,3] := Y[2];
	  data[i,4] := Y[3];
	  data[i,5] := Y[4];
	  if (retVal = 1) then 
	    next;
	  else
	    break;
	  end if;
	end do:
	imax:= i- 1;		

      #
      # compare results to expected results (test 2)
      #
	result2 := true;
        if (abs(evalf(data[imax,5]) - OptValue) > 0.001) then
	  result2 := false;
	  print("Warning(Test2): y[%d]=%f  OptValue=%f",imx,OptValue);
        end if;

      #
      # close *.dll and *.so before removing .tmp
      #
        try
          dlclose("cwrap_ddaspk1.so");
          dlclose("mwrap_cwrapper_ddaspk.dll");
        catch:
        end try; 
      #DEBUG(); removal of tmp doesn't work properly	
      #
      # remove temporary working directory
      #
      #  system("rm -r tmp");
      #  ModelPack:-RemoveAllFilesInDir("tmp");
      #rmdir("tmp");
      #system("rm -r SimpleProblem1WithAdiforTmp");

	return(result1 and result2);

    end proc; #SimpleProblem1

