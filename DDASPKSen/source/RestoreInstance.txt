###############################################################################
#
# @path DDASPKSen/RestoreInstance.txt
#
# @param
#   NameOfDAEsys, name to which DAEsys found in WorkingDir is to be 
#     assigned in order for DAEsys to be accessible to calling procedure
#   WorkingDir, directory in which instance created by 
#     DDASPK:-CreateInstance is located
#   
# @return
#   instance of ddaspk interface, as a side effect, DAEsys is assigned
#     to name given in first input argument NameOfDAEsys
#
# @notes
#   (1) Call to define_external in CreateSharedObject must be exactely 
#   the same. Unfortunately, there is no simple way to reflect this in
#   the code, but consistency with CreateSharedObject must be ensured by 
#   hand. 
#
# @revision
#   2010-08-26 exchanged ussage of ModelPack to Aux - dka
#   080306 removed OperatingSystem dependent parts 	
#   040727 added SharedObjectEnd suffix in windows must be ".dll" -jge
#   040210 changes to include evaluation of sensitivities -jge
#   020319 (1) removed former first argument NameOfDAEsys::name, to which
#     DAEsystem recovered from file ./DAEsystem.m used to be assigned;
#     argument and assignment are obsolete since instance of DDASPK:-
#     SimpleWrapper returned by procedure RestoreInstance contains a
#     copy of DAEsystem which can be accessed via SimpleWrapper:-
#     GetSys(); (2) added 'unassign('DAEsystem')' at end of procedure
#     to avoid pollution of global namespace by tables; 
#   020305 written by mmo
#
###############################################################################
RestoreInstance:= proc(
  WorkingDir::string
  # optional arg SharedObjectName::string
)

  local ddaspk, SharedObjectName, SharedObjectEnd,
    FileName, SimpleWrapper, OldDir,
    NumParsInDAEsys,NumSenParsInDAESys;  

   SharedObjectEnd:=".so";

  #
  # save current dir and change to working dir
  #
    OldDir:= currentdir();
    currentdir(WorkingDir):

  #
  # recover DAE system from file
  #
  # remember object in file saved by CreateInstance is always called aDAESys,
  # file is always called DAEsystem.m
  #
    FileName:= "DAEsystem.m"; 

    if not
      Aux:-FileOperations:-fileExists(FileName)
    then
      currentdir(OldDir); 
      error(
        "in the requested dir %1, file named DAEsystem.m does not exist",
        WorkingDir
      ); 
    end if; 

    #
    # remember that table read by read-command causes assignment of 
    # 'DAEsystem' in global namespace; 'DAEsystem' is unassigned at
    # end of procedure
    #
      read("DAEsystem.m"); 

    NumParsInDAEsys:= nops(DAEsystem["Parameters"]);
    NumSenParsInDAESys:=nops(DAEsystem["Parameters"]);

  # 
  # treat optional 2nd argument
  #
    if 
      nargs>1
    then
      if not
        type(args[2], string)
      then
        error("optional third argument, SharedObjectName, must be a string");
      else
        SharedObjectName:= args[2];
      end if;
    else
      SharedObjectName:= cat("cwrap_ddaspk1",SharedObjectEnd); 
    end if;

  #
  # make sure shared object to be recovered really exists
  #
    if not
      Aux:-FileOperations:-fileExists(SharedObjectName)
    then
      currentdir(OldDir); 
      error(
        "in the requested dir %1, file named %2 does not exist",
        WorkingDir,
        SharedObjectName
      ); 
    end if; 

  #
  # warn if no shared object was requested explicitly
  #
    if not
      nargs>1
    then
      warning(
        "using default shared object cwrap_ddaspk1.so in %1",
        WorkingDir
      );
    end if; 

  # 
  # create interface to DDASPK
  #
  # note that call to define_external in CreateSharedObject must be exactely 
  # the same; unfortunately there is no simple way to reflect this in
  # the code, but consistency must be ensured by hand
  #
    ddaspk:= define_external(
      'cwrapper_ddaspk',
      NEQ::integer[4],                                #input
      T::REF(float[8]),                               #input
      Y::ARRAY(1..NEQ, float[8]),                     #input/output
      YPRIME::ARRAY(1..NEQ, float[8]),                #input/output
      tout::float[8],                                 #input
      INFO::ARRAY(1..30, integer[4]),                 #input
      RTOL::REF(float[8]),                            #input/output
      ATOL::REF(float[8]),                            #input/output
      IDID::REF(integer[4]),                          #output
      RWORK::ARRAY(1..LENW, float[8]),                #work
      LENW::integer[4],                               #input	
      IWORK::ARRAY(1..LENIW, integer[4]),             #work
      LENIW::integer[4],                              #input
      RPAR::ARRAY(1..NumParsInDAEsys, float[8]),      #input
      IPAR::integer[4],                               #input		
      SENPAR::ARRAY(1..NumSenParsInDAESys, float[8]), #input
      LIB= SharedObjectName,
      WRAPPER
    );

  #
  # substitute into wrapper to create instance of interface
  #
    SimpleWrapper:= SubsIntoSimpleWrapper(
      eval(DAEsystem),
      ddaspk
    );

  #
  # change to former dir
  #
    currentdir(OldDir); 

  #
  # unassign global variable DAEsystem
  #
    unassign('DAEsystem'); 

    RETURN(eval(SimpleWrapper)); 

end proc; # RestoreInstance


