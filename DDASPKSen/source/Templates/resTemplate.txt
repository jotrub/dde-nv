###------------------------------------------------------------------------
#
# @path DDASPKSen/Template/resTemplate.txt
#
# @brief template function ResTemplate, local to DDASPK;
# In CreateDDASPKexternalFunctions actual information from an NLP is 
# substituted into this template
#
# @revision
#   040205 introduced senpar for calculation of sensitivities 
#   020410 changed type of ipar from numeric to integer in declare; 
#   020319 ExplicitAEs of DAEsys do no longer have to be substituted: 
#     introduced local variable z which corresponds to ExplicitAEs,
#     length of z is declared in declare() section; note that a
#     dummy entry of z is introduced by constructor CreateExternalFunctions
#     in order to avoid to substitute an empty list (and a declare(
#     z= array(1..0, ...))) in the instance of this template; 
#   020318 changed explicit declaration of cj= array(1..1, numeric)
#     to declaration cj::numeric in parameter list of proc;
#   020311 changes to allow parameter passing from maple to ddaspk:
#     array rpar now has length= number of parameters in DAE system;
#     renamed rpar to par, since this is the name of DAE system
#     in standard notation; 
#   010510 written by mkl and mmo
#
###------------------------------------------------------------------------

    resTemplate:= proc(
      t::numeric,
      y,			# type declared below
      yprime,			# type declared below
      cj::numeric,              # type declared below, dummy
      delta,			# type declared below
      ires::integer,
      par,			# type declared below
      ipar,			# type declared below, dummy
      senpar			# type declared below 
    )

      local z;
      declare(
        y = array(
          1..(
              NumODEsToBeSubs+ NumAEsToBeSubs
            #  + (NumODEsToBeSubs+ NumAEsToBeSubs)*NumSenParsToBeSubs
             ),
          numeric
        ),
  
        yprime = array(
          1..(
              NumODEsToBeSubs+ NumAEsToBeSubs
            #  + (NumODEsToBeSubs+ NumAEsToBeSubs)*NumSenParsToBeSubs
              ),
          numeric
        ),

        delta = array(		
          1..(NumODEsToBeSubs+ NumAEsToBeSubs),
          numeric
        ),

	par = array(		# allows user to pass parameters 
          1..NumParsToBeSubs,
          numeric		#
        ),

	ipar = array(		# dummy parameter
          1..1,			#
          integer		#
        ),

	senpar = array(		# dummy parameter
          1..NumSenParsToBeSubs,  #
          numeric		#
        ),

        z= array(
          1..(NumExplicitAEsToBeSubs+ 1), # '+ ' accounts for dummy equation
          numeric                         # appended by CreateExternalFunctions
        )                                 # in order to avoid empty list
      );                                  # in assignment of ExplicitAEs below
  
      #
      # calculate ExplicitAEs
      #
        z:= ExplicitAEsToBeSubs; 

      #
      # calculate right hand sides of equations
      #
        delta := ResToBeSubs;
  
      RETURN();
    
    end proc: # ResTemplate

