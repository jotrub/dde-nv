###------------------------------------------------------------------------
#
# @path DDASPKSen/Template/jacTemplate.txt 
#  
# @brief template function JacTemplate, local to DDASPK;
# In CreateDDASPKexternalFunctions actual information from an NLP is 
# substituted into this template
#
# @revision
#   020311 changes to allow parameter passing from maple to ddaspk:
#     array rpar now has length= number of parameters in DAE system;
#     renamed rpar to par, since this is the name of DAE system
#     in standard notation; 
#   010510 written by mkl and mmo
#
###------------------------------------------------------------------------

    jacTemplate:= proc(
      t::numeric,
      y,			# type declared below
      yprime,			# type declared below
      pd,			# type declared below
      cj::numeric,		
      par,			# type declared below
      ipar,			# type declared below, dummy
      senpar,			# type declared below
      ijac::integer
    )
    
      declare(
        y = array(
          1..(NumODEsToBeSubs+ NumAEsToBeSubs),
          numeric
        ),

        yprime = array(
          1..(NumODEsToBeSubs+ NumAEsToBeSubs),
          numeric
        ),

        pd = array(
          1..(NumODEsToBeSubs+ NumAEsToBeSubs),
	  1..(NumDynVarsToBeSubs+ NumAlgVarsToBeSubs),
          numeric
        ),

	par = array(		# dummy parameter
          1..NumParsToBeSubs, 
          numeric		#
        ),

	ipar = array(		# dummy parameter
          1..1,			#
          numeric		#
        ),

	senpar = array(		# dummy parameter
          1..NumSenParsToBeSubs,#
          numeric		#
        )
	
       );

      #
      # calculate Jacobian matrix
      #
        pd := array(
	  1..(NumODEsToBeSubs+ NumAEsToBeSubs),
	  1..(NumDynVarsToBeSubs+ NumAlgVarsToBeSubs),
	  JacToBeSubs
	);

      RETURN();

    end proc;    # JacTemplate
