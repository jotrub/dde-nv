###############################################################################
#
# local procedure NPSOL/source/SubsIntoSimpleWrapper  
#
# revision history:
# 2008-04-07 added in options file derivative level =2 if cost function empty
# 2008-03-06 instead of anNLP[...] using anNLP["..."] by dka
# 030319 added input argument for scaling of parameters
# 021217 added local variable ParNames, necessary in method GetParameters;
#   (ii) added table NpsolOptions which saves entries for npsol_options.txt;
# 021210 added input argument ReqScaling
# 021107 added input argument WorkingDir
# 021104 written by mmo
#
###############################################################################
SubsIntoSimpleWrapper:= proc(
  anNLP::NLP,
  NpsolCwrapper::procedure,
  WorkingDir::string,
  ReqScaling,    # may be unassinged or of type module
  ReqScalingPars # may be unassinged or of type module
)

  local LowerBoundsVars, UpperBoundsVars, LowerBoundsConstr,
    UpperBoundsConstr, Amat, bVEC, NCNLN, NROWA, NROWJ, NROWR,
    LENIW, N, NCLIN, LENW, SimpleWrapperInstance,
    BL_swnpsol, BU_swnpsol, xvec_swnpsol, A_swnpsol, istate_swnpsol,
    c_swnpsol, cjac_swnpsol, clambda_swnpsol, grad_swnpsol, r_swnpsol,
    SimpleWrapperTemplate, RequiredVars, ParNames, NpsolOptions, 
    NumParams, Params, KnownNpsolOptions; 

    #----------------------------------------------------------------------
    #
    # extract N, NCLIN, NCNLN, NROWA, NROWJ, NROWR, LENIW, LENW, 
    # Amat, bVEC from NLP
    #
    #----------------------------------------------------------------------
      N:= nops(anNLP["Variables"]);

      NCLIN:= nops(anNLP["LinearConstraints"]); 

      #
      # Amat, bVEC of linear constraints
      #
        getLinConstrOfNLPforNPSOL(
          anNLP,
          Amat,
          bVEC
        ); 

      #
      # number of nonlinear constraints
      #
        NCNLN := nops(anNLP["Constraints"]);

      #
      # dimension of matrix which defines linear constraints
      #
        NROWA:= max(1, NCLIN);

      #
      # dimension of jacobian of nonlinear constraints
      #
        NROWJ:= max(1, NCNLN);

      #
      # array R is used for warmstarts only, here we only
      #   have to make sure it has the correct dimension
      #
        NROWR:= N;

      #
      # workspace dimension
      #
        LENIW:= 3* N+ NCLIN+ 2* NCNLN;

        if
          NCLIN= 0 and NCNLN= 0
        then
          LENW:= 20* N;

        elif
          NCNLN= 0 and NCNLN<>0
        then
          LENW:= 2*N^2+20*N+11*NCLIN;

        else #NCNLN<>0 and NCLIN<>0
          LENW:= 2* N**2+ N* NCLIN+ 2* N* NCNLN+ 20* N+ 11* NCLIN+ 21*NCNLN;
        end if;

      #
      # extract bounds on variables from anNLP[Variables]
      #   replace +/-infinity by +/-BigBoundNPSOL
      #
        getVarBoundsOfNLPforNPSOL(
          anNLP, 
          LowerBoundsVars, 
          UpperBoundsVars
        ); 

      #
      # extract bounds for constraints from NLP
      #
        getConstrBoundsOfNLPforNPSOL(
          anNLP, 
          bVEC, 
          LowerBoundsConstr,
          UpperBoundsConstr
        );

      #
      # set upper and lower bounds at time of instanciation
      #
        BL_swnpsol:= Vector(
          1..(N + NCLIN + NCNLN),
          map(evalf,
            [op(LowerBoundsVars),
             op(LowerBoundsConstr)
            ]
          ),
          datatype= float[8],
          order= C_order
        );
        BU_swnpsol:= Vector(
          1..(N + NCLIN + NCNLN),
          map(evalf,
            [op(UpperBoundsVars),
             op(UpperBoundsConstr)
            ]
          ),
          datatype= float[8],
          order= C_order
        );

      #
      # set matrix A of linear constraints at time of instanciation
      #
        A_swnpsol:= Matrix(
          1..NROWA, 1..N,
          map(evalf, Amat), 
          datatype=float[8], 
          order= C_order
        );

      #
      # set number of parameters and assign values
      #
        NumParams:= nops(anNLP["Parameters"]);
        Params:= Vector(1..NumParams, map(rhs, anNLP["Parameters"]), datatype = float[8]);

      #
      # prepare local module variables
      #          
        xvec_swnpsol:= Vector(1..N,
          datatype= float[8],
          order= C_order
        );  

        istate_swnpsol:= Vector(
          1..(N+ NCLIN+ NCNLN),
          datatype= integer[4]
        );

        c_swnpsol:= Vector(
          1..NCNLN,
          datatype= float[8]
        );

        cjac_swnpsol:= Matrix(
          1..NROWJ,
          1..N, 
          datatype= float[8],
          order= C_order
        );

        clambda_swnpsol:= Vector(
          1..N+ NCLIN+ NCNLN,
          datatype= float[8]
        );

        grad_swnpsol:= Vector(
          1..N,
          datatype= float[8]
        );

        r_swnpsol:= Matrix(
          1..NROWR,
          1..N,
          datatype= float[8],
          order= C_order
        );

  #------------------------------------------------------------
  #
  # create standard entries for npsol_options.txt
  #
  #------------------------------------------------------------
    KnownNpsolOptions:= {
      "major iteration limit",
      "minor iteration limit",
      "major print level",
      "minor print level",
      "verify level",
      "nonlinear feasibility",
      "linear feasibility",
      "optimality tolerance",
      "function precision",
      "derivative level"
    }; 

    NpsolOptions:= table():
    NpsolOptions["major iteration limit"]:= 999;
    NpsolOptions["major print level"]:= 20;
    
    if (anNLP["CostFunction"]=[])
    then NpsolOptions["derivative level"]:= 2;
    end if;

  #------------------------------------------------------------
  #
  # prepare names-based information needed by 
  # SimpleWrapperTemplate
  #
  #------------------------------------------------------------
    RequiredVars:= map(lhs, anNLP["Variables"]); 
    ParNames:= map(lhs, anNLP["Parameters"]); 

$include<SubsIntoSimpleWrapper/SimpleWrapperTemplate.txt>

  #
  # create standard options file with default entries set in
  # SubsIntoSimpleWrapper
  #
    SimpleWrapperTemplate:-createOptionsFile(); 
                              

  return(eval(SimpleWrapperTemplate)); 

end proc; 


