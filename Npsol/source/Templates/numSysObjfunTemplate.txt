###############################################################################
#
# @path NPSOL/source/Templates/numSysObjfunTemplate
#
# @revision
# 030317 written by mmo
#
###############################################################################
numSysObjfunTemplate:= proc(
  mode::integer,
  n::integer,
  x,                          # type declared below
  objf::float, 
  gradobj,                    # type declared below
  nstate::integer
)

  global par; # codegen will create common block
  local i1, i2, intone, g_x;     

  declare(
    par= array(
      1..(NumParsToBeSubs+1), # one dummy par is always introduced
      numeric                 # this allows to use the same 
    ),                        # template in case the NLP to be
                              # substituted does not have any
                              # parameters

    x= array(
      1..NumVarsToBeSubs,
      numeric
    ),

    g_x= array(
      1..NumVarsToBeSubs,
      1..NumVarsToBeSubs,
      numeric
    ),

    gradobj= array(
      1..NumVarsToBeSubs,
      numeric
    ),

    intone= integer,
    i1= integer,
    i2= integer
   
  ); 

  intone:= 1;

  #
  # setup seed matrix
  #
    for i1 from 1 to NumVarsToBeSubs do
      for i2 from 1 to NumVarsToBeSubs do
        g_x[i1, i2]:= 0.0;
      end do;
      g_x[i1, i1]:= 1.0;
    end do;

  #
  # call adifor-generated jacobian
  #
     DerivsObjectiveAEsNameToBeSubs(n, par, x, g_x, n, objf, gradobj, n, intone);

  #
  # call adifor error handler
  #
    ehrpt();

  return(); 

end proc:
