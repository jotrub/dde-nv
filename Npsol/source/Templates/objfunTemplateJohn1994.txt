    ###------------------------------------------------------------------------
    #
    # template function objfunTemplate, local to NPSOL
    #
    # below actual information from anNLP is substituted into
    # this template from cost function for system by John 1994
    #
    # revision history:
    #   2008-05-13 changed absolute errors to squars of absolute errors
    #   2008-04-28 written by dka
    ###------------------------------------------------------------------------
    objfunTemplate:= proc(
      mode::integer,
      n::integer,
      x, 
      objf::float,
      objgrad, 
      nstate::integer
    )

      global par;   
      local n_in_objfun, z, cs, cs0, cs2, i, erainv1, erainv2, erainv3, cainv1, cainv2, cainv3, wn1, wn2, wn3, pr, sumer, sumwn, score,
            cainv1a, cainv3a, cainv4a, cainv6a, cainv7a, cainv9a, erainv1a, erainv2a, erainv3a, erainv4a, erainv5a, erainv6a, 
            erainv7a, erainv8a, erainv9a, csa1, csa3, csa4, csa6, csa7, csa9, sv, sumer9, sumwna, wna1, wna2, wna3, wna4, 
            wna5, wna6, wna7, wna8, wna9; 
  
      declare(
        par= array(
          1..(NumParsToBeSubs+ 1), # see note concerning dummy
          numeric                  # parameter in ConfunTemplate above
        ),
  
        x= array(
          1..NumVarsToBeSubs,
          numeric
        ),

        objgrad= array(
          1..NumVarsToBeSubs,
          numeric
        ),

        n_in_objfun= integer,

        z= array(
          1..NumEAEsToBeSubs+ 1,
          numeric
        ),

       cs=array(1..50000,1..3,numeric),
       cs2=array(1..50000,1..3,numeric),
       cs0=array(1..50000,1..3,numeric),
       csa1=array(1..50000,1..3,numeric),
       csa3=array(1..50000,1..3,numeric),
       csa4=array(1..50000,1..3,numeric),
       csa6=array(1..50000,1..3,numeric),
       csa7=array(1..50000,1..3,numeric),
       csa9=array(1..50000,1..3,numeric),
       
       i= integer, 
       erainv1= float, 
       erainv2= float, 
       erainv3= float, 
       cainv1= float, 
       cainv2= float, 
       cainv3= float, 
       wn1= float, 
       wn2= float, 
       wn3= float, 
       pr= float, 
       sumer= float, 
       sumwn= float, 
       score= float,
       cainv1a= float, 
       cainv3a= float, 
       cainv4a= float, 
       cainv6a= float, 
       cainv7a= float, 
       cainv9a= float, 
       erainv1a= float, 
       erainv2a= float, 
       erainv3a= float, 
       erainv4a= float, 
       erainv5a= float, 
       erainv6a= float, 
       erainv7a= float, 
       erainv8a= float, 
       erainv9a= float,
       sv= float, 
       sumer9= float, 
       sumwna= float, 
       wna1= float, 
       wna2= float, 
       wna3= float, 
       wna4= float, 
       wna5= float, 
       wna6= float, 
       wna7= float, 
       wna8= float, 
       wna9= float
        
      ); 
  
      #
      # check for errors
      #
        n_in_objfun:= NumVarsToBeSubs;
        if
          not(n_in_objfun= n)
        then
          ERROR(`Error in confun: n differs from number of variables`);
          # note: do not change to Maple6 syntax of error command,
          #   codegen/fortran cannot deal with new syntax
          #   this is probably a bug in Maple6 - mmo
        end if; 
      
      #
      # calculate explicit algebraic equations
      #
        z:= [EAEsToBeSubs, 0]; 

      #
      # calculate objective function
      #

   
   cs[1,1]:=0;
   cs[1,2]:=0;
   cs[1,3]:=0;
   
   cs0[1,1]:=0;
   cs0[1,2]:=0;
   cs0[1,3]:=0;
   
   cs2[1,1]:=0;
   cs2[1,2]:=0;
   cs2[1,3]:=0; 
   
   csa1[1,1]:=0;
   csa1[1,2]:=0;
   csa1[1,3]:=0; 

   csa3[1,1]:=0;
   csa3[1,2]:=0;
   csa3[1,3]:=0;
   
   csa4[1,1]:=0;
   csa4[1,2]:=0;
   csa4[1,3]:=0;
   
   csa6[1,1]:=0;
   csa6[1,2]:=0;
   csa6[1,3]:=0;   
   
   csa7[1,1]:=0;
   csa7[1,2]:=0;
   csa7[1,3]:=0;

   csa9[1,1]:=0;
   csa9[1,2]:=0;
   csa9[1,3]:=0;  
   
   erainv1 := 0; 
   erainv2 := 0; 
   erainv3 := 0; 

   erainv1a:=0;
   erainv3a:=0;
   erainv4a:=0;
   erainv6a:=0;
   erainv7a:=0;
   erainv9a:=0;

   for i from 1 to 50000 do

   cs[i+1,1]:= cs[i,1]+(cs[i,2]+cs[i,3]+(par[1]-cs[i,3])/(1+x[1])+(par[3]-cs[i,1])/x[2]+(cs[i,3]*par[2]-cs[i,2])/x[3])/(1+par[2])-par[1];
   cs[i+1,2]:= par[2]*(cs[i,2]+cs[i,3]+(par[1]-cs[i,3])/(1+x[1])+(par[3]-cs[i,1])/x[2]+(cs[i,3]*par[2]-cs[i,2])/x[3])/(1+par[2]);
   cs[i+1,3]:= cs[i,3]+(par[1]-cs[i,3])/(1+x[1]);

   cainv2 := ((abs(cs[i,1]-par[3]))^2)*(i-1); 
   erainv2 := erainv2+cainv2;
   
   cs0[i+1,1]:= cs0[i, 1]+(cs0[i, 2]+cs0[i, 3]+(par[1]-cs0[i, 3])/(1+x[1])+(par[3]-cs0[i, 1])/x[2]+(.5*cs0[i, 3]*par[2]-cs0[i, 2])/x[3])/(1+.5*par[2])-par[1];
   cs0[i+1,2]:= .5*par[2]*(cs0[i, 2]+cs0[i, 3]+(par[1]-cs0[i, 3])/(1+x[1])+(par[3]-cs0[i, 1])/x[2]+(.5*cs0[i, 3]*par[2]-cs0[i, 2])/x[3])/(1+.5*par[2]);
   cs0[i+1,3]:= cs0[i, 3]+(par[1]-cs0[i, 3])/(1+x[1]);

   cainv1 := ((abs(cs0[i,1]-par[3]))^2)*(i-1); 
   erainv1 := erainv1+cainv1;
   
   cs2[i+1,1]:= cs2[i, 1]+(cs2[i, 2]+cs2[i, 3]+(par[1]-cs2[i, 3])/(1+x[1])+(par[3]-cs2[i, 1])/x[2]+(1.5*cs2[i, 3]*par[2]-cs2[i, 2])/x[3])/(1+1.5*par[2])-par[1];
   cs2[i+1,2]:= 1.5*par[2]*(cs2[i, 2]+cs2[i, 3]+(par[1]-cs2[i, 3])/(1+x[1])+(par[3]-cs2[i, 1])/x[2]+(1.5*cs2[i, 3]*par[2]-cs2[i, 2])/x[3])/(1+1.5*par[2]);
   cs2[i+1,3]:= cs2[i, 3]+(par[1]-cs2[i, 3])/(1+x[1]);

   cainv3 := ((abs(cs2[i,1]-par[3]))^2)*(i-1); 
   erainv3 := erainv3+cainv3;

   
   csa1[i+1,1]:=csa1[i, 1]+(csa1[i, 2]+csa1[i, 3]+(par[1]-csa1[i, 3])/(1+.75*x[1])+(par[3]-csa1[i, 1])/x[2]+(csa1[i, 3]*par[2]-csa1[i, 2])/x[3])/(1+par[2])-par[1];
   csa1[i+1,2]:= par[2]*(csa1[i, 2]+csa1[i, 3]+(par[1]-csa1[i, 3])/(1+.75*x[1])+(par[3]-csa1[i, 1])/x[2]+(csa1[i, 3]*par[2]-csa1[i, 2])/x[3])/(1+par[2]);
   csa1[i+1,3]:= csa1[i, 3]+(par[1]-csa1[i, 3])/(1+.75*x[1]);

   cainv1a := ((abs(csa1[i,1]-par[3]))^2)*(i-1); 
   erainv1a := erainv1a+cainv1a;

   
   csa3[i+1,1]:= csa3[i, 1]+(csa3[i, 2]+csa3[i, 3]+(par[1]-csa3[i, 3])/(1+1.25*x[1])+(par[3]-csa3[i, 1])/x[2]+(csa3[i, 3]*par[2]-csa3[i, 2])/x[3])/(1+par[2])-par[1];
   csa3[i+1,2]:= par[2]*(csa3[i, 2]+csa3[i, 3]+(par[1]-csa3[i, 3])/(1+1.25*x[1])+(par[3]-csa3[i, 1])/x[2]+(csa3[i, 3]*par[2]-csa3[i, 2])/x[3])/(1+par[2]);
   csa3[i+1,3]:= csa3[i, 3]+(par[1]-csa3[i, 3])/(1+1.25*x[1]);

   cainv3a := ((abs(csa3[i,1]-par[3]))^2)*(i-1); 
   erainv3a := erainv3a+cainv3a;

   
   csa4[i+1,1]:= csa4[i, 1]+(csa4[i, 2]+csa4[i, 3]+(par[1]-csa4[i, 3])/(1+x[1])+(par[3]-csa4[i, 1])/x[2]+(4/3)*(csa4[i, 3]*par[2]-csa4[i, 2])/x[3])/(1+par[2])-par[1];
   csa4[i+1,2]:= par[2]*(csa4[i, 2]+csa4[i, 3]+(par[1]-csa4[i, 3])/(1+x[1])+(par[3]-csa4[i, 1])/x[2]+(4/3)*(csa4[i, 3]*par[2]-csa4[i, 2])/x[3])/(1+par[2]);
   csa4[i+1,3]:= csa4[i, 3]+(par[1]-csa4[i, 3])/(1+x[1]);

   cainv4a := ((abs(csa4[i,1]-par[3]))^2)*(i-1); 
   erainv4a := erainv4a+cainv4a;

   
   csa6[i+1,1]:= csa6[i, 1]+(csa6[i, 2]+csa6[i, 3]+(par[1]-csa6[i, 3])/(1+x[1])+(par[3]-csa6[i, 1])/x[2]+(4/5)*(csa6[i, 3]*par[2]-csa6[i, 2])/x[3])/(1+par[2])-par[1];
   csa6[i+1,2]:= par[2]*(csa6[i, 2]+csa6[i, 3]+(par[1]-csa6[i, 3])/(1+x[1])+(par[3]-csa6[i, 1])/x[2]+(4/5)*(csa6[i, 3]*par[2]-csa6[i, 2])/x[3])/(1+par[2]);
   csa6[i+1,3]:= csa6[i, 3]+(par[1]-csa6[i, 3])/(1+x[1]);

   cainv6a := ((abs(csa6[i,1]-par[3]))^2)*(i-1); 
   erainv6a := erainv6a+cainv6a;

   
   csa7[i+1,1]:= csa7[i, 1]+(csa7[i, 2]+csa7[i, 3]+(par[1]-csa7[i, 3])/(1+x[1])+(4/3)*(par[3]-csa7[i, 1])/x[2]+(csa7[i, 3]*par[2]-csa7[i, 2])/x[3])/(1+par[2])-par[1];
   csa7[i+1,2]:= par[2]*(csa7[i, 2]+csa7[i, 3]+(par[1]-csa7[i, 3])/(1+x[1])+(4/3)*(par[3]-csa7[i, 1])/x[2]+(csa7[i, 3]*par[2]-csa7[i, 2])/x[3])/(1+par[2]);
   csa7[i+1,3]:= csa7[i, 3]+(par[1]-csa7[i, 3])/(1+x[1]);

   cainv7a := ((abs(csa7[i,1]-par[3]))^2)*(i-1); 
   erainv7a := erainv7a+cainv7a;

   
   csa9[i+1,1]:= csa9[i, 1]+(csa9[i, 2]+csa9[i, 3]+(par[1]-csa9[i, 3])/(1+x[1])+(4/5)*(par[3]-csa9[i, 1])/x[2]+(csa9[i, 3]*par[2]-csa9[i, 2])/x[3])/(1+par[2])-par[1];
   csa9[i+1,2]:=par[2]*(csa9[i, 2]+csa9[i, 3]+(par[1]-csa9[i, 3])/(1+x[1])+(4/5)*(par[3]-csa9[i, 1])/x[2]+(csa9[i, 3]*par[2]-csa9[i, 2])/x[3])/(1+par[2]);
   csa9[i+1,3]:= csa9[i, 3]+(par[1]-csa9[i, 3])/(1+x[1]);

   cainv9a := ((abs(csa9[i,1]-par[3]))^2)*(i-1); 
   erainv9a := erainv9a+cainv9a;

   end do;


   wn2:=((par[2]*x[1]+par[2]*x[2]+(par[2]^2+x[2])/x[3])^2*(x[2]+par[2]*x[2]/x[3]+x[1])/(par[2]*x[2]*x[1])+(x[1]+x[2]+par[2]+par[2]*x[2]/x[3])^2-2*par[2]*x[1]-par[2]*x[2]-2*par[2]^2*x[2]/x[3]+x[1]*x[2]+par[2]*x[2]*x[1]/x[3])/((par[2]*x[2]+x[1]*x[2]+par[2]*x[2]*x[1]/x[3])*(x[2]+par[2]*x[2]/x[3]+x[1])-par[2]*x[2]*x[1]);

   wn1:=(2*((1/2)*par[2]*x[1]+(1/2)*par[2]*x[2]+((1/4)*par[2]^2+x[2])/x[3])^2*(x[2]+(1/2)*par[2]*x[2]/x[3]+x[1])/(par[2]*x[2]*x[1])+(x[1]+x[2]+(1/2)*par[2]+(1/2)*par[2]*x[2]/x[3])^2-par[2]*x[1]-(1/2)*par[2]*x[2]-(1/2)*par[2]^2*x[2]/x[3]+x[1]*x[2]+(1/2)*par[2]*x[2]*x[1]/x[3])/(((1/2)*par[2]*x[2]+x[1]*x[2]+(1/2)*par[2]*x[2]*x[1]/x[3])*(x[2]+(1/2)*par[2]*x[2]/x[3]+x[1])-(1/2)*par[2]*x[2]*x[1]);

   wn3:=((2/3)*((3/2)*par[2]*x[1]+(3/2)*par[2]*x[2]+((9/4)*par[2]^2+x[2])/x[3])^2*(x[2]+(3/2)*par[2]*x[2]/x[3]+x[1])/(par[2]*x[2]*x[1])+(x[1]+x[2]+(3/2)*par[2]+(3/2)*par[2]*x[2]/x[3])^2-3*par[2]*x[1]-(3/2)*par[2]*x[2]-(9/2)*par[2]^2*x[2]/x[3]+x[1]*x[2]+(3/2)*par[2]*x[2]*x[1]/x[3])/(((3/2)*par[2]*x[2]+x[1]*x[2]+(3/2)*par[2]*x[2]*x[1]/x[3])*(x[2]+(3/2)*par[2]*x[2]/x[3]+x[1])-(3/2)*par[2]*x[2]*x[1]);

   sumer:= erainv1+erainv2+erainv3;
   sumwn:=wn1+wn2+wn3;
   pr:=((((erainv1-sumer)/3)^2+((wn1-sumwn)/3)^2)^(1/2)+(((erainv2-sumer)/3)^2+((wn2-sumwn)/3)^2)^(1/2)+(((erainv3-sumer)/3)^2+((wn3-sumwn)/3)^2)^(1/2))/3;
   
   erainv2a:=erainv2;
   erainv5a:=erainv2;
   erainv8a:=erainv2;

   wna2:=wn2;
   wna5:=wn2;
   wna8:=wn2;
   
   wna1:=((4/3)*((3/4)*par[2]*x[1]+par[2]*x[2]+(par[2]^2+x[2])/x[3])^2*(x[2]+par[2]*x[2]/x[3]+(3/4)*x[1])/(par[2]*x[2]*x[1])+((3/4)*x[1]+x[2]+par[2]+par[2]*x[2]/x[3])^2-(3/2)*par[2]*x[1]-par[2]*x[2]-2*par[2]^2*x[2]/x[3]+(3/4)*x[1]*x[2]+(3/4)*par[2]*x[2]*x[1]/x[3])/((par[2]*x[2]+(3/4)*x[1]*x[2]+(3/4)*par[2]*x[2]*x[1]/x[3])*(x[2]+par[2]*x[2]/x[3]+(3/4)*x[1])-(3/4)*par[2]*x[2]*x[1]);

   wna3:=((4/5)*((5/4)*par[2]*x[1]+par[2]*x[2]+(par[2]^2+x[2])/x[3])^2*(x[2]+par[2]*x[2]/x[3]+(5/4)*x[1])/(par[2]*x[2]*x[1])+((5/4)*x[1]+x[2]+par[2]+par[2]*x[2]/x[3])^2-(5/2)*par[2]*x[1]-par[2]*x[2]-2*par[2]^2*x[2]/x[3]+(5/4)*x[1]*x[2]+(5/4)*par[2]*x[2]*x[1]/x[3])/((par[2]*x[2]+(5/4)*x[1]*x[2]+(5/4)*par[2]*x[2]*x[1]/x[3])*(x[2]+par[2]*x[2]/x[3]+(5/4)*x[1])-(5/4)*par[2]*x[2]*x[1]);

   wna4:=((par[2]*x[1]+par[2]*x[2]+(4/3)*(par[2]^2+x[2])/x[3])^2*(x[2]+(4/3)*par[2]*x[2]/x[3]+x[1])/(par[2]*x[2]*x[1])+(x[1]+x[2]+par[2]+(4/3)*par[2]*x[2]/x[3])^2-2*par[2]*x[1]-par[2]*x[2]-(8/3)*par[2]^2*x[2]/x[3]+x[1]*x[2]+(4/3)*par[2]*x[2]*x[1]/x[3])/((par[2]*x[2]+x[1]*x[2]+(4/3)*par[2]*x[2]*x[1]/x[3])*(x[2]+(4/3)*par[2]*x[2]/x[3]+x[1])-par[2]*x[2]*x[1]);
   
   wna6:=((par[2]*x[1]+par[2]*x[2]+(4/5)*(par[2]^2+x[2])/x[3])^2*(x[2]+(4/5)*par[2]*x[2]/x[3]+x[1])/(par[2]*x[2]*x[1])+(x[1]+x[2]+par[2]+(4/5)*par[2]*x[2]/x[3])^2-2*par[2]*x[1]-par[2]*x[2]-(8/5)*par[2]^2*x[2]/x[3]+x[1]*x[2]+(4/5)*par[2]*x[2]*x[1]/x[3])/((par[2]*x[2]+x[1]*x[2]+(4/5)*par[2]*x[2]*x[1]/x[3])*(x[2]+(4/5)*par[2]*x[2]/x[3]+x[1])-par[2]*x[2]*x[1]);

   wna7:=((4/3)*(par[2]*x[1]+(3/4)*par[2]*x[2]+(par[2]^2+(3/4)*x[2])/x[3])^2*((3/4)*x[2]+(3/4)*par[2]*x[2]/x[3]+x[1])/(par[2]*x[2]*x[1])+(x[1]+(3/4)*x[2]+par[2]+(3/4)*par[2]*x[2]/x[3])^2-2*par[2]*x[1]-(3/4)*par[2]*x[2]-(3/2)*par[2]^2*x[2]/x[3]+(3/4)*x[1]*x[2]+(3/4)*par[2]*x[2]*x[1]/x[3])/(((3/4)*par[2]*x[2]+(3/4)*x[1]*x[2]+(3/4)*par[2]*x[2]*x[1]/x[3])*((3/4)*x[2]+(3/4)*par[2]*x[2]/x[3]+x[1])-(3/4)*par[2]*x[2]*x[1]);
   
   wna9:=((4/5)*(par[2]*x[1]+(5/4)*par[2]*x[2]+(par[2]^2+(5/4)*x[2])/x[3])^2*((5/4)*x[2]+(5/4)*par[2]*x[2]/x[3]+x[1])/(par[2]*x[2]*x[1])+(x[1]+(5/4)*x[2]+par[2]+(5/4)*par[2]*x[2]/x[3])^2-2*par[2]*x[1]-(5/4)*par[2]*x[2]-(5/2)*par[2]^2*x[2]/x[3]+(5/4)*x[1]*x[2]+(5/4)*par[2]*x[2]*x[1]/x[3])/(((5/4)*par[2]*x[2]+(5/4)*x[1]*x[2]+(5/4)*par[2]*x[2]*x[1]/x[3])*((5/4)*x[2]+(5/4)*par[2]*x[2]/x[3]+x[1])-(5/4)*par[2]*x[2]*x[1]);
   
   sumer9:=erainv1a+erainv2a+erainv3a+erainv4a+erainv5a+erainv6a+erainv7a+erainv8a+erainv9a;
   sumwna:=wna1+wna2+wna3+wna4+wna5+wna6+wna7+wna8+wna9;
   
   sv:=((((erainv1a-sumer9)/9)^2+((wna1-sumwna)/9)^2)^(1/2)+(((erainv2a-sumer9)/9)^2+((wna2-sumwna)/9)^2)^(1/2)+(((erainv3a-sumer9)/9)^2+((wna3-sumwna)/9)^2)^(1/2)+(((erainv4a-sumer9)/9)^2+((wna4-sumwna)/9)^2)^(1/2)+(((erainv5a-sumer9)/9)^2+((wna5-sumwna)/9)^2)^(1/2)+(((erainv6a-sumer9)/9)^2+((wna6-sumwna)/9)^2)^(1/2)+(((erainv7a-sumer9)/9)^2+((wna7-sumwna)/9)^2)^(1/2)+(((erainv8a-sumer9)/9)^2+((wna8-sumwna)/9)^2)^(1/2)+(((erainv9a-sumer9)/9)^2+((wna9-sumwna)/9)^2)^(1/2))/9;


   score := (erainv2^2+wn2^2+pr^2+sv^2);

        objf:= score;
  
      #
      # calculate gradient of objective function
      #
      # objgrad:= GradToBeSubs;
              
      RETURN();
  
    end proc: #objfunTemplate
