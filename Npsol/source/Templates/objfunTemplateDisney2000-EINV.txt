    ###------------------------------------------------------------------------
    #
    # template function objfunTemplate, local to NPSOL
    #
    # below actual information from anNLP is substituted into
    # this template from cost function for system by John 1994
    # cost funstion to minimize error in inventory and noise of bandwidth
    # without adding selectivity vector and product robustness vector 
    #
    # revision history:
    #   2008-05-22 written by dka
    ###------------------------------------------------------------------------
    objfunTemplate:= proc(
      mode::integer,
      n::integer,
      x, 
      objf::float,
      objgrad, 
      nstate::integer
    )

      global par;   
      local n_in_objfun, z, cs, i, erainv, cainv, wn, score; 
  
      declare(
        par= array(
          1..(NumParsToBeSubs+ 1), # see note concerning dummy
          numeric                  # parameter in ConfunTemplate above
        ),
  
        x= array(
          1..NumVarsToBeSubs,
          numeric
        ),

        objgrad= array(
          1..NumVarsToBeSubs,
          numeric
        ),

        n_in_objfun= integer,

        z= array(
          1..NumEAEsToBeSubs+ 1,
          numeric
        ),

       cs=array(1..10000,1..3,numeric),

       
       i= integer, 
       erainv= float, 
       cainv= float, 
       wn= float, 
       score= float
        
      ); 
  
      #
      # check for errors
      #
        n_in_objfun:= NumVarsToBeSubs;
        if
          not(n_in_objfun= n)
        then
          ERROR(`Error in confun: n differs from number of variables`);
          # note: do not change to Maple6 syntax of error command,
          #   codegen/fortran cannot deal with new syntax
          #   this is probably a bug in Maple6 - mmo
        end if; 
      
      #
      # calculate explicit algebraic equations
      #
        z:= [EAEsToBeSubs, 0]; 

      #
      # calculate objective function
      #

   
   cs[1,1]:=1000;
   cs[1,2]:=800;
   cs[1,3]:=100;
   
   
   erainv := 0; 


   for i from 1 to 10000 do

   cs[i+1,1]:= cs[i,1]+(cs[i,2]+cs[i,3]+(par[1]-cs[i,3])/(1+x[1])+(par[3]-cs[i,1])/x[2]+(cs[i,3]*par[2]-cs[i,2])/x[3])/(1+par[2])-par[1];
   cs[i+1,2]:= par[2]*(cs[i,2]+cs[i,3]+(par[1]-cs[i,3])/(1+x[1])+(par[3]-cs[i,1])/x[2]+(cs[i,3]*par[2]-cs[i,2])/x[3])/(1+par[2]);
   cs[i+1,3]:= cs[i,3]+(par[1]-cs[i,3])/(1+x[1]);

   cainv := ((abs(cs[i,1]-par[3]))^2)*(i-1); 
   erainv := erainv+cainv;

   end do;


   score := erainv;

        objf:= score;
  
      #
      # calculate gradient of objective function
      #
      # objgrad:= GradToBeSubs;
              
      RETURN();
  
    end proc: #objfunTemplate
