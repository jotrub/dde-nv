###############################################################################
#
# NPSOL/source/CreateNumSysWrappers/numSysConfunTemplate.txt
#
# revision history:
# 030317 written by mmo
#
###############################################################################
numSysConfunTemplate:= proc(
  mode::integer,
  ncnln::integer,
  n::integer,
  nrowj::integer,
  needc::integer,
  x,                          # type declared below
  c,                          # type declared below
  cjac,                       # type declared below
  nstate::integer
)

  global par; # codegen will create common block
  local i1, i2, 
    g_x,
    g_c;

  declare(
    par= array(
      1..(NumParsToBeSubs+1), # one dummy par is always introduced
      numeric                 # this allows to use the same 
    ),                        # template in case the NLP to be
                              # substituted does not have any
                              # parameters
 
    x= array(
      1..NumVarsToBeSubs,
      numeric
    ),
   
    c= array(
      1..NumConsToBeSubs,
      numeric
    ),
   
    cjac= array(
      1..NumConsToBeSubs,
      1..NumVarsToBeSubs,
      numeric
    ),
        g_x= array(
      1..NumVarsToBeSubs,
      1..NumVarsToBeSubs,
      numeric
    ),
           g_c= array(
      1..NumVarsToBeSubs,
      1..NumConsToBeSubs,
      numeric
    ),
         i1= integer,
    i2= integer
  );

  #
  # settup seed matrix
  #
     for i1 from 1 to NumVarsToBeSubs do
       for i2 from 1 to NumVarsToBeSubs do
         g_x[i1, i2]:= 0.0;
       end do;
       g_x[i1, i1]:= 1.0;
     end do;
 
  #
  # call adifor-generated jacobian
  #
    DerivsConstraintsAEsNameToBeSubs(n, par, x, g_x, n, c, g_c, n);

  #
  # call adifor error handler
  #
    ehrpt();

  #
  # transpose jacobian
  #
     for i1 from 1 to NumConsToBeSubs do
       for i2 from 1 to NumVarsToBeSubs do
         cjac[i1, i2]:= g_c[i2, i1];
       end do;
     end do; 
 
  return(); 
 
end proc:
