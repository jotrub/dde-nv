  ###====================================================================
  #
  # exported procedure NPSOL/source/CreateInstance 
  #
  # input: anNLP, Non Linear Program which contains
  #          constraints of optimization and CostFunction
  #        WorkingDir, directory into which npsol files will be written
  #          when compiling and at runtime
  #
  # output: procedure which starts npsol and returns results of
  #           optimization run, description of proc see
  #           local proc template SimpleWrapperTemplate in
  #           procedure CreateInstance
  #
  # output to WorkingDir: several files, most importantly
  #         npsolconfun.f, contains fortran subroutine of constraints
  #           and their jacobian
  #         npsolobjfun.f, contains fortran subroutine of objective
  #           and its gradient
  #         cwrap_npsol.so, shared object which comprises npsol
  #           subroutines and problem dependent subroutines from
  #           npsolconfun.f, npsolobjfun.f
  #
  # notes: (i) as opposed to PITCON, DDASPK, ranges are not saved
  #   to disk, since NLP as saved to disk already contains ranges in
  #   its list [Variables]; 
  # (ii) As opposed to PITCON, DDASPK, SubsIntoSimpleWrapper receives
  #   scaled system. Necessary, since NPSOL:-SubsIntoSimpleWrapper
  #   extracts information such as variable/constraints bounds from
  #   NLP which must be NLP for which calculations are run= scaled
  #   NLP. 
  #
  # revision history:
  #   030401 added dummy argument to call to SubsIntoSimpleWrapper
  #   030115 added try..end try around SubsIntoSimpleWrapper and
  #     CreateExternalFunctions; 
  #   030115 added try..end try around CreateSharedObject to make
  #     sure to save NLP.m to disk anyhow
  #   021216 made option adifor default and added warning about
  #     this; 
  #   021210 added optional argument 'scale' and corresponding
  #     creation and use of instance of ModelPack:-LA:-Scale
  #   021107 added saving of NLP for RestoreInstance
  #   021107 added input argument to SubsIntoSimpleWrapper
  #   010503: added call to PrepareDirFor which creates
  #     WorkingDir automatically if it does not exist, and which
  #     throws an error if WorkingDir exists and "mwrap*" exists in
  #     it; 
  #   010424: removed check for existence of cost function; if no
  #     cost function is given in anNLP, zero is substituted;
  #     if bounds on variables are +/-infinity, they are replaced
  #     by +/-BigBoundNPSOL - mmo
  #   0012xx: written by mmo
  #
  ###=====================================================================
  CreateInstance:=proc(
    anNLP::NLP,
    WorkingDir::string
    # optional argument 'adifor'
  )

    local npsol, StandardScaledNLP, ScaledNLPwithSubstitutions, 
      NpsolInstance, OptArgs, Scaling, ScaledNLP, Ranges; 
      # note that UseAdifor must not be local variable since local
      # variable of module NPSOL

    #----------------------------------------------------------------------
    # 
    # check for common errors, 
    # other preparations: treat option adifor, prepare directory,
    #   substitute standard notation, treat option scale
    #
    #----------------------------------------------------------------------
      #
      # extract optional arguments
      #
        if 
          nargs>2
        then 
          OptArgs:= {args[3..-1]};
        else
          OptArgs:= {}; 
        end if; 

      #
      # check for optional request of adifor
      #
        UseAdifor:= false; 
        if 
          member('adifor', OptArgs)
        then
          printf("option adifor was requested\n"); 
          UseAdifor:= true;
        else
          printf("option adifor was not requested\n"); 
        end if;
  
      #
      # prepare working dir
      # refuse to work if file mwrap* already exists
      #
        if not
          prepareDir(
            WorkingDir
          )
        then
          error(
            "in working dir, %1, a maple wrapper file named "
            "mwrap* already exists", WorkingDir
          );
        end if; 

      # 
      # treat optional scaling 
      #
        if
          member('scale', OptArgs)
        then
	  WARNING("SubsIntoSimpleWrapper has been changed with respect
to the modules Scaling it receives");
          printf("option scale was requested\n"); 
          #
          # create instance of Scale and substitute into Sys
          #
            Scaling:= Aux:-NLP:-Scale:-CreateInstanceForNLP(
              anNLP
            ); 
            ScaledNLP:= Scaling:-subsIntoNLP(anNLP); 
            StandardScaledNLP:= Aux:-NLP:-subsStandardNotationIntoNLP(
              ScaledNLP
            );
        else
          #
          # call instance StandardScaledNLP anyhow even though not scaled
          #
          printf("option scale was not requested\n"); 
          StandardScaledNLP:=  Aux:-NLP:-subsStandardNotationIntoNLP(
            anNLP
          );
        end if; # option scaling requested

      #
      # substitute standard notation
      #
        if
          member('scale', OptArgs)
        then
          StandardScaledNLP:=  Aux:-NLP:-subsStandardNotationIntoNLP(
            ScaledNLP
          );
        else
          StandardScaledNLP:=  Aux:-NLP:-subsStandardNotationIntoNLP(
            anNLP
          );
        end if; # option scaling requested

    #----------------------------------------------------------------------
    #
    # prepare interface to NPSOL, part 1
    #
    # create maple procs npsolconfun, npsolobjfun which encapsulate
    #   problem dependent non-linear constraints and objective function,
    #   resp.
    #   
    #----------------------------------------------------------------------
      try
        createExternalFunctions(
          StandardScaledNLP,
          'npsolconfun',
          'npsolobjfun'
        );
      catch:
	printf("CreateExternalFunctions failed, \n");
        printf("  error thrown was %q\n", lastexception);
        printf("  attempting to continue CreateInstance\n");
      end try; 


    #----------------------------------------------------------------------
    #
    # prepare interface to NPSOL, part 2
    #
    # export maple procs npsolconfun, npsolobjfun to fortran files
    #   npsolconfun.f, npsolobjfun.f, resp. in WorkingDir
    # compile them
    # link them with NPSOL fortran source code and c-wrapper 
    # create maple proc npsol which provides interface to NPSOL
    #
    #----------------------------------------------------------------------
      try
        npsol:= createSharedObject(
          npsolconfun,
          npsolobjfun,
          WorkingDir,
          StandardScaledNLP
        );
      catch:
	printf("CreateSharedObject failed, \n");
        printf("  error thrown was %q\n", lastexception);
        printf("  attempting to continue CreateInstance\n");
      end try; 

    #------------------------------------------------------------
    #
    # prepare interface to NPSOL, part 3
    #
    # create instance of simple wrapper
    #
    #------------------------------------------------------------
      printf("creating instance of interface\n"); 
      #
      # get back to physical names but save list of substitutions needed
      # to go to standard names
      #
      # as opposed to PITCON, DDASPK, SubsIntoSimpleWrapper receives
      #   *scaled* system. See notes (ii) above. 
      #
        if
          member('scale', OptArgs)
        then
          ScaledNLPwithSubstitutions:= copy(ScaledNLP); # ScaledNLP
          ScaledNLPwithSubstitutions["Substitutions"]:= map(
            rhs= lhs,
            StandardScaledNLP["Substitutions"]
          ); 
        else
          ScaledNLPwithSubstitutions:= copy(anNLP);     # anNLP
          ScaledNLPwithSubstitutions["Substitutions"]:= map(
            rhs= lhs,
            StandardScaledNLP["Substitutions"]
          ); 
        end if; # option scaling requested

      try:
        NpsolInstance:= SubsIntoSimpleWrapper(
          ScaledNLPwithSubstitutions, 
          npsol,
          WorkingDir,
          Scaling,
          'ScalingPars'
	);
      catch:
	printf("SubsIntoSimpleWrapper failed, \n");
        printf("  error thrown was %q\n", lastexception);
        printf("  attempting to continue CreateInstance\n");      
      end try;
      

    #------------------------------------------------------------
    #
    # save information needed by RestoreInstance to disk
    #
    #------------------------------------------------------------
      save(
        ScaledNLPwithSubstitutions,
        cat(WorkingDir, "/NLP.m")
      ); 

      #
      # if scaling was requested, save ranges which are needed
      # for construction to disk for reuse in RestoreInstance
      #
        if
          member('scale', OptArgs)
        then
          Ranges:= anNLP["Variables"];
          save(
            Ranges,
            cat(WorkingDir, "/Ranges.m")
          );  
        end if; 

    RETURN(eval(NpsolInstance));

  end proc; #CreateInstance






