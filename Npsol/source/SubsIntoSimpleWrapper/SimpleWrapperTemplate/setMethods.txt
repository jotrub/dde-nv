setIstate:= proc(
  ReqVal::list(integer)
)
  
  istate_swnpsol:= Vector(
    1..(N+ NCLIN+ NCNLN), 
    ReqVal,
    datatype= integer[4],
    order= C_order
  );

  return();

end proc; 

setCjac:= proc(
  ReqVal::matrix
)
  cjac_swnpsol:= Matrix(
    1..NROWJ, 1..N, 
    map(evalf, ReqVal),
    datatype= float[8],
    order= Fortran_order
  );

  return();

end proc; 

setClambda:= proc(
  ReqVal::list(EvalsToFloat)
)

  clambda_swnpsol:= Vector(
    1..(N+ NCLIN+ NCNLN), 
    map(evalf, ReqVal),
    datatype= float[8],
    order= C_order
  );  

  return();

end proc; 

setR:= proc(
  ReqVal::matrix
)

  r_swnpsol:= Matrix(
    1..NROWR, 1..N, 
    map(evalf, ReqVal),
    datatype= float[8],
    order= Fortran_order
  );   

  return();

end proc; 

#------------------------------------------------------------
#
# local procedure setBL
#
# sets bounds in interface to current values of
# LowerBoundsVars, LowerBoundsConstr
#
#------------------------------------------------------------
setBL:= proc()
  
  BL_swnpsol:= Vector(
    1..(N + NCLIN + NCNLN),
    map(evalf,
      [op(LowerBoundsVars),
       op(LowerBoundsConstr)
      ]
    ),
    datatype= float[8],
    order= C_order
  );

  return();

end proc; 
  
#------------------------------------------------------------
#
# local procedure setBU
#
# sets bounds in interface to current values of
# UpperBoundsVars, UpperBoundsConstr
#
#------------------------------------------------------------
setBU:= proc()

  BU_swnpsol:= Vector(
    1..(N + NCLIN + NCNLN),
    map(evalf,
      [op(UpperBoundsVars),
       op(UpperBoundsConstr)
      ]
    ),
    datatype= float[8],
    order= C_order
  );

  return();

end proc; 

setAmat:= proc(
  ReqVal::matrix
)
  
  A_swnpsol:= Matrix(
    1..NROWA, 1..N,
    map(evalf, ReqVal), 
    datatype=float[8], 
    order= Fortran_order
  );

  return();

end proc; 

#------------------------------------------------------------
#
# exported NPSOL/source/Templates/SimpleWrapperTemplate/
#   setLowerBoundsConstr
#
#------------------------------------------------------------
setLowerBoundsConstr:= proc(
  ReqVal::list(EvalsToFloat)
)

  #
  # make sure ReqVal has correct length
  #
    if not
      nops(ReqVal)= (NCLIN+ NCNLN)
    then
      error("expecting %1 values for lower bounds of variables", N);
    end if; 

  #
  # set local module variable
  #
    LowerBoundsConstr:= ReqVal;

  #
  # set BL in interface to current value of 
  # LowerBoundsVars, LowerBoundsConstr
  #
    setBL();

  return();

end proc; 

#------------------------------------------------------------
#
# exported NPSOL/source/Templates/SimpleWrapperTemplate/
#   setUpperBoundsConstr
#
#------------------------------------------------------------
setUpperBoundsConstr:= proc(
  ReqVal::list(EvalsToFloat)
)

  #
  # make sure ReqVal has correct length
  #
    if not
      nops(ReqVal)= (NCLIN+ NCNLN)
    then
      error("expecting %1 values for lower bounds of variables", N);
    end if; 

  #
  # set local module variable
  #
    UpperBoundsConstr:= ReqVal;

  #
  # set BU in interface to current value of 
  # UpperBoundsVars, UpperBoundsConstr
  #
    setBU();

  return();

end proc; 

#------------------------------------------------------------
#
# exported NPSOL/source/Templates/SimpleWrapperTemplate/
#   setLowerBoundsVars
#
#------------------------------------------------------------
setLowerBoundsVars:= proc(
  ReqVal::list(EvalsToFloat)
)

  #
  # make sure ReqVal has correct length
  #
    if not
      nops(ReqVal)= N
    then
      error("expecting %1 values for lower bounds of variables", N);
    end if; 

  #
  # set local module variable
  #
    LowerBoundsVars:= ReqVal;

  #
  # set BL in interface to current value of 
  # LowerBoundsVars, LowerBoundsConstr
  #
    setBL();

  return();

end proc; 

#------------------------------------------------------------
#
# exported NPSOL/source/Templates/SimpleWrapperTemplate/
#   setUpperBoundsVars
#
#------------------------------------------------------------
setUpperBoundsVars:= proc(
  ReqVal::list(EvalsToFloat)
)

  #
  # make sure ReqVal has correct length
  #
    if not
      nops(ReqVal)= N
    then
      error("expecting %1 values for lower bounds of variables", N);
    end if; 

  #
  # set local module variable
  #
    UpperBoundsVars:= ReqVal;

  #
  # set BU in interface to current value of 
  # UpperBoundsVars, UpperBoundsConstr
  #
    setBU();

  return();

end proc; 


