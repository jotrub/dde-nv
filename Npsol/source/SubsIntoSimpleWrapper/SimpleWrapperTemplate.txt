###--------------------------------------------------------------------
#
# NPSOL:-Templates:-SimpleWrapperTemplate
#
# note:
#   options SetLowerBoundsCons and SetUpperBoundsConstr are not
#     npsol options. If given,
#     they will overwrite the values extracted from NLP by
#     CreateInstance at creation of the instance of
#     SimpleWrapperNPSOL 
#
# revision history:
#   030319 added ScalingPars, ScalingParsOn; 
#   030108 added new methods
#   021217 added SetParameters, CreateOptionsFile, SetOption, GetOptions
#   021216 added CreateDebugFiles
#   021212 added GetSys, note that as opposed to use in DDASPK, PITCON
#     etc., GetSys here returns rescaled system if scale was requested
#     at time of generation; 
#   021210 added receiving of Scaling, added GetBL, GetBU; removed
#     GetOptPoint, as same function is covered by GetXVEC; 
#   021209 added GetVariables, GetParameters
#   021104 added SetVariables
#   021101 turned procedure with options into module with methods
#   021101 added local variable declarations for c_swnpsol, grad_swnpsol
#   020124 changes due to update to Maple7:
#     (1) added assignments of variables used in call to 
#     interface created by call to define_external in
#     CreateNPSOLsharedObject
#     (2) quoted all variables which are REF variables in
#     call to define_external in CreateNPSOLsharedObject
#     in call to interface
#     (3) changed access to inform_swnpsol, iter_swnpsol,
#     objf_swnpsol after their type has been changed in
#     CreateNPSOLsharedObject, e.g. inform_swnpsol[1] now
#     reads inform_swnpsol, since its type was changed from
#     REF(ARRAY(1..1, datatype= integer[4])) to
#     REF(integer[4])
#   010905 warning is thrown if initial point for vars does not 
#     comply with lower and upper bounds for vars
#   010615 variables named <Var>ToBeSubs have all been moved to
#     beginning of proc for better readability; (2) changed max
#     number of output files from 100 to 1000, warning issued
#     every 100 output files; (3) removed boolean var OptionsExist
#     (4) broke up some long lines; (5) added option SetAmat
#     which allows to reset matrix of linear constraints
#   010511 npsol_options.txt is now created if it does not exist
#     (proc used to throw error if npsol_options.txt did not
#     exist); order in A_swnpsol is now Fortran_order rather than
#     c_order, since A_swnpsol is received by c-wrapper but passed
#     on to fortran wrapper without any changes - mmo
#   010425 added error if npsol_options.txt doesn't exist
#   010418 removed boolean LowerBoundsRequested,
#     UpperBoundsRequested; turned former mandatory
#     parameters LowerBoundsVars, UpperBoundsVars into
#     optional parameters and added lines which set
#     these vars to values extracted from NLP at construction
#     of the instance of SimpleWrapperNPSOL by
#     CreateSimpleWrapperNPSOLinstance - mmo
#   010411 added options SetLowerBoundsConstr,
#     SetUpperBoundsConstr - mho
#    
###--------------------------------------------------------------------
SimpleWrapperTemplate:= module()

  export
    boundsNotViolated, 
    createDebugFiles, 
    createOptionsFile, 
    getLowerActiveVarBounds,
    getUpperActiveVarBounds,
    getBL, # should be local after debugging
    getBU, # should be local after debugging
    getC,
    getCjac,
    getClambda,
    getObjf,
    getGrad,
    getIndicesActiveVarBounds, 
    getIndicesLinearInequalityConstraints,
    getIndicesNonlinearInequalityConstraints, 
    getInform,
    getIter,
    getIstate,
    getR,
    getOptions, 
    getOptPoint,
    getParameters, 
    getSys, 
    getVarBounds, 
    getVariables, 
    getXVEC, 
    runOpt, 
    setAmat, 
    setBL,     # should be local, here for debugging purposes only 
    setBU,     # should be local, here for debugging purposes only 
    setIstate,
    setCjac,
    setClambda,
    setR,
    setLowerBoundsConstr,
    setUpperBoundsConstr,
    setLowerBoundsForVar,
    setUpperBoundsForVar,
    setLowerBoundsVars,
    setUpperBoundsVars,
    setBoundsForVar, 
    setOption, 
    setParameters, 
    setVariables, 
    setXVEC;
   
  local
    TheNLP,
    Scaling,
    ScalingOn,
    ScalingPars,
    ScalingParsOn;

  TheNLP:= copy(anNLP); 

  #
  # receive optional data for rescaling of variables
  #
    if
      type(ReqScaling, `module`)
    then
      Scaling:= copy(ReqScaling); 
      ScalingOn:= true;
    else
      ScalingOn:= false; 
    end if; 

  #
  # receive optional data for rescaling of parameters
  #
    if
      type(ReqScalingPars, `module`)
    then
      ScalingPars:= copy(ReqScalingPars); 
      ScalingParsOn:= true;
    else
      ScalingParsOn:= false; 
    end if; 

  #
  # receives several variables from constructor CreateInstance
  #
  # N, NCLIN, NCNLN, NROWA, NROWJ, NROWR, WorkingDir,
  # LowerBoundsConstrToBeSubs, UpperBoundsConstr, LowerBoundsVars,
  # UpperBoundsVars, Amat, AMatToBeSubs, BL_swnpsol, BU_swnpsol,
  # A_swnpsol, istate_swnpsol, c_swnpsol, cjac_swnpsol,
  # clambda_swnpsol, grad_swnpsol, r_swnpsol, xvec_swnpsol
  # LENIW, LENW, WorkingDir, RequiredVars, ParNames, NpsolOptions; 
  #
        
$include<SubsIntoSimpleWrapper/SimpleWrapperTemplate/boundsNotViolated.txt>
$include<SubsIntoSimpleWrapper/SimpleWrapperTemplate/createDebugFiles.txt>
$include<SubsIntoSimpleWrapper/SimpleWrapperTemplate/createOptionsFile.txt>
$include<SubsIntoSimpleWrapper/SimpleWrapperTemplate/getBL.txt>
$include<SubsIntoSimpleWrapper/SimpleWrapperTemplate/getBU.txt>
$include<SubsIntoSimpleWrapper/SimpleWrapperTemplate/getMethods.txt>
$include<SubsIntoSimpleWrapper/SimpleWrapperTemplate/getOptions.txt>
$include<SubsIntoSimpleWrapper/SimpleWrapperTemplate/getParameters.txt>
$include<SubsIntoSimpleWrapper/SimpleWrapperTemplate/getSys.txt>
$include<SubsIntoSimpleWrapper/SimpleWrapperTemplate/getVariables.txt>
$include<SubsIntoSimpleWrapper/SimpleWrapperTemplate/getXVEC.txt>
$include<SubsIntoSimpleWrapper/SimpleWrapperTemplate/setMethods.txt>
$include<SubsIntoSimpleWrapper/SimpleWrapperTemplate/runOpt.txt> 
$include<SubsIntoSimpleWrapper/SimpleWrapperTemplate/setXVEC.txt>
$include<SubsIntoSimpleWrapper/SimpleWrapperTemplate/setOption.txt>
$include<SubsIntoSimpleWrapper/SimpleWrapperTemplate/setParameters.txt>
$include<SubsIntoSimpleWrapper/SimpleWrapperTemplate/setVariables.txt>
$include<SubsIntoSimpleWrapper/SimpleWrapperTemplate/getVarBounds.txt>
$include<SubsIntoSimpleWrapper/SimpleWrapperTemplate/setBoundsForVar.txt>
$include<SubsIntoSimpleWrapper/SimpleWrapperTemplate/getIndicesActiveVarBounds.txt>
$include<SubsIntoSimpleWrapper/SimpleWrapperTemplate/getIndicesLinearInequalityConstraints.txt>
$include<SubsIntoSimpleWrapper/SimpleWrapperTemplate/getIndicesNonlinearInequalityConstraints.txt>
$include<SubsIntoSimpleWrapper/SimpleWrapperTemplate/getLowerActiveVarBounds.txt>
$include<SubsIntoSimpleWrapper/SimpleWrapperTemplate/getUpperActiveVarBounds.txt>


end module; # SimpleWrapperTemplate



