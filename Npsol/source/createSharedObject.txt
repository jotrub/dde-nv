  #############################################################
  #
  # NPSOL/source/createSharedObject.txt
  #
  # Creates shared objects needed for call to define_external.
  #
  # revision history:
  # 2008-03-06  instead of anNLP[...] using anNLP["..."] by dka
  # 2008-03-03 by dka, in the call of define_external put arguments 
  #            BL, BU, CLAMBDA and LENIW, LENW together
  # 2008-02-11 Removed -O and -m32 flags from compiler calls. 
  # 2008-02-11 Renamed fortran compiler from g77 to gfortran. 
  # 2008-02-11 Removed compiler and linker commands for solaris. 
  # 2008-02-11 Started with copy /media/disk/Backup/FirewireDisk-2007-04-08/
  # backup/2006-07-backup-with-cp/home/mmo/maple/npsol - mmo
  #
  #############################################################
  createSharedObject:= proc(
    NpsolConfun::name,
    NpsolObjfun::name,
    NpsolDir::string,
    StandardNLP
  )

    local oldDir, LinkerCommand, npsol, systemsuccessful,
      N, NCLIN, NCNLN, NROWA, NROWJ, NROWR, A, BL, BU, INFORM,
      ITER, ISTATE, C, CJAC, CLAMBDA, OBJF, GRAD, R, XVEC, LENIW,
      LENW, systemsuccessful2,
      SharedObjectName; 

    InstanceCounter:= InstanceCounter+ 1; 

    #------------------------------------------------------------
    #
    # check for common errors, other preparations
    #
    #------------------------------------------------------------  
      #
      # save directory in which proc was called and change to requested dir
      #
        oldDir:= currentdir():
        currentdir(NpsolDir):
        # currentdir creates error if NpsolDir does not exist
    
      #
      # make sure npsolconfun.f, npsolobjfun.f do not exist in NpsolDir
      #
        if
          Aux:-FileOperations:-fileExists("npsolconfun.f")
        then
          currentdir(oldDir):
          error(
            "routine npsolconfun.f already exists in directory %1", 
            NpsolDir
          );
        end if; 
    
        if
          Aux:-FileOperations:-fileExists("npsolobjfun.f")
        then
          currentdir(oldDir):
          error(
            "routine npsolobjfun.f already exists in directory %1", 
            NpsolDir
          );
        end if; 
  
    #------------------------------------------------------------
    #
    # create fortran files for contraints
    #
    #------------------------------------------------------------
      #
      # if no nonlinear constraints were given in nlp passed to
      # calling procedure CreateInstance, a dummy nonlinear
      # constraints file is linked into the shared object
      #
        if not
          type(eval(NpsolConfun), name)
        then
          codegen[fortran](
            NpsolConfun, 
            filename= "npsolconfun.f",
            precision= double
          );

          #
          # run Adifor if requested
          #
            if 
              UseAdifor= true
            then
              ADIFOR:-RunAD(
                "npsolconfun",
                ['x'],
                nops(StandardNLP["Variables"]),
                'c'
              ); 

              #
              # we must avoid underscores on linux
              #
              # note that sed command also changes occurence of 'g_res' in
              # within adifor-generated code
              #
                system(
                  `sed -e "s/g_npsolconfun/gnpsolconfun/" \
                  g_npsolconfun.f > gnpsolconfun.f`
                ); 
                system("rm -f g_npsolconfun.f");
        
            end if; # UseAdifor= true
    
          # 
          # compile constraints and derivatives
          #
            if
              OperatingSystem= "linux" and UseAdifor= false
            then
              system("gfortran -c -fPIC npsolconfun.f -o npsolconfun.o"); 
            elif
              OperatingSystem= "linux" and UseAdifor= true
            then
              system("gfortran -c -fPIC gnpsolconfun.f -o gnpsolconfun.o"); 
            end if; 

        else # i.e. type(eval(NpsolConfun), name)
	    if
              OperatingSystem= "linux" 
            then
              systemsuccessful:=system(
                cat(
                  "cp ",
                  _ModulesDirectory, 
                   "/Npsol/ext_routines/f2c/dummies/npsolconfun.o ."
                )
              ); 
	      systemsuccessful2:=system(
	        cat(
		  "cp ",
		  _ModulesDirectory,
		  "/Npsol/ext_routines/f2c/dummies/gnpsolconfun.o ."
		)
	      );          
            end if;

            if not
              systemsuccessful = 0
            then
              error("dummy file npsolconfun.o not found");
            end if;
	    
	    if not
              systemsuccessful2 = 0
            then
              error("dummy file gnpsolconfun.o not found");
            end if;

        end if; # not type(eval(NpsolConfun), name)

    #------------------------------------------------------------
    #
    # create fortran files for cost function
    #
    #------------------------------------------------------------
      #
      # if nlp passed to calling procedure contained no cost function,
      # it was set to zero by CreateExternalFunctions
      #
        codegen[fortran](
          NpsolObjfun, 
          filename= "npsolobjfun.f",
          precision= double
        );

      #
      # run Adifor if requested
      #
        if 
          UseAdifor= true
        then
          ADIFOR:-RunAD(
            "npsolobjfun",
            ['x'],
            nops(StandardNLP["Variables"]),
            'objf'
          ); 

          #
          # avoid underscores on linux
          #
          # note that sed command also changes occurence of 'g_res' in
          # within adifor-generated code
          #
            system(
              `sed -e "s/g_npsolobjfun/gnpsolobjfun/" \
              g_npsolobjfun.f > gnpsolobjfun.f`
                ); 
            system("rm -f g_npsolobjfun.f");

        end if; # UseAdifor= true

      # 
      # compile problem dependent file npsolobjfun.f  
      #
        if
          OperatingSystem= "linux" and UseAdifor= false
        then
          system("gfortran -c -fPIC npsolobjfun.f -o npsolobjfun.o");
        elif
          OperatingSystem= "linux" and UseAdifor= true
        then
          system("gfortran -c -fPIC gnpsolobjfun.f -o gnpsolobjfun.o");
        end if; 
  
    #----------------------------------------
    # 
    # link problem dependent and problem independent files
    #
    #----------------------------------------
      SharedObjectName:= cat(
        "cwrap_npsol", InstanceCounter, ".so"
      );

      if
        OperatingSystem= "linux" and UseAdifor= false
      then 
        LinkerCommand:= cat(
          `gcc -shared -Xlinker -Bsymbolic  npsolconfun.o npsolobjfun.o `,
          _ModulesDirectory, `/Npsol/ext_routines/f2c/cwrap/npsol_open.o `,
          _ModulesDirectory, `/Npsol/ext_routines/f2c/cwrap/npsol_close.o `,
          _ModulesDirectory, `/Npsol/ext_routines/f2c/cwrap/set_params.o `,
          _ModulesDirectory, `/Npsol/ext_routines/f2c/cwrap/cwrap_npsol.o `,
          _ModulesDirectory, `/Npsol/ext_routines/f2c/shared_obj/npsol.so `,
          `-lf2c -lm -lgfortran -o `, 
          SharedObjectName
        );
      elif
        OperatingSystem= "linux" and UseAdifor= true
      then 
        LinkerCommand:= cat(
          `gcc -shared -Xlinker -Bsymbolic  gnpsolconfun.o gnpsolobjfun.o `,
          _ModulesDirectory, `/Npsol/ext_routines/f2c/cwrap/npsolconfunad.o `,
          _ModulesDirectory, `/Npsol/ext_routines/f2c/cwrap/npsolobjfunad.o `,
          _ModulesDirectory, `/Npsol/ext_routines/f2c/cwrap/npsol_open.o `,
          _ModulesDirectory, `/Npsol/ext_routines/f2c/cwrap/npsol_close.o `,
          _ModulesDirectory, `/Npsol/ext_routines/f2c/cwrap/set_params.o `,
          _ModulesDirectory, `/Npsol/ext_routines/f2c/cwrap/cwrap_npsol.o `,
          _ModulesDirectory, `/Npsol/ext_routines/f2c/shared_obj/npsol.so `,
          "$AD_LIB/lib/ReqADIntrinsics-$AD_OS.o ",
          "$AD_LIB/lib/libADIntrinsics-$AD_OS.a ",        
          `-lf2c -lm -lgfortran -o `, 
          SharedObjectName
        );
      end if; 
    
      system(LinkerCommand);

    # 
    # create interface to NPSOL
    #
      npsol:= runDefineExternal(SharedObjectName);
    
      #
      # change back to directory of calling procedure
      #
        currentdir(oldDir);
  
      RETURN(npsol);

  end proc; # createSharedObject
