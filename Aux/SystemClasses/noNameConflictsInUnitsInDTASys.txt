#==============================================================================
#
# @path Aux/SystemClasses/noNameConflictsInUnitsInDTASys.txt
#
# @brief check for name conlicts between DTASys[Units] and variables in 
# DTASys; note this is NOT a check for consistency of units
#
# @param a DTASys which has non-mandatory list Units
#
# @return true if no conflicts exist, error otherwise
#
# @notes uses getListOfIndetsIn
#
# @authors dka
#
# @revision
# 2008-03-06  instead of aSys[...] using aSys["..."] 
# 2008-02-28  renamed by dka from NoNameConflictsInUnitsInDTASys to noNameConflictsInUnitsInDTASys
# 2007-11-18  Created by dka on the base of NoNameConflictsInUnitsInDAESys
#
#==============================================================================
noNameConflictsInUnitsInDTASys:= proc(
  aDTASys # no type check since called by ListOfErrorsInDTASysPart2
)
  
  local VarNames, UnitNames, Conflicts;

  #
  # non-mandatory entry Units must exist
  #
    if not
      member("Units", map(op, [indices(aDTASys)]))
    then
      error("entry Units must exist in DTASys");
    end if;

  #
  # get set of unit names
  #
    UnitNames:= map(
      Aux:-ListOperations:-getListOfIndetsIn,
      aDTASys["Units"]
    ); 
    UnitNames:= map(op, UnitNames);
    UnitNames:= convert(UnitNames, set); 

  #
  # get list of variable names
  #
    VarNames:= [
      op(map(lhs, aDTASys["Parameters"])),
      op(aDTASys["DynVars"]),
      op(aDTASys["AlgVars"]),
      op(map(lhs, aDTASys["ExplicitAlgEqns"]))
    ]; 
    VarNames:= convert(VarNames, set); 
  
  #
  # check for conflicts
  #
    Conflicts:= UnitNames intersect VarNames; 
    if not
      Conflicts= {}
    then
      error(
        "conflicts in unit names and variables names for %1", 
        Conflicts
      );
    end if;

  return(true); 

end proc; # noNameConflictsInUnitsInDTASys


