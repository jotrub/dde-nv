#initialisation
restart; 
#define paths
_ModulesDirectory:="/home/users/pme/Downloads/MapleModules/";
#load modules 
 cat(_ModulesDirectory, "/Aux/Aux.mpl");
 read(cat(_ModulesDirectory, "/Aux/Aux.mpl")): 
 read(cat(_ModulesDirectory, "/AugSys2/AugSys2.mpl")): 

#define system
Sys["DynVars"]:=[x1,x2,x3,x4,x5,x6]; 
Sys["Parameters"]:=[alpha1=50,alpha2=45,alpha3=400,alpha4=60,alpha5=480,alpha6=1000,alpha7=480,alpha8=1000]; 
Sys["AEs"]:=[];
Sys["ODEs"]:=[`x1'` = (F01/3600)/(V1/1000)*(1-cA1)+(Fr/3600)/(V1/1000)*(alphaA*cAFtau1/(alphaA*cAFtau1+alphaB*cBFtau1+alphaC*(1-cAFtau1-cBFtau1))-cA1)-kA*exp(-EA/(R*T1))*cA1,
`x2'` = (F01/3600)/(V1/1000)*(0-cB1)+(Fr/3600)/(V1/1000)*(alphaB*cBFtau1/(alphaA*cAFtau1+alphaB*cBFtau1+alphaC*(1-cAFtau1-cBFtau1))-cB1)+kA*exp(-EA/(R*T1))*cA1-kB*exp(-EB/(R*T1))*cB1,
`x3'` = (F01/3600)/(V1/1000)*(T01-T1)+(Fr/3600)/(V1/1000)*(TFtau1-T1)+BA*kA*exp(-EA/(R*T1))*cA1+BB*kB*exp(-EB/(R*T1))*cB1-(beta/10)/((V1/1000)^(1/3))*(T1-Tc1),
`x4'` = ((F01/3600)+(Fr/3600))/(VF/1000)*(cA1tau2-cAF)-((Fr/3600)+(Fp/3600))/(VF/1000)*(alphaA*cAF/(alphaA*cAF+alphaB*cBF+alphaC*(1-cAF-cBF))-cAF),
`x5'` = ((F01/3600)+(Fr/3600))/(VF/1000)*(cB1tau2-cBF)-((Fr/3600)+(Fp/3600))/(VF/1000)*(alphaB*cBF/(alphaA*cAF+alphaB*cBF+alphaC*(1-cAF-cBF))-cBF),
`x6'` = ((F01/3600)+(Fr/3600))/(VF/1000)*(T1tau2-TF)-(beta/10)/((VF/1000)^(1/3))*(TF-TcF)]; 
Sys["DelVars"]:=[x1tau1, x2tau1, x3tau1, x4tau1, x5tau1, x6tau1, x1tau2, x2tau2, x3tau2, x4tau2, x5tau2, x6tau2]; 
Sys["AlgVars"]:=[];
Sys["ExplicitAEs"]:=[cA1=x1, cB1=x2, T1 =x3, cAF=x4, cBF=x5, TF =x6, Fr  =alpha1, beta=alpha2, T01 =alpha3, F01 =alpha4, Tc1 =alpha5, V1  =alpha6, TcF =alpha7, VF  =alpha8, p1=3.5, p2=1, p3=0.5, p4=50000, p5=60000, p6=4.2, p7=-60000, p8=-70000, p9=14285.7143, p10=16666.6667, p11=8.314, p12=2770, p13=2500, p14=0, alphaA=p1, alphaB=p2, alphaC=p3, EA=p4, EB=p5, Cp=p6, dHA=p7, dHB=p8, BA=p9, BB=p10, R=p11, kA=p12, kB=p13, Fp=p14, cA1tau1=x1tau1, cB1tau1=x2tau1, T1tau1 =x3tau1, cAFtau1=x4tau1, cBFtau1=x5tau1, TFtau1 =x6tau1, cA1tau2=x1tau2, cB1tau2=x2tau2, T1tau2 =x3tau2, cAFtau2=x4tau2, cBFtau2=x5tau2, TFtau2 =x6tau2];
Sys["Delays"]:=[tau[1]=5*350/(Fr)    , tau[2]=5*350/(Fr+F01)];
 
#insert fixed parameters
#
Sys:=Aux:-SystemClasses:-subsExplicitAEsIntoDAESys(Sys);
# look for errors
Aux:-SystemClasses:-listOfErrorsInDDESys(Sys, strict);
# define normal vector system
AugSys:=AugSys2:-SdDelayBif:-FoldNV:-CreateFoldNVSys(Sys,[ alpha1, alpha2, alpha3, alpha4, alpha5, alpha6, alpha7, alpha8]):-getSys();

#pick relevant equations of Normal Vextor System
manifoldEq:=[]:
for i from 1 by 1 to 13 do
ithRhs:=rhs(AugSys["Equations"][i]);
for jj from 1 by 1 to nops(Sys["DynVars"]) do
ithRhs:=subs(Sys["DynVars"][jj]=x[jj],ithRhs): # ...states, ...
end do:
for jj from 1 by 1 to nops(Sys["Parameters"]) do
ithRhs:=subs(lhs(Sys["Parameters"][jj])=alpha[jj],ithRhs): # and parameters...
end do:
manifoldEq:=[op(manifoldEq),ithRhs]:
end do:
#create frame for code generation
Procedure4CodeGen:=proc(x, alpha, w1 )
m;
end proc;
ManifoldEquation:=subs([m=manifoldEq],eval(Procedure4CodeGen));
# generate C code
CodeGeneration:-C(ManifoldEquation,returnvariablename="residuum",defaulttype=numeric,output="FoldManifold.c",deducetypes=false);

#pick relevant equations of Normal Vextor System
manifoldEq:=[]:
for i from 14 by 1 to nops(AugSys["Equations"]) do
ithRhs:=rhs(AugSys["Equations"][i]);
for jj from 1 by 1 to nops(Sys["DynVars"]) do
ithRhs:=subs(Sys["DynVars"][jj]=x[jj],ithRhs): # ...states, ...
end do:
for jj from 1 by 1 to nops(Sys["Parameters"]) do
ithRhs:=subs(lhs(Sys["Parameters"][jj])=alpha[jj],ithRhs): # and parameters...
end do:
manifoldEq:=[op(manifoldEq),ithRhs]:
end do:
# create frame for code generation
Procedure4CodeGen:=proc(x, alpha,  w1, r)
m;
end proc;
ManifoldEquation:=subs([m=manifoldEq],eval(Procedure4CodeGen));
# generate C code
CodeGeneration:-C(ManifoldEquation,returnvariablename="residuum",defaulttype=numeric,output="FoldNV.c",deducetypes=false);



#get dde equations
dderhs:=[]; # create space for dde right hand side
for ii from 1 by 1 to nops(Sys["DynVars"]) do
ithRhs:=rhs(Sys["ODEs"][ii]): # get one entry and replace...
for jj from 1 by 1 to nops(Sys["DynVars"]) do
ithRhs:=subs(Sys["DynVars"][jj]=x[jj],ithRhs): # ...states, ...
end do:
for jj from 1 by 1 to nops(Sys["DelVars"]) do
ithRhs:=subs(Sys["DelVars"][jj]=xtau[jj],ithRhs); # ...delayed states,...
end do:
for jj from 1 by 1 to nops(Sys["Parameters"]) do
ithRhs:=subs(lhs(Sys["Parameters"][jj])=alpha[jj],ithRhs): # and parameters...
end do:
dderhs:=[op(dderhs),ithRhs]; # and concatenate it with the existing entries
end do:
# create frame for code generation
Procedure4CodeGen:=proc(x,xtau,alpha)
m;
end proc;
DDErightHandSide:=subs([m=dderhs],eval(Procedure4CodeGen));
# generate C code
CodeGeneration:-C(DDErightHandSide,returnvariablename="xdot",defaulttype=numeric,output="DDE.c",deducetypes=false);