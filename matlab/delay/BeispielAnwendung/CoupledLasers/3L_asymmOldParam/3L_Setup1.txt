# initialization                                                                                                                          
 restart;                                                                                                                                 
#define paths                                                                                                                             
 _ModulesDirectory:="/home/users/jmu/Dokumente/WisMit_18/svn/NVM/normalvectormethod/trunk/maple/":                                                                                         
#load modules                                                                                                                             
 read(cat(_ModulesDirectory, "/Aux/Aux.mpl")):                                                                                            
 read(cat(_ModulesDirectory, "/AugSys2/AugSys2.mpl")):                                                                                    
                                                                                                                                          
# define system                                                                                                                           
 Sys["DynVars"]:=[x1, x2, x3, x4, x5, x6, x7, x8, x9];                                                                                                                
 Sys["Parameters"]:=[ alpha1=0.1, alpha2=0.1, alpha3=0.1 ];                                                                                                
 Sys["AEs"]:=[];                                                                                                                          
 Sys["ODEs"]:=[ 
 `x1'` = rescale*(omega*E1i+n1*E1r-alphaLW*n1*E1i
 +K11*cos(phi-omega*rescale*tau)*E1rTau-K11*sin(phi-omega*rescale*tau)*E1iTau
 +K12*cos(phi-omega*rescale*tau)*E2rTau-K12*sin(phi-omega*rescale*tau)*E2iTau
 +K13*cos(phi-omega*rescale*tau)*E3rTau-K13*sin(phi-omega*rescale*tau)*E3iTau), 
 `x2'` = rescale*(-omega*E1r+alphaLW*n1*E1r+n1*E1i
 +K11*sin(phi-omega*rescale*tau)*E1rTau+K11*cos(phi-omega*rescale*tau)*E1iTau
 +K12*sin(phi-omega*rescale*tau)*E2rTau+K12*cos(phi-omega*rescale*tau)*E2iTau
 +K13*sin(phi-omega*rescale*tau)*E3rTau+K13*cos(phi-omega*rescale*tau)*E3iTau), 
 `x3'` = rescale*(epsilon*(pump1-n1-(2*n1+1)*(E1r^2+E1i^2))), 
 `x4'` = rescale*(omega*E2i+n2*E2r-alphaLW*n2*E2i
 +K22*cos(phi-omega*rescale*tau)*E2rTau-K22*sin(phi-omega*rescale*tau)*E2iTau
 +K21*cos(phi-omega*rescale*tau)*E1rTau-K21*sin(phi-omega*rescale*tau)*E1iTau
 +K23*cos(phi-omega*rescale*tau)*E3rTau-K23*sin(phi-omega*rescale*tau)*E3iTau), 
 `x5'` = rescale*(-omega*E2r+alphaLW*n2*E2r+n2*E2i
 +K22*sin(phi-omega*rescale*tau)*E2rTau+K22*cos(phi-omega*rescale*tau)*E2iTau
 +K21*sin(phi-omega*rescale*tau)*E1rTau+K21*cos(phi-omega*rescale*tau)*E1iTau
 +K23*sin(phi-omega*rescale*tau)*E3rTau+K23*cos(phi-omega*rescale*tau)*E3iTau), 
 `x6'` = rescale*(epsilon*(pump2-n2-(2*n2+1)*(E2r^2+E2i^2))), 
 `x7'` = rescale*(omega*E3i+n3*E3r-alphaLW*n3*E3i
 +K33*cos(phi-omega*rescale*tau)*E3rTau-K33*sin(phi-omega*rescale*tau)*E3iTau
 +K32*cos(phi-omega*rescale*tau)*E2rTau-K32*sin(phi-omega*rescale*tau)*E2iTau
 +K31*cos(phi-omega*rescale*tau)*E1rTau-K31*sin(phi-omega*rescale*tau)*E1iTau), 
 `x8'` = rescale*(-omega*E3r+alphaLW*n3*E3r+n3*E3i
 +K33*sin(phi-omega*rescale*tau)*E3rTau+K33*cos(phi-omega*rescale*tau)*E3iTau
 +K32*sin(phi-omega*rescale*tau)*E2rTau+K32*cos(phi-omega*rescale*tau)*E2iTau
 +K31*sin(phi-omega*rescale*tau)*E1rTau+K31*cos(phi-omega*rescale*tau)*E1iTau), 
 `x9'` = rescale*(epsilon*(pump3-n3-(2*n3+1)*(E3r^2+E3i^2)))];
 Sys["DelVars"]:=[x1Tau, x2Tau, x3Tau, x4Tau, x5Tau, x6Tau, x7Tau, x8Tau, x9Tau];                                                                                                        
 Sys["AlgVars"]:=[];                                                                                                                      
 Sys["ExplicitAEs"]:=[rescale=1000, E1r=x1, E1i=x2, n1=x3, E2r=x4, E2i=x5, n2=x6, E3r=x7, E3i=x8, n3=x9, E1rTau=x1Tau, E1iTau=x2Tau, n1Tau=x3Tau, E2rTau=x4Tau, E2iTau=x5Tau, n2Tau=x6Tau, E3rTau=x7Tau, E3iTau=x8Tau, n3Tau=x9Tau, omega=p[1], phi=-2, alphaLW=4, K11=0.005, K12=0, K13=0, K22=0, K21=0.005, K23=0, K33=0, K31=0.005, K32=0, pump1=alpha1, pump2=alpha2, pump3=alpha3, epsilon=0.005];                     
 Sys["Delays"]:=[ tau=100/rescale ];                                                                                            
                                                                                                                                          
# insert fixed parameters                                                                                                                 
#                                                                                                                                         
Sys:=Aux:-SystemClasses:-subsExplicitAEsIntoDAESys(Sys);                                                                                  
 # look for errors                                                                                                                        
  Aux:-SystemClasses:-listOfErrorsInDDESys(Sys, strict);                                                                                  
 # define normal vector system                                                                                                            
  AugSys:=AugSys2:-SdDelayBif:-ModFoldNV:-CreateModFoldNVSys(Sys,[ alpha1, alpha2, alpha3 ],-0.1e1):-getSys();                                       

  # pick relevant equations of Manifold System                                                                                        
 manifoldEq:=[]:                                                                                                                          
 for i from 1 by 1 to 19 do                                                                                                                
ithRhs:=rhs(AugSys["Equations"][i]);                                                                                                      
for jj from 1 by 1 to nops(Sys["DynVars"]) do                                                                                             
ithRhs:=subs(Sys["DynVars"][jj]=x[jj],ithRhs): # ...states, ...                                                                           
end do:                                                                                                                                   
for jj from 1 by 1 to nops(Sys["Parameters"]) do                                                                                          
ithRhs:=subs(lhs(Sys["Parameters"][jj])=alpha[jj],ithRhs): # and parameters...                                                            
end do:                                                                                                                                   
manifoldEq:=[op(manifoldEq),ithRhs]:                                                                                                      
 end do:                                                                                                                                  
# create frame for code generation                                                                                                        
 Procedure4CodeGen:=proc(x, alpha, p ,w )                                                                                                    
 m;                                                                                                                                       
 end proc;                                                                                                                                
 ManifoldEquation:=subs([m=manifoldEq],eval(Procedure4CodeGen));                                                                          
# generate C code                                                                                                                         
 CodeGeneration:-C(ManifoldEquation,returnvariablename="residuum",defaulttype=numeric,output="Mod_Fold_3L_SETUP_1tmp.c",deducetypes=false);             
                                                                                                                                          
# pick relevant equations of Normal Vectors System                                                                                        
 manifoldEq:=[]:                                                                                                                          
 for i from                                                                                                                               
19                                                                                                                                         
+1 by 1 to nops(AugSys["Equations"]) do                                                                                                   
ithRhs:=rhs(AugSys["Equations"][i]);                                                                                                      
for jj from 1 by 1 to nops(Sys["DynVars"]) do                                                                                             
ithRhs:=subs(Sys["DynVars"][jj]=x[jj],ithRhs): # ...states, ...                                                                           
end do:                                                                                                                                   
for jj from 1 by 1 to nops(Sys["Parameters"]) do                                                                                          
ithRhs:=subs(lhs(Sys["Parameters"][jj])=alpha[jj],ithRhs): # and parameters...                                                            
end do:                                                                                                                                   
manifoldEq:=[op(manifoldEq),ithRhs]:                                                                                                      
 end do:                                                                                                                                  
# create frame for code generation                                                                                                        
 Procedure4CodeGen:=proc(x, alpha, p, w, v, g1, u, r)                                                                                        
 m;                                                                                                                                       
 end proc;                                                                                                                                
 ManifoldEquation:=subs([m=manifoldEq],eval(Procedure4CodeGen));                                                                          
# generate C code                                                                                                                         
 CodeGeneration:-C(ManifoldEquation,returnvariablename="residuum",defaulttype=numeric,output="NV_Mod_Fold_3L_SETUP_1tmp.c",deducetypes=false);                   
                                                                                                                                          
# get dde equations                                                                                                                       
dderhs:=[]; # create space for dde right hand side                                                                                        
for ii from 1 by 1 to nops(Sys["DynVars"]) do                                                                                             
  ithRhs:=rhs(Sys["ODEs"][ii]): # get one entry and replace...                                                                            
  for jj from 1 by 1 to nops(Sys["DynVars"]) do                                                                                           
   ithRhs:=subs(Sys["DynVars"][jj]=x[jj],ithRhs): # ...states, ...                                                                        
 end do:                                                                                                                                  
   for jj from 1 by 1 to nops(Sys["DelVars"]) do                                                                                          
   ithRhs:=subs(Sys["DelVars"][jj]=xtau[jj],ithRhs); # ...delayed states,...                                                              
 end do;                                                                                                                                  
 for jj from 1 by 1 to nops(Sys["Parameters"]) do                                                                                         
   ithRhs:=subs(lhs(Sys["Parameters"][jj])=alpha[jj],ithRhs): # and parameters...                                                         
 end do:                                                                                                                                  
dderhs:=[op(dderhs),ithRhs]; # and concatenate it with the existing entries                                                               
end do:                                                                                                                                   
# create frame for code generation                                                                                                        
Procedure4CodeGen:=proc(x,xtau,alpha,p)                                                                                                     
m;                                                                                                                                        
end proc;                                                                                                                                 
DDErightHandSide:=subs([m=dderhs],eval(Procedure4CodeGen));                                                                               
# generate C code                                                                                                                         
CodeGeneration:-C(DDErightHandSide,returnvariablename="xdot",defaulttype=numeric,output="DDE_3L_SETUP_1tmp.c",deducetypes=false);                       

# insert fixed parameters                                                                                                                 
#                                                                                                                                         
Sys:=Aux:-SystemClasses:-subsExplicitAEsIntoDAESys(Sys);                                                                                  
 # look for errors                                                                                                                        
  Aux:-SystemClasses:-listOfErrorsInDDESys(Sys, strict);                                                                                  
 # define normal vector system                                                                                                            
  AugSys:=AugSys2:-SdDelayBif:-ModHopfNV:-CreateModHopfNVSys(Sys,[ alpha1, alpha2, alpha3 ],-1.0):-getSys();                                       
                                                                                                                                          
# pick relevant equations of Manifold System                                                                                        
 manifoldEq:=[]:                                                                                                                          
 for i from 1 by 1 to 29 do                                                                                                                
ithRhs:=rhs(AugSys["Equations"][i]);                                                                                                      
for jj from 1 by 1 to nops(Sys["DynVars"]) do                                                                                             
ithRhs:=subs(Sys["DynVars"][jj]=x[jj],ithRhs): # ...states, ...                                                                           
end do:                                                                                                                                   
for jj from 1 by 1 to nops(Sys["Parameters"]) do                                                                                          
ithRhs:=subs(lhs(Sys["Parameters"][jj])=alpha[jj],ithRhs): # and parameters...                                                            
end do:                                                                                                                                   
manifoldEq:=[op(manifoldEq),ithRhs]:                                                                                                      
 end do:                                                                                                                                  
# create frame for code generation                                                                                                        
 Procedure4CodeGen:=proc(x, alpha, p, omega, w1, w2 )                                                                                                    
 m;                                                                                                                                       
 end proc;                                                                                                                                
 ManifoldEquation:=subs([m=manifoldEq],eval(Procedure4CodeGen));                                                                          
# generate C code                                                                                                                         
 CodeGeneration:-C(ManifoldEquation,returnvariablename="residuum",defaulttype=numeric,output="Mod_Hopf_3L_SETUP_1tmp.c",deducetypes=false);             
                                                                                                                                          
# pick relevant equations of Normal Vectors System                                                                                        
 manifoldEq:=[]:                                                                                                                          
 for i from                                                                                                                               
29                                                                                                                                         
+1 by 1 to nops(AugSys["Equations"]) do                                                                                                   
ithRhs:=rhs(AugSys["Equations"][i]);                                                                                                      
for jj from 1 by 1 to nops(Sys["DynVars"]) do                                                                                             
ithRhs:=subs(Sys["DynVars"][jj]=x[jj],ithRhs): # ...states, ...                                                                           
end do:                                                                                                                                   
for jj from 1 by 1 to nops(Sys["Parameters"]) do                                                                                          
ithRhs:=subs(lhs(Sys["Parameters"][jj])=alpha[jj],ithRhs): # and parameters...                                                            
end do:                                                                                                                                   
manifoldEq:=[op(manifoldEq),ithRhs]:                                                                                                      
 end do:                                                                                                                                  
# create frame for code generation                                                                                                        
 Procedure4CodeGen:=proc(x, alpha, p, omega, w1, w2, v1, v2, g1, g2, u, r)                                                                                        
 m;                                                                                                                                       
 end proc;                                                                                                                                
 ManifoldEquation:=subs([m=manifoldEq],eval(Procedure4CodeGen));                                                                          
# generate C code                                                                                                                         
 CodeGeneration:-C(ManifoldEquation,returnvariablename="residuum",defaulttype=numeric,output="NV_Mod_Hopf_3L_SETUP_1tmp.c",deducetypes=false);                   
                                                                                                                                          
